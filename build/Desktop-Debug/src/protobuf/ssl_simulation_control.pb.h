// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_controller_common.pb.h"
#include "ssl_simulation_config.pb.h"
#include "ssl_simulation_error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fcontrol_2eproto;
namespace sslsim {
class SimulatorCommand;
class SimulatorCommandDefaultTypeInternal;
extern SimulatorCommandDefaultTypeInternal _SimulatorCommand_default_instance_;
class SimulatorControl;
class SimulatorControlDefaultTypeInternal;
extern SimulatorControlDefaultTypeInternal _SimulatorControl_default_instance_;
class SimulatorResponse;
class SimulatorResponseDefaultTypeInternal;
extern SimulatorResponseDefaultTypeInternal _SimulatorResponse_default_instance_;
class TeleportBall;
class TeleportBallDefaultTypeInternal;
extern TeleportBallDefaultTypeInternal _TeleportBall_default_instance_;
class TeleportRobot;
class TeleportRobotDefaultTypeInternal;
extern TeleportRobotDefaultTypeInternal _TeleportRobot_default_instance_;
}  // namespace sslsim
PROTOBUF_NAMESPACE_OPEN
template<> ::sslsim::SimulatorCommand* Arena::CreateMaybeMessage<::sslsim::SimulatorCommand>(Arena*);
template<> ::sslsim::SimulatorControl* Arena::CreateMaybeMessage<::sslsim::SimulatorControl>(Arena*);
template<> ::sslsim::SimulatorResponse* Arena::CreateMaybeMessage<::sslsim::SimulatorResponse>(Arena*);
template<> ::sslsim::TeleportBall* Arena::CreateMaybeMessage<::sslsim::TeleportBall>(Arena*);
template<> ::sslsim::TeleportRobot* Arena::CreateMaybeMessage<::sslsim::TeleportRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sslsim {

// ===================================================================

class TeleportBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sslsim.TeleportBall) */ {
 public:
  inline TeleportBall() : TeleportBall(nullptr) {};
  virtual ~TeleportBall();

  TeleportBall(const TeleportBall& from);
  TeleportBall(TeleportBall&& from) noexcept
    : TeleportBall() {
    *this = ::std::move(from);
  }

  inline TeleportBall& operator=(const TeleportBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleportBall& operator=(TeleportBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleportBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportBall* internal_default_instance() {
    return reinterpret_cast<const TeleportBall*>(
               &_TeleportBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeleportBall& a, TeleportBall& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleportBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleportBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleportBall* New() const final {
    return CreateMaybeMessage<TeleportBall>(nullptr);
  }

  TeleportBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleportBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleportBall& from);
  void MergeFrom(const TeleportBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sslsim.TeleportBall";
  }
  protected:
  explicit TeleportBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVxFieldNumber = 4,
    kVyFieldNumber = 5,
    kVzFieldNumber = 6,
    kTeleportSafelyFieldNumber = 7,
    kRollFieldNumber = 8,
    kByForceFieldNumber = 9,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float vx = 4;
  bool has_vx() const;
  private:
  bool _internal_has_vx() const;
  public:
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // optional float vy = 5;
  bool has_vy() const;
  private:
  bool _internal_has_vy() const;
  public:
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // optional float vz = 6;
  bool has_vz() const;
  private:
  bool _internal_has_vz() const;
  public:
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // optional bool teleport_safely = 7 [default = false];
  bool has_teleport_safely() const;
  private:
  bool _internal_has_teleport_safely() const;
  public:
  void clear_teleport_safely();
  bool teleport_safely() const;
  void set_teleport_safely(bool value);
  private:
  bool _internal_teleport_safely() const;
  void _internal_set_teleport_safely(bool value);
  public:

  // optional bool roll = 8 [default = false];
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  bool roll() const;
  void set_roll(bool value);
  private:
  bool _internal_roll() const;
  void _internal_set_roll(bool value);
  public:

  // optional bool by_force = 9 [default = false];
  bool has_by_force() const;
  private:
  bool _internal_has_by_force() const;
  public:
  void clear_by_force();
  bool by_force() const;
  void set_by_force(bool value);
  private:
  bool _internal_by_force() const;
  void _internal_set_by_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sslsim.TeleportBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float vx_;
  float vy_;
  float vz_;
  bool teleport_safely_;
  bool roll_;
  bool by_force_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class TeleportRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sslsim.TeleportRobot) */ {
 public:
  inline TeleportRobot() : TeleportRobot(nullptr) {};
  virtual ~TeleportRobot();

  TeleportRobot(const TeleportRobot& from);
  TeleportRobot(TeleportRobot&& from) noexcept
    : TeleportRobot() {
    *this = ::std::move(from);
  }

  inline TeleportRobot& operator=(const TeleportRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleportRobot& operator=(TeleportRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleportRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportRobot* internal_default_instance() {
    return reinterpret_cast<const TeleportRobot*>(
               &_TeleportRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TeleportRobot& a, TeleportRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleportRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleportRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleportRobot* New() const final {
    return CreateMaybeMessage<TeleportRobot>(nullptr);
  }

  TeleportRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleportRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleportRobot& from);
  void MergeFrom(const TeleportRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sslsim.TeleportRobot";
  }
  protected:
  explicit TeleportRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kVXFieldNumber = 5,
    kVYFieldNumber = 6,
    kVAngularFieldNumber = 7,
    kPresentFieldNumber = 8,
    kByForceFieldNumber = 9,
  };
  // required .gameController.BotId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::gameController::BotId& id() const;
  ::gameController::BotId* release_id();
  ::gameController::BotId* mutable_id();
  void set_allocated_id(::gameController::BotId* id);
  private:
  const ::gameController::BotId& _internal_id() const;
  ::gameController::BotId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::gameController::BotId* id);
  ::gameController::BotId* unsafe_arena_release_id();

  // optional float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // optional float v_x = 5 [default = 0];
  bool has_v_x() const;
  private:
  bool _internal_has_v_x() const;
  public:
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);
  private:
  float _internal_v_x() const;
  void _internal_set_v_x(float value);
  public:

  // optional float v_y = 6 [default = 0];
  bool has_v_y() const;
  private:
  bool _internal_has_v_y() const;
  public:
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);
  private:
  float _internal_v_y() const;
  void _internal_set_v_y(float value);
  public:

  // optional float v_angular = 7 [default = 0];
  bool has_v_angular() const;
  private:
  bool _internal_has_v_angular() const;
  public:
  void clear_v_angular();
  float v_angular() const;
  void set_v_angular(float value);
  private:
  float _internal_v_angular() const;
  void _internal_set_v_angular(float value);
  public:

  // optional bool present = 8;
  bool has_present() const;
  private:
  bool _internal_has_present() const;
  public:
  void clear_present();
  bool present() const;
  void set_present(bool value);
  private:
  bool _internal_present() const;
  void _internal_set_present(bool value);
  public:

  // optional bool by_force = 9 [default = false];
  bool has_by_force() const;
  private:
  bool _internal_has_by_force() const;
  public:
  void clear_by_force();
  bool by_force() const;
  void set_by_force(bool value);
  private:
  bool _internal_by_force() const;
  void _internal_set_by_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sslsim.TeleportRobot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gameController::BotId* id_;
  float x_;
  float y_;
  float orientation_;
  float v_x_;
  float v_y_;
  float v_angular_;
  bool present_;
  bool by_force_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class SimulatorControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sslsim.SimulatorControl) */ {
 public:
  inline SimulatorControl() : SimulatorControl(nullptr) {};
  virtual ~SimulatorControl();

  SimulatorControl(const SimulatorControl& from);
  SimulatorControl(SimulatorControl&& from) noexcept
    : SimulatorControl() {
    *this = ::std::move(from);
  }

  inline SimulatorControl& operator=(const SimulatorControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulatorControl& operator=(SimulatorControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulatorControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorControl* internal_default_instance() {
    return reinterpret_cast<const SimulatorControl*>(
               &_SimulatorControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimulatorControl& a, SimulatorControl& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulatorControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulatorControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulatorControl* New() const final {
    return CreateMaybeMessage<SimulatorControl>(nullptr);
  }

  SimulatorControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulatorControl& from);
  void MergeFrom(const SimulatorControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sslsim.SimulatorControl";
  }
  protected:
  explicit SimulatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeleportRobotFieldNumber = 2,
    kTeleportBallFieldNumber = 1,
    kSimulationSpeedFieldNumber = 3,
  };
  // repeated .sslsim.TeleportRobot teleport_robot = 2;
  int teleport_robot_size() const;
  private:
  int _internal_teleport_robot_size() const;
  public:
  void clear_teleport_robot();
  ::sslsim::TeleportRobot* mutable_teleport_robot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::TeleportRobot >*
      mutable_teleport_robot();
  private:
  const ::sslsim::TeleportRobot& _internal_teleport_robot(int index) const;
  ::sslsim::TeleportRobot* _internal_add_teleport_robot();
  public:
  const ::sslsim::TeleportRobot& teleport_robot(int index) const;
  ::sslsim::TeleportRobot* add_teleport_robot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::TeleportRobot >&
      teleport_robot() const;

  // optional .sslsim.TeleportBall teleport_ball = 1;
  bool has_teleport_ball() const;
  private:
  bool _internal_has_teleport_ball() const;
  public:
  void clear_teleport_ball();
  const ::sslsim::TeleportBall& teleport_ball() const;
  ::sslsim::TeleportBall* release_teleport_ball();
  ::sslsim::TeleportBall* mutable_teleport_ball();
  void set_allocated_teleport_ball(::sslsim::TeleportBall* teleport_ball);
  private:
  const ::sslsim::TeleportBall& _internal_teleport_ball() const;
  ::sslsim::TeleportBall* _internal_mutable_teleport_ball();
  public:
  void unsafe_arena_set_allocated_teleport_ball(
      ::sslsim::TeleportBall* teleport_ball);
  ::sslsim::TeleportBall* unsafe_arena_release_teleport_ball();

  // optional float simulation_speed = 3;
  bool has_simulation_speed() const;
  private:
  bool _internal_has_simulation_speed() const;
  public:
  void clear_simulation_speed();
  float simulation_speed() const;
  void set_simulation_speed(float value);
  private:
  float _internal_simulation_speed() const;
  void _internal_set_simulation_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:sslsim.SimulatorControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::TeleportRobot > teleport_robot_;
  ::sslsim::TeleportBall* teleport_ball_;
  float simulation_speed_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class SimulatorCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sslsim.SimulatorCommand) */ {
 public:
  inline SimulatorCommand() : SimulatorCommand(nullptr) {};
  virtual ~SimulatorCommand();

  SimulatorCommand(const SimulatorCommand& from);
  SimulatorCommand(SimulatorCommand&& from) noexcept
    : SimulatorCommand() {
    *this = ::std::move(from);
  }

  inline SimulatorCommand& operator=(const SimulatorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulatorCommand& operator=(SimulatorCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulatorCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorCommand* internal_default_instance() {
    return reinterpret_cast<const SimulatorCommand*>(
               &_SimulatorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimulatorCommand& a, SimulatorCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulatorCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulatorCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulatorCommand* New() const final {
    return CreateMaybeMessage<SimulatorCommand>(nullptr);
  }

  SimulatorCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulatorCommand& from);
  void MergeFrom(const SimulatorCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sslsim.SimulatorCommand";
  }
  protected:
  explicit SimulatorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // optional .sslsim.SimulatorControl control = 1;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::sslsim::SimulatorControl& control() const;
  ::sslsim::SimulatorControl* release_control();
  ::sslsim::SimulatorControl* mutable_control();
  void set_allocated_control(::sslsim::SimulatorControl* control);
  private:
  const ::sslsim::SimulatorControl& _internal_control() const;
  ::sslsim::SimulatorControl* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::sslsim::SimulatorControl* control);
  ::sslsim::SimulatorControl* unsafe_arena_release_control();

  // optional .sslsim.SimulatorConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::sslsim::SimulatorConfig& config() const;
  ::sslsim::SimulatorConfig* release_config();
  ::sslsim::SimulatorConfig* mutable_config();
  void set_allocated_config(::sslsim::SimulatorConfig* config);
  private:
  const ::sslsim::SimulatorConfig& _internal_config() const;
  ::sslsim::SimulatorConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::sslsim::SimulatorConfig* config);
  ::sslsim::SimulatorConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:sslsim.SimulatorCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sslsim::SimulatorControl* control_;
  ::sslsim::SimulatorConfig* config_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class SimulatorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sslsim.SimulatorResponse) */ {
 public:
  inline SimulatorResponse() : SimulatorResponse(nullptr) {};
  virtual ~SimulatorResponse();

  SimulatorResponse(const SimulatorResponse& from);
  SimulatorResponse(SimulatorResponse&& from) noexcept
    : SimulatorResponse() {
    *this = ::std::move(from);
  }

  inline SimulatorResponse& operator=(const SimulatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulatorResponse& operator=(SimulatorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorResponse* internal_default_instance() {
    return reinterpret_cast<const SimulatorResponse*>(
               &_SimulatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimulatorResponse& a, SimulatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulatorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulatorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulatorResponse* New() const final {
    return CreateMaybeMessage<SimulatorResponse>(nullptr);
  }

  SimulatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulatorResponse& from);
  void MergeFrom(const SimulatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sslsim.SimulatorResponse";
  }
  protected:
  explicit SimulatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
  };
  // repeated .sslsim.SimulatorError errors = 1;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::sslsim::SimulatorError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::SimulatorError >*
      mutable_errors();
  private:
  const ::sslsim::SimulatorError& _internal_errors(int index) const;
  ::sslsim::SimulatorError* _internal_add_errors();
  public:
  const ::sslsim::SimulatorError& errors(int index) const;
  ::sslsim::SimulatorError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::SimulatorError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:sslsim.SimulatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::SimulatorError > errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeleportBall

// optional float x = 1;
inline bool TeleportBall::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeleportBall::has_x() const {
  return _internal_has_x();
}
inline void TeleportBall::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TeleportBall::_internal_x() const {
  return x_;
}
inline float TeleportBall::x() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.x)
  return _internal_x();
}
inline void TeleportBall::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void TeleportBall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.x)
}

// optional float y = 2;
inline bool TeleportBall::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeleportBall::has_y() const {
  return _internal_has_y();
}
inline void TeleportBall::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TeleportBall::_internal_y() const {
  return y_;
}
inline float TeleportBall::y() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.y)
  return _internal_y();
}
inline void TeleportBall::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void TeleportBall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.y)
}

// optional float z = 3;
inline bool TeleportBall::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeleportBall::has_z() const {
  return _internal_has_z();
}
inline void TeleportBall::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TeleportBall::_internal_z() const {
  return z_;
}
inline float TeleportBall::z() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.z)
  return _internal_z();
}
inline void TeleportBall::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void TeleportBall::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.z)
}

// optional float vx = 4;
inline bool TeleportBall::_internal_has_vx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TeleportBall::has_vx() const {
  return _internal_has_vx();
}
inline void TeleportBall::clear_vx() {
  vx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TeleportBall::_internal_vx() const {
  return vx_;
}
inline float TeleportBall::vx() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.vx)
  return _internal_vx();
}
inline void TeleportBall::_internal_set_vx(float value) {
  _has_bits_[0] |= 0x00000008u;
  vx_ = value;
}
inline void TeleportBall::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.vx)
}

// optional float vy = 5;
inline bool TeleportBall::_internal_has_vy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TeleportBall::has_vy() const {
  return _internal_has_vy();
}
inline void TeleportBall::clear_vy() {
  vy_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TeleportBall::_internal_vy() const {
  return vy_;
}
inline float TeleportBall::vy() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.vy)
  return _internal_vy();
}
inline void TeleportBall::_internal_set_vy(float value) {
  _has_bits_[0] |= 0x00000010u;
  vy_ = value;
}
inline void TeleportBall::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.vy)
}

// optional float vz = 6;
inline bool TeleportBall::_internal_has_vz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeleportBall::has_vz() const {
  return _internal_has_vz();
}
inline void TeleportBall::clear_vz() {
  vz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TeleportBall::_internal_vz() const {
  return vz_;
}
inline float TeleportBall::vz() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.vz)
  return _internal_vz();
}
inline void TeleportBall::_internal_set_vz(float value) {
  _has_bits_[0] |= 0x00000020u;
  vz_ = value;
}
inline void TeleportBall::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.vz)
}

// optional bool teleport_safely = 7 [default = false];
inline bool TeleportBall::_internal_has_teleport_safely() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TeleportBall::has_teleport_safely() const {
  return _internal_has_teleport_safely();
}
inline void TeleportBall::clear_teleport_safely() {
  teleport_safely_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TeleportBall::_internal_teleport_safely() const {
  return teleport_safely_;
}
inline bool TeleportBall::teleport_safely() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.teleport_safely)
  return _internal_teleport_safely();
}
inline void TeleportBall::_internal_set_teleport_safely(bool value) {
  _has_bits_[0] |= 0x00000040u;
  teleport_safely_ = value;
}
inline void TeleportBall::set_teleport_safely(bool value) {
  _internal_set_teleport_safely(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.teleport_safely)
}

// optional bool roll = 8 [default = false];
inline bool TeleportBall::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TeleportBall::has_roll() const {
  return _internal_has_roll();
}
inline void TeleportBall::clear_roll() {
  roll_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TeleportBall::_internal_roll() const {
  return roll_;
}
inline bool TeleportBall::roll() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.roll)
  return _internal_roll();
}
inline void TeleportBall::_internal_set_roll(bool value) {
  _has_bits_[0] |= 0x00000080u;
  roll_ = value;
}
inline void TeleportBall::set_roll(bool value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.roll)
}

// optional bool by_force = 9 [default = false];
inline bool TeleportBall::_internal_has_by_force() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TeleportBall::has_by_force() const {
  return _internal_has_by_force();
}
inline void TeleportBall::clear_by_force() {
  by_force_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TeleportBall::_internal_by_force() const {
  return by_force_;
}
inline bool TeleportBall::by_force() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportBall.by_force)
  return _internal_by_force();
}
inline void TeleportBall::_internal_set_by_force(bool value) {
  _has_bits_[0] |= 0x00000100u;
  by_force_ = value;
}
inline void TeleportBall::set_by_force(bool value) {
  _internal_set_by_force(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportBall.by_force)
}

// -------------------------------------------------------------------

// TeleportRobot

// required .gameController.BotId id = 1;
inline bool TeleportRobot::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool TeleportRobot::has_id() const {
  return _internal_has_id();
}
inline const ::gameController::BotId& TeleportRobot::_internal_id() const {
  const ::gameController::BotId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gameController::BotId*>(
      &::gameController::_BotId_default_instance_);
}
inline const ::gameController::BotId& TeleportRobot::id() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.id)
  return _internal_id();
}
inline void TeleportRobot::unsafe_arena_set_allocated_id(
    ::gameController::BotId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sslsim.TeleportRobot.id)
}
inline ::gameController::BotId* TeleportRobot::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gameController::BotId* TeleportRobot::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:sslsim.TeleportRobot.id)
  _has_bits_[0] &= ~0x00000001u;
  ::gameController::BotId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::gameController::BotId* TeleportRobot::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameController::BotId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::gameController::BotId* TeleportRobot::mutable_id() {
  // @@protoc_insertion_point(field_mutable:sslsim.TeleportRobot.id)
  return _internal_mutable_id();
}
inline void TeleportRobot::set_allocated_id(::gameController::BotId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:sslsim.TeleportRobot.id)
}

// optional float x = 2;
inline bool TeleportRobot::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeleportRobot::has_x() const {
  return _internal_has_x();
}
inline void TeleportRobot::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TeleportRobot::_internal_x() const {
  return x_;
}
inline float TeleportRobot::x() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.x)
  return _internal_x();
}
inline void TeleportRobot::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void TeleportRobot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.x)
}

// optional float y = 3;
inline bool TeleportRobot::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeleportRobot::has_y() const {
  return _internal_has_y();
}
inline void TeleportRobot::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TeleportRobot::_internal_y() const {
  return y_;
}
inline float TeleportRobot::y() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.y)
  return _internal_y();
}
inline void TeleportRobot::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void TeleportRobot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.y)
}

// optional float orientation = 4;
inline bool TeleportRobot::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TeleportRobot::has_orientation() const {
  return _internal_has_orientation();
}
inline void TeleportRobot::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TeleportRobot::_internal_orientation() const {
  return orientation_;
}
inline float TeleportRobot::orientation() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.orientation)
  return _internal_orientation();
}
inline void TeleportRobot::_internal_set_orientation(float value) {
  _has_bits_[0] |= 0x00000008u;
  orientation_ = value;
}
inline void TeleportRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.orientation)
}

// optional float v_x = 5 [default = 0];
inline bool TeleportRobot::_internal_has_v_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TeleportRobot::has_v_x() const {
  return _internal_has_v_x();
}
inline void TeleportRobot::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TeleportRobot::_internal_v_x() const {
  return v_x_;
}
inline float TeleportRobot::v_x() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.v_x)
  return _internal_v_x();
}
inline void TeleportRobot::_internal_set_v_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  v_x_ = value;
}
inline void TeleportRobot::set_v_x(float value) {
  _internal_set_v_x(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.v_x)
}

// optional float v_y = 6 [default = 0];
inline bool TeleportRobot::_internal_has_v_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeleportRobot::has_v_y() const {
  return _internal_has_v_y();
}
inline void TeleportRobot::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TeleportRobot::_internal_v_y() const {
  return v_y_;
}
inline float TeleportRobot::v_y() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.v_y)
  return _internal_v_y();
}
inline void TeleportRobot::_internal_set_v_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  v_y_ = value;
}
inline void TeleportRobot::set_v_y(float value) {
  _internal_set_v_y(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.v_y)
}

// optional float v_angular = 7 [default = 0];
inline bool TeleportRobot::_internal_has_v_angular() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TeleportRobot::has_v_angular() const {
  return _internal_has_v_angular();
}
inline void TeleportRobot::clear_v_angular() {
  v_angular_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TeleportRobot::_internal_v_angular() const {
  return v_angular_;
}
inline float TeleportRobot::v_angular() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.v_angular)
  return _internal_v_angular();
}
inline void TeleportRobot::_internal_set_v_angular(float value) {
  _has_bits_[0] |= 0x00000040u;
  v_angular_ = value;
}
inline void TeleportRobot::set_v_angular(float value) {
  _internal_set_v_angular(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.v_angular)
}

// optional bool present = 8;
inline bool TeleportRobot::_internal_has_present() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TeleportRobot::has_present() const {
  return _internal_has_present();
}
inline void TeleportRobot::clear_present() {
  present_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TeleportRobot::_internal_present() const {
  return present_;
}
inline bool TeleportRobot::present() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.present)
  return _internal_present();
}
inline void TeleportRobot::_internal_set_present(bool value) {
  _has_bits_[0] |= 0x00000080u;
  present_ = value;
}
inline void TeleportRobot::set_present(bool value) {
  _internal_set_present(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.present)
}

// optional bool by_force = 9 [default = false];
inline bool TeleportRobot::_internal_has_by_force() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TeleportRobot::has_by_force() const {
  return _internal_has_by_force();
}
inline void TeleportRobot::clear_by_force() {
  by_force_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TeleportRobot::_internal_by_force() const {
  return by_force_;
}
inline bool TeleportRobot::by_force() const {
  // @@protoc_insertion_point(field_get:sslsim.TeleportRobot.by_force)
  return _internal_by_force();
}
inline void TeleportRobot::_internal_set_by_force(bool value) {
  _has_bits_[0] |= 0x00000100u;
  by_force_ = value;
}
inline void TeleportRobot::set_by_force(bool value) {
  _internal_set_by_force(value);
  // @@protoc_insertion_point(field_set:sslsim.TeleportRobot.by_force)
}

// -------------------------------------------------------------------

// SimulatorControl

// optional .sslsim.TeleportBall teleport_ball = 1;
inline bool SimulatorControl::_internal_has_teleport_ball() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || teleport_ball_ != nullptr);
  return value;
}
inline bool SimulatorControl::has_teleport_ball() const {
  return _internal_has_teleport_ball();
}
inline void SimulatorControl::clear_teleport_ball() {
  if (teleport_ball_ != nullptr) teleport_ball_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sslsim::TeleportBall& SimulatorControl::_internal_teleport_ball() const {
  const ::sslsim::TeleportBall* p = teleport_ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sslsim::TeleportBall*>(
      &::sslsim::_TeleportBall_default_instance_);
}
inline const ::sslsim::TeleportBall& SimulatorControl::teleport_ball() const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorControl.teleport_ball)
  return _internal_teleport_ball();
}
inline void SimulatorControl::unsafe_arena_set_allocated_teleport_ball(
    ::sslsim::TeleportBall* teleport_ball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teleport_ball_);
  }
  teleport_ball_ = teleport_ball;
  if (teleport_ball) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sslsim.SimulatorControl.teleport_ball)
}
inline ::sslsim::TeleportBall* SimulatorControl::release_teleport_ball() {
  auto temp = unsafe_arena_release_teleport_ball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sslsim::TeleportBall* SimulatorControl::unsafe_arena_release_teleport_ball() {
  // @@protoc_insertion_point(field_release:sslsim.SimulatorControl.teleport_ball)
  _has_bits_[0] &= ~0x00000001u;
  ::sslsim::TeleportBall* temp = teleport_ball_;
  teleport_ball_ = nullptr;
  return temp;
}
inline ::sslsim::TeleportBall* SimulatorControl::_internal_mutable_teleport_ball() {
  _has_bits_[0] |= 0x00000001u;
  if (teleport_ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::sslsim::TeleportBall>(GetArena());
    teleport_ball_ = p;
  }
  return teleport_ball_;
}
inline ::sslsim::TeleportBall* SimulatorControl::mutable_teleport_ball() {
  // @@protoc_insertion_point(field_mutable:sslsim.SimulatorControl.teleport_ball)
  return _internal_mutable_teleport_ball();
}
inline void SimulatorControl::set_allocated_teleport_ball(::sslsim::TeleportBall* teleport_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete teleport_ball_;
  }
  if (teleport_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(teleport_ball);
    if (message_arena != submessage_arena) {
      teleport_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleport_ball, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  teleport_ball_ = teleport_ball;
  // @@protoc_insertion_point(field_set_allocated:sslsim.SimulatorControl.teleport_ball)
}

// repeated .sslsim.TeleportRobot teleport_robot = 2;
inline int SimulatorControl::_internal_teleport_robot_size() const {
  return teleport_robot_.size();
}
inline int SimulatorControl::teleport_robot_size() const {
  return _internal_teleport_robot_size();
}
inline void SimulatorControl::clear_teleport_robot() {
  teleport_robot_.Clear();
}
inline ::sslsim::TeleportRobot* SimulatorControl::mutable_teleport_robot(int index) {
  // @@protoc_insertion_point(field_mutable:sslsim.SimulatorControl.teleport_robot)
  return teleport_robot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::TeleportRobot >*
SimulatorControl::mutable_teleport_robot() {
  // @@protoc_insertion_point(field_mutable_list:sslsim.SimulatorControl.teleport_robot)
  return &teleport_robot_;
}
inline const ::sslsim::TeleportRobot& SimulatorControl::_internal_teleport_robot(int index) const {
  return teleport_robot_.Get(index);
}
inline const ::sslsim::TeleportRobot& SimulatorControl::teleport_robot(int index) const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorControl.teleport_robot)
  return _internal_teleport_robot(index);
}
inline ::sslsim::TeleportRobot* SimulatorControl::_internal_add_teleport_robot() {
  return teleport_robot_.Add();
}
inline ::sslsim::TeleportRobot* SimulatorControl::add_teleport_robot() {
  // @@protoc_insertion_point(field_add:sslsim.SimulatorControl.teleport_robot)
  return _internal_add_teleport_robot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::TeleportRobot >&
SimulatorControl::teleport_robot() const {
  // @@protoc_insertion_point(field_list:sslsim.SimulatorControl.teleport_robot)
  return teleport_robot_;
}

// optional float simulation_speed = 3;
inline bool SimulatorControl::_internal_has_simulation_speed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimulatorControl::has_simulation_speed() const {
  return _internal_has_simulation_speed();
}
inline void SimulatorControl::clear_simulation_speed() {
  simulation_speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SimulatorControl::_internal_simulation_speed() const {
  return simulation_speed_;
}
inline float SimulatorControl::simulation_speed() const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorControl.simulation_speed)
  return _internal_simulation_speed();
}
inline void SimulatorControl::_internal_set_simulation_speed(float value) {
  _has_bits_[0] |= 0x00000002u;
  simulation_speed_ = value;
}
inline void SimulatorControl::set_simulation_speed(float value) {
  _internal_set_simulation_speed(value);
  // @@protoc_insertion_point(field_set:sslsim.SimulatorControl.simulation_speed)
}

// -------------------------------------------------------------------

// SimulatorCommand

// optional .sslsim.SimulatorControl control = 1;
inline bool SimulatorCommand::_internal_has_control() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || control_ != nullptr);
  return value;
}
inline bool SimulatorCommand::has_control() const {
  return _internal_has_control();
}
inline void SimulatorCommand::clear_control() {
  if (control_ != nullptr) control_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sslsim::SimulatorControl& SimulatorCommand::_internal_control() const {
  const ::sslsim::SimulatorControl* p = control_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sslsim::SimulatorControl*>(
      &::sslsim::_SimulatorControl_default_instance_);
}
inline const ::sslsim::SimulatorControl& SimulatorCommand::control() const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorCommand.control)
  return _internal_control();
}
inline void SimulatorCommand::unsafe_arena_set_allocated_control(
    ::sslsim::SimulatorControl* control) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sslsim.SimulatorCommand.control)
}
inline ::sslsim::SimulatorControl* SimulatorCommand::release_control() {
  auto temp = unsafe_arena_release_control();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sslsim::SimulatorControl* SimulatorCommand::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:sslsim.SimulatorCommand.control)
  _has_bits_[0] &= ~0x00000001u;
  ::sslsim::SimulatorControl* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::sslsim::SimulatorControl* SimulatorCommand::_internal_mutable_control() {
  _has_bits_[0] |= 0x00000001u;
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::sslsim::SimulatorControl>(GetArena());
    control_ = p;
  }
  return control_;
}
inline ::sslsim::SimulatorControl* SimulatorCommand::mutable_control() {
  // @@protoc_insertion_point(field_mutable:sslsim.SimulatorCommand.control)
  return _internal_mutable_control();
}
inline void SimulatorCommand::set_allocated_control(::sslsim::SimulatorControl* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:sslsim.SimulatorCommand.control)
}

// optional .sslsim.SimulatorConfig config = 2;
inline bool SimulatorCommand::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool SimulatorCommand::has_config() const {
  return _internal_has_config();
}
inline const ::sslsim::SimulatorConfig& SimulatorCommand::_internal_config() const {
  const ::sslsim::SimulatorConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sslsim::SimulatorConfig*>(
      &::sslsim::_SimulatorConfig_default_instance_);
}
inline const ::sslsim::SimulatorConfig& SimulatorCommand::config() const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorCommand.config)
  return _internal_config();
}
inline void SimulatorCommand::unsafe_arena_set_allocated_config(
    ::sslsim::SimulatorConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sslsim.SimulatorCommand.config)
}
inline ::sslsim::SimulatorConfig* SimulatorCommand::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sslsim::SimulatorConfig* SimulatorCommand::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:sslsim.SimulatorCommand.config)
  _has_bits_[0] &= ~0x00000002u;
  ::sslsim::SimulatorConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::sslsim::SimulatorConfig* SimulatorCommand::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000002u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::sslsim::SimulatorConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::sslsim::SimulatorConfig* SimulatorCommand::mutable_config() {
  // @@protoc_insertion_point(field_mutable:sslsim.SimulatorCommand.config)
  return _internal_mutable_config();
}
inline void SimulatorCommand::set_allocated_config(::sslsim::SimulatorConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:sslsim.SimulatorCommand.config)
}

// -------------------------------------------------------------------

// SimulatorResponse

// repeated .sslsim.SimulatorError errors = 1;
inline int SimulatorResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int SimulatorResponse::errors_size() const {
  return _internal_errors_size();
}
inline ::sslsim::SimulatorError* SimulatorResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:sslsim.SimulatorResponse.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::SimulatorError >*
SimulatorResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:sslsim.SimulatorResponse.errors)
  return &errors_;
}
inline const ::sslsim::SimulatorError& SimulatorResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::sslsim::SimulatorError& SimulatorResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:sslsim.SimulatorResponse.errors)
  return _internal_errors(index);
}
inline ::sslsim::SimulatorError* SimulatorResponse::_internal_add_errors() {
  return errors_.Add();
}
inline ::sslsim::SimulatorError* SimulatorResponse::add_errors() {
  // @@protoc_insertion_point(field_add:sslsim.SimulatorResponse.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sslsim::SimulatorError >&
SimulatorResponse::errors() const {
  // @@protoc_insertion_point(field_list:sslsim.SimulatorResponse.errors)
  return errors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sslsim

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto
