// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_api.proto

#include "ssl_gc_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Change_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GcState_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Protocol_ssl_5fgc_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_State_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
class OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output> _instance;
} _Output_default_instance_;
class ProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Protocol> _instance;
} _Protocol_default_instance_;
class ProtocolEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolEntry> _instance;
} _ProtocolEntry_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
static void InitDefaultsscc_info_Input_ssl_5fgc_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Input_default_instance_;
    new (ptr) ::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Input_ssl_5fgc_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Input_ssl_5fgc_5fapi_2eproto}, {
      &scc_info_Change_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto.base,
      &scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_Output_ssl_5fgc_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Output_default_instance_;
    new (ptr) ::Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Output_ssl_5fgc_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Output_ssl_5fgc_5fapi_2eproto}, {
      &scc_info_State_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_GcState_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_Protocol_ssl_5fgc_5fapi_2eproto.base,
      &scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Protocol_ssl_5fgc_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Protocol_default_instance_;
    new (ptr) ::Protocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Protocol_ssl_5fgc_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Protocol_ssl_5fgc_5fapi_2eproto}, {
      &scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtocolEntry_default_instance_;
    new (ptr) ::ProtocolEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtocolEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto}, {
      &scc_info_Change_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fgc_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Output, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Output, match_state_),
  PROTOBUF_FIELD_OFFSET(::Output, gc_state_),
  PROTOBUF_FIELD_OFFSET(::Output, protocol_),
  PROTOBUF_FIELD_OFFSET(::Output, config_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Protocol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol, delta_),
  PROTOBUF_FIELD_OFFSET(::Protocol, entry_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, id_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, change_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, match_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::ProtocolEntry, stage_time_elapsed_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Input, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Input, change_),
  PROTOBUF_FIELD_OFFSET(::Input, reset_match_),
  PROTOBUF_FIELD_OFFSET(::Input, config_delta_),
  PROTOBUF_FIELD_OFFSET(::Input, continue_action_),
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::Output)},
  { 13, 20, sizeof(::Protocol)},
  { 22, 31, sizeof(::ProtocolEntry)},
  { 35, 44, sizeof(::Input)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Protocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtocolEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Input_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ssl_gc_api.proto\032\022ssl_gc_state.proto\032\023"
  "ssl_gc_change.proto\032\023ssl_gc_engine.proto"
  "\032\032ssl_gc_engine_config.proto\032\036google/pro"
  "tobuf/duration.proto\"w\n\006Output\022\033\n\013match_"
  "state\030\001 \001(\0132\006.State\022\032\n\010gc_state\030\002 \001(\0132\010."
  "GcState\022\033\n\010protocol\030\003 \001(\0132\t.Protocol\022\027\n\006"
  "config\030\004 \001(\0132\007.Config\"8\n\010Protocol\022\r\n\005del"
  "ta\030\001 \001(\010\022\035\n\005entry\030\002 \003(\0132\016.ProtocolEntry\""
  "\242\001\n\rProtocolEntry\022\n\n\002id\030\001 \001(\005\022\027\n\006change\030"
  "\002 \001(\0132\007.Change\0225\n\022match_time_elapsed\030\003 \001"
  "(\0132\031.google.protobuf.Duration\0225\n\022stage_t"
  "ime_elapsed\030\004 \001(\0132\031.google.protobuf.Dura"
  "tion\"~\n\005Input\022\027\n\006change\030\001 \001(\0132\007.Change\022\023"
  "\n\013reset_match\030\002 \001(\010\022\035\n\014config_delta\030\003 \001("
  "\0132\007.Config\022(\n\017continue_action\030\004 \001(\0132\017.Co"
  "ntinueActionB=Z;github.com/RoboCup-SSL/s"
  "sl-game-controller/internal/app/api"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fapi_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ssl_5fgc_5fchange_2eproto,
  &::descriptor_table_ssl_5fgc_5fengine_2eproto,
  &::descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto,
  &::descriptor_table_ssl_5fgc_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fapi_2eproto_sccs[4] = {
  &scc_info_Input_ssl_5fgc_5fapi_2eproto.base,
  &scc_info_Output_ssl_5fgc_5fapi_2eproto.base,
  &scc_info_Protocol_ssl_5fgc_5fapi_2eproto.base,
  &scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fapi_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fapi_2eproto, "ssl_gc_api.proto", 675,
  &descriptor_table_ssl_5fgc_5fapi_2eproto_once, descriptor_table_ssl_5fgc_5fapi_2eproto_sccs, descriptor_table_ssl_5fgc_5fapi_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fapi_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fapi_2eproto, 4, file_level_enum_descriptors_ssl_5fgc_5fapi_2eproto, file_level_service_descriptors_ssl_5fgc_5fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fapi_2eproto)), true);

// ===================================================================

void Output::InitAsDefaultInstance() {
  ::_Output_default_instance_._instance.get_mutable()->match_state_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_Output_default_instance_._instance.get_mutable()->gc_state_ = const_cast< ::GcState*>(
      ::GcState::internal_default_instance());
  ::_Output_default_instance_._instance.get_mutable()->protocol_ = const_cast< ::Protocol*>(
      ::Protocol::internal_default_instance());
  ::_Output_default_instance_._instance.get_mutable()->config_ = const_cast< ::Config*>(
      ::Config::internal_default_instance());
}
class Output::_Internal {
 public:
  using HasBits = decltype(std::declval<Output>()._has_bits_);
  static const ::State& match_state(const Output* msg);
  static void set_has_match_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GcState& gc_state(const Output* msg);
  static void set_has_gc_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Protocol& protocol(const Output* msg);
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Config& config(const Output* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::State&
Output::_Internal::match_state(const Output* msg) {
  return *msg->match_state_;
}
const ::GcState&
Output::_Internal::gc_state(const Output* msg) {
  return *msg->gc_state_;
}
const ::Protocol&
Output::_Internal::protocol(const Output* msg) {
  return *msg->protocol_;
}
const ::Config&
Output::_Internal::config(const Output* msg) {
  return *msg->config_;
}
void Output::clear_match_state() {
  if (match_state_ != nullptr) match_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Output::clear_gc_state() {
  if (gc_state_ != nullptr) gc_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Output::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_state()) {
    match_state_ = new ::State(*from.match_state_);
  } else {
    match_state_ = nullptr;
  }
  if (from._internal_has_gc_state()) {
    gc_state_ = new ::GcState(*from.gc_state_);
  } else {
    gc_state_ = nullptr;
  }
  if (from._internal_has_protocol()) {
    protocol_ = new ::Protocol(*from.protocol_);
  } else {
    protocol_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Output)
}

void Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Output_ssl_5fgc_5fapi_2eproto.base);
  ::memset(&match_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&match_state_)) + sizeof(config_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:Output)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_state_;
  if (this != internal_default_instance()) delete gc_state_;
  if (this != internal_default_instance()) delete protocol_;
  if (this != internal_default_instance()) delete config_;
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Output_ssl_5fgc_5fapi_2eproto.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_state_ != nullptr);
      match_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gc_state_ != nullptr);
      gc_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(protocol_ != nullptr);
      protocol_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .State match_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GcState gc_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gc_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Protocol protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Config config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .State match_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match_state(this), target, stream);
  }

  // optional .GcState gc_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gc_state(this), target, stream);
  }

  // optional .Protocol protocol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::protocol(this), target, stream);
  }

  // optional .Config config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .State match_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_state_);
    }

    // optional .GcState gc_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gc_state_);
    }

    // optional .Protocol protocol = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_);
    }

    // optional .Config config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match_state()->::State::MergeFrom(from._internal_match_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gc_state()->::GcState::MergeFrom(from._internal_gc_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_protocol()->::Protocol::MergeFrom(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_config()->::Config::MergeFrom(from._internal_config());
    }
  }
}

void Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if (_internal_has_match_state()) {
    if (!match_state_->IsInitialized()) return false;
  }
  if (_internal_has_gc_state()) {
    if (!gc_state_->IsInitialized()) return false;
  }
  if (_internal_has_protocol()) {
    if (!protocol_->IsInitialized()) return false;
  }
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, config_)
      + sizeof(Output::config_)
      - PROTOBUF_FIELD_OFFSET(Output, match_state_)>(
          reinterpret_cast<char*>(&match_state_),
          reinterpret_cast<char*>(&other->match_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Protocol::InitAsDefaultInstance() {
}
class Protocol::_Internal {
 public:
  using HasBits = decltype(std::declval<Protocol>()._has_bits_);
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Protocol::Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol)
}
Protocol::Protocol(const Protocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delta_ = from.delta_;
  // @@protoc_insertion_point(copy_constructor:Protocol)
}

void Protocol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Protocol_ssl_5fgc_5fapi_2eproto.base);
  delta_ = false;
}

Protocol::~Protocol() {
  // @@protoc_insertion_point(destructor:Protocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Protocol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Protocol::ArenaDtor(void* object) {
  Protocol* _this = reinterpret_cast< Protocol* >(object);
  (void)_this;
}
void Protocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Protocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Protocol& Protocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Protocol_ssl_5fgc_5fapi_2eproto.base);
  return *internal_default_instance();
}


void Protocol::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  delta_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtocolEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Protocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_delta(), target);
  }

  // repeated .ProtocolEntry entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol)
  return target;
}

size_t Protocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtocolEntry entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool delta = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Protocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol)
  GOOGLE_DCHECK_NE(&from, this);
  const Protocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Protocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol)
    MergeFrom(*source);
  }
}

void Protocol::MergeFrom(const Protocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from._internal_has_delta()) {
    _internal_set_delta(from._internal_delta());
  }
}

void Protocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Protocol::CopyFrom(const Protocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protocol::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entry_)) return false;
  return true;
}

void Protocol::InternalSwap(Protocol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_.InternalSwap(&other->entry_);
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Protocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtocolEntry::InitAsDefaultInstance() {
  ::_ProtocolEntry_default_instance_._instance.get_mutable()->change_ = const_cast< ::Change*>(
      ::Change::internal_default_instance());
  ::_ProtocolEntry_default_instance_._instance.get_mutable()->match_time_elapsed_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::_ProtocolEntry_default_instance_._instance.get_mutable()->stage_time_elapsed_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class ProtocolEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtocolEntry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Change& change(const ProtocolEntry* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& match_time_elapsed(const ProtocolEntry* msg);
  static void set_has_match_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& stage_time_elapsed(const ProtocolEntry* msg);
  static void set_has_stage_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Change&
ProtocolEntry::_Internal::change(const ProtocolEntry* msg) {
  return *msg->change_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
ProtocolEntry::_Internal::match_time_elapsed(const ProtocolEntry* msg) {
  return *msg->match_time_elapsed_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
ProtocolEntry::_Internal::stage_time_elapsed(const ProtocolEntry* msg) {
  return *msg->stage_time_elapsed_;
}
void ProtocolEntry::clear_change() {
  if (change_ != nullptr) change_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ProtocolEntry::clear_match_time_elapsed() {
  if (match_time_elapsed_ != nullptr) match_time_elapsed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ProtocolEntry::clear_stage_time_elapsed() {
  if (stage_time_elapsed_ != nullptr) stage_time_elapsed_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ProtocolEntry::ProtocolEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtocolEntry)
}
ProtocolEntry::ProtocolEntry(const ProtocolEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_change()) {
    change_ = new ::Change(*from.change_);
  } else {
    change_ = nullptr;
  }
  if (from._internal_has_match_time_elapsed()) {
    match_time_elapsed_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.match_time_elapsed_);
  } else {
    match_time_elapsed_ = nullptr;
  }
  if (from._internal_has_stage_time_elapsed()) {
    stage_time_elapsed_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.stage_time_elapsed_);
  } else {
    stage_time_elapsed_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ProtocolEntry)
}

void ProtocolEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto.base);
  ::memset(&change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&change_)) + sizeof(id_));
}

ProtocolEntry::~ProtocolEntry() {
  // @@protoc_insertion_point(destructor:ProtocolEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete match_time_elapsed_;
  if (this != internal_default_instance()) delete stage_time_elapsed_;
}

void ProtocolEntry::ArenaDtor(void* object) {
  ProtocolEntry* _this = reinterpret_cast< ProtocolEntry* >(object);
  (void)_this;
}
void ProtocolEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolEntry& ProtocolEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolEntry_ssl_5fgc_5fapi_2eproto.base);
  return *internal_default_instance();
}


void ProtocolEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(match_time_elapsed_ != nullptr);
      match_time_elapsed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stage_time_elapsed_ != nullptr);
      stage_time_elapsed_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Change change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration match_time_elapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_time_elapsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration stage_time_elapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stage_time_elapsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .Change change = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::change(this), target, stream);
  }

  // optional .google.protobuf.Duration match_time_elapsed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::match_time_elapsed(this), target, stream);
  }

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stage_time_elapsed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolEntry)
  return target;
}

size_t ProtocolEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Change change = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_);
    }

    // optional .google.protobuf.Duration match_time_elapsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_time_elapsed_);
    }

    // optional .google.protobuf.Duration stage_time_elapsed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_time_elapsed_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtocolEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtocolEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtocolEntry)
    MergeFrom(*source);
  }
}

void ProtocolEntry::MergeFrom(const ProtocolEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtocolEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_change()->::Change::MergeFrom(from._internal_change());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_match_time_elapsed()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_match_time_elapsed());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stage_time_elapsed()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_stage_time_elapsed());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtocolEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtocolEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolEntry::CopyFrom(const ProtocolEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolEntry::IsInitialized() const {
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  return true;
}

void ProtocolEntry::InternalSwap(ProtocolEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolEntry, id_)
      + sizeof(ProtocolEntry::id_)
      - PROTOBUF_FIELD_OFFSET(ProtocolEntry, change_)>(
          reinterpret_cast<char*>(&change_),
          reinterpret_cast<char*>(&other->change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::_Input_default_instance_._instance.get_mutable()->change_ = const_cast< ::Change*>(
      ::Change::internal_default_instance());
  ::_Input_default_instance_._instance.get_mutable()->config_delta_ = const_cast< ::Config*>(
      ::Config::internal_default_instance());
  ::_Input_default_instance_._instance.get_mutable()->continue_action_ = const_cast< ::ContinueAction*>(
      ::ContinueAction::internal_default_instance());
}
class Input::_Internal {
 public:
  using HasBits = decltype(std::declval<Input>()._has_bits_);
  static const ::Change& change(const Input* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_match(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Config& config_delta(const Input* msg);
  static void set_has_config_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ContinueAction& continue_action(const Input* msg);
  static void set_has_continue_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Change&
Input::_Internal::change(const Input* msg) {
  return *msg->change_;
}
const ::Config&
Input::_Internal::config_delta(const Input* msg) {
  return *msg->config_delta_;
}
const ::ContinueAction&
Input::_Internal::continue_action(const Input* msg) {
  return *msg->continue_action_;
}
void Input::clear_change() {
  if (change_ != nullptr) change_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Input::clear_config_delta() {
  if (config_delta_ != nullptr) config_delta_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Input::clear_continue_action() {
  if (continue_action_ != nullptr) continue_action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_change()) {
    change_ = new ::Change(*from.change_);
  } else {
    change_ = nullptr;
  }
  if (from._internal_has_config_delta()) {
    config_delta_ = new ::Config(*from.config_delta_);
  } else {
    config_delta_ = nullptr;
  }
  if (from._internal_has_continue_action()) {
    continue_action_ = new ::ContinueAction(*from.continue_action_);
  } else {
    continue_action_ = nullptr;
  }
  reset_match_ = from.reset_match_;
  // @@protoc_insertion_point(copy_constructor:Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_ssl_5fgc_5fapi_2eproto.base);
  ::memset(&change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_match_) -
      reinterpret_cast<char*>(&change_)) + sizeof(reset_match_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete config_delta_;
  if (this != internal_default_instance()) delete continue_action_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_ssl_5fgc_5fapi_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_delta_ != nullptr);
      config_delta_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(continue_action_ != nullptr);
      continue_action_->Clear();
    }
  }
  reset_match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Change change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reset_match(&has_bits);
          reset_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Config config_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_delta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ContinueAction continue_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_continue_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Change change = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::change(this), target, stream);
  }

  // optional bool reset_match = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reset_match(), target);
  }

  // optional .Config config_delta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config_delta(this), target, stream);
  }

  // optional .ContinueAction continue_action = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::continue_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Change change = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_);
    }

    // optional .Config config_delta = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_delta_);
    }

    // optional .ContinueAction continue_action = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *continue_action_);
    }

    // optional bool reset_match = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_change()->::Change::MergeFrom(from._internal_change());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_config_delta()->::Config::MergeFrom(from._internal_config_delta());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_continue_action()->::ContinueAction::MergeFrom(from._internal_continue_action());
    }
    if (cached_has_bits & 0x00000008u) {
      reset_match_ = from.reset_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  if (_internal_has_continue_action()) {
    if (!continue_action_->IsInitialized()) return false;
  }
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, reset_match_)
      + sizeof(Input::reset_match_)
      - PROTOBUF_FIELD_OFFSET(Input, change_)>(
          reinterpret_cast<char*>(&change_),
          reinterpret_cast<char*>(&other->change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Output* Arena::CreateMaybeMessage< ::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol* Arena::CreateMaybeMessage< ::Protocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtocolEntry* Arena::CreateMaybeMessage< ::ProtocolEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtocolEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Input* Arena::CreateMaybeMessage< ::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Input >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
