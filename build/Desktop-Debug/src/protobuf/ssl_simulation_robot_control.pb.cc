// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_robot_control.proto

#include "ssl_simulation_robot_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
namespace sslsim {
class RobotCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommand> _instance;
} _RobotCommand_default_instance_;
class RobotMoveCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMoveCommand> _instance;
  const ::sslsim::MoveWheelVelocity* wheel_velocity_;
  const ::sslsim::MoveLocalVelocity* local_velocity_;
  const ::sslsim::MoveGlobalVelocity* global_velocity_;
} _RobotMoveCommand_default_instance_;
class MoveWheelVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveWheelVelocity> _instance;
} _MoveWheelVelocity_default_instance_;
class MoveLocalVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLocalVelocity> _instance;
} _MoveLocalVelocity_default_instance_;
class MoveGlobalVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveGlobalVelocity> _instance;
} _MoveGlobalVelocity_default_instance_;
class RobotControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotControl> _instance;
} _RobotControl_default_instance_;
}  // namespace sslsim
static void InitDefaultsscc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_MoveGlobalVelocity_default_instance_;
    new (ptr) ::sslsim::MoveGlobalVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::MoveGlobalVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_MoveLocalVelocity_default_instance_;
    new (ptr) ::sslsim::MoveLocalVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::MoveLocalVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_MoveWheelVelocity_default_instance_;
    new (ptr) ::sslsim::MoveWheelVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::MoveWheelVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_RobotCommand_default_instance_;
    new (ptr) ::sslsim::RobotCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::RobotCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {
      &scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_RobotControl_default_instance_;
    new (ptr) ::sslsim::RobotControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::RobotControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {
      &scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_RobotMoveCommand_default_instance_;
    new (ptr) ::sslsim::RobotMoveCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::RobotMoveCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto}, {
      &scc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
      &scc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
      &scc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fsimulation_5frobot_5fcontrol_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fsimulation_5frobot_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fsimulation_5frobot_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, id_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, move_command_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, kick_speed_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, kick_angle_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotCommand, dribbler_speed_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotMoveCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotMoveCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sslsim::RobotMoveCommandDefaultTypeInternal, wheel_velocity_),
  offsetof(::sslsim::RobotMoveCommandDefaultTypeInternal, local_velocity_),
  offsetof(::sslsim::RobotMoveCommandDefaultTypeInternal, global_velocity_),
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotMoveCommand, command_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, front_right_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, back_right_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, back_left_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveWheelVelocity, front_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveLocalVelocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveLocalVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveLocalVelocity, forward_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveLocalVelocity, left_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveLocalVelocity, angular_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveGlobalVelocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveGlobalVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveGlobalVelocity, x_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveGlobalVelocity, y_),
  PROTOBUF_FIELD_OFFSET(::sslsim::MoveGlobalVelocity, angular_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::RobotControl, robot_commands_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::sslsim::RobotCommand)},
  { 15, -1, sizeof(::sslsim::RobotMoveCommand)},
  { 24, 33, sizeof(::sslsim::MoveWheelVelocity)},
  { 37, 45, sizeof(::sslsim::MoveLocalVelocity)},
  { 48, 56, sizeof(::sslsim::MoveGlobalVelocity)},
  { 59, -1, sizeof(::sslsim::RobotControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_RobotCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_RobotMoveCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_MoveWheelVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_MoveLocalVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_MoveGlobalVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_RobotControl_default_instance_),
};

const char descriptor_table_protodef_ssl_5fsimulation_5frobot_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ssl_simulation_robot_control.proto\022\006ss"
  "lsim\"\215\001\n\014RobotCommand\022\n\n\002id\030\001 \002(\r\022.\n\014mov"
  "e_command\030\002 \001(\0132\030.sslsim.RobotMoveComman"
  "d\022\022\n\nkick_speed\030\003 \001(\002\022\025\n\nkick_angle\030\004 \001("
  "\002:\0010\022\026\n\016dribbler_speed\030\005 \001(\002\"\276\001\n\020RobotMo"
  "veCommand\0223\n\016wheel_velocity\030\001 \001(\0132\031.ssls"
  "im.MoveWheelVelocityH\000\0223\n\016local_velocity"
  "\030\002 \001(\0132\031.sslsim.MoveLocalVelocityH\000\0225\n\017g"
  "lobal_velocity\030\003 \001(\0132\032.sslsim.MoveGlobal"
  "VelocityH\000B\t\n\007command\"c\n\021MoveWheelVeloci"
  "ty\022\023\n\013front_right\030\001 \002(\002\022\022\n\nback_right\030\002 "
  "\002(\002\022\021\n\tback_left\030\003 \002(\002\022\022\n\nfront_left\030\004 \002"
  "(\002\"C\n\021MoveLocalVelocity\022\017\n\007forward\030\001 \002(\002"
  "\022\014\n\004left\030\002 \002(\002\022\017\n\007angular\030\003 \002(\002\";\n\022MoveG"
  "lobalVelocity\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\017\n\007a"
  "ngular\030\003 \002(\002\"<\n\014RobotControl\022,\n\016robot_co"
  "mmands\030\001 \003(\0132\024.sslsim.RobotCommand"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_sccs[6] = {
  &scc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
  &scc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
  &scc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
  &scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
  &scc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
  &scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fsimulation_5frobot_5fcontrol_2eproto, "ssl_simulation_robot_control.proto", 674,
  &descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_once, descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_sccs, descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto::offsets,
  file_level_metadata_ssl_5fsimulation_5frobot_5fcontrol_2eproto, 6, file_level_enum_descriptors_ssl_5fsimulation_5frobot_5fcontrol_2eproto, file_level_service_descriptors_ssl_5fsimulation_5frobot_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fsimulation_5frobot_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto)), true);
namespace sslsim {

// ===================================================================

void RobotCommand::InitAsDefaultInstance() {
  ::sslsim::_RobotCommand_default_instance_._instance.get_mutable()->move_command_ = const_cast< ::sslsim::RobotMoveCommand*>(
      ::sslsim::RobotMoveCommand::internal_default_instance());
}
class RobotCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotCommand>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sslsim::RobotMoveCommand& move_command(const RobotCommand* msg);
  static void set_has_move_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kick_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kick_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dribbler_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::sslsim::RobotMoveCommand&
RobotCommand::_Internal::move_command(const RobotCommand* msg) {
  return *msg->move_command_;
}
RobotCommand::RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_move_command()) {
    move_command_ = new ::sslsim::RobotMoveCommand(*from.move_command_);
  } else {
    move_command_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dribbler_speed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dribbler_speed_));
  // @@protoc_insertion_point(copy_constructor:sslsim.RobotCommand)
}

void RobotCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  ::memset(&move_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribbler_speed_) -
      reinterpret_cast<char*>(&move_command_)) + sizeof(dribbler_speed_));
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:sslsim.RobotCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete move_command_;
}

void RobotCommand::ArenaDtor(void* object) {
  RobotCommand* _this = reinterpret_cast< RobotCommand* >(object);
  (void)_this;
}
void RobotCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommand& RobotCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(move_command_ != nullptr);
    move_command_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dribbler_speed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dribbler_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sslsim.RobotMoveCommand move_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float kick_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_kick_speed(&has_bits);
          kick_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kick_angle = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_kick_angle(&has_bits);
          kick_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dribbler_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_dribbler_speed(&has_bits);
          dribbler_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .sslsim.RobotMoveCommand move_command = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::move_command(this), target, stream);
  }

  // optional float kick_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_kick_speed(), target);
  }

  // optional float kick_angle = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kick_angle(), target);
  }

  // optional float dribbler_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dribbler_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.RobotCommand)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sslsim.RobotMoveCommand move_command = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *move_command_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional float kick_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float kick_angle = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float dribbler_speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.RobotCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.RobotCommand)
    MergeFrom(*source);
  }
}

void RobotCommand::MergeFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_move_command()->::sslsim::RobotMoveCommand::MergeFrom(from._internal_move_command());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kick_speed_ = from.kick_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      kick_angle_ = from.kick_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      dribbler_speed_ = from.dribbler_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_move_command()) {
    if (!move_command_->IsInitialized()) return false;
  }
  return true;
}

void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommand, dribbler_speed_)
      + sizeof(RobotCommand::dribbler_speed_)
      - PROTOBUF_FIELD_OFFSET(RobotCommand, move_command_)>(
          reinterpret_cast<char*>(&move_command_),
          reinterpret_cast<char*>(&other->move_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotMoveCommand::InitAsDefaultInstance() {
  ::sslsim::_RobotMoveCommand_default_instance_.wheel_velocity_ = const_cast< ::sslsim::MoveWheelVelocity*>(
      ::sslsim::MoveWheelVelocity::internal_default_instance());
  ::sslsim::_RobotMoveCommand_default_instance_.local_velocity_ = const_cast< ::sslsim::MoveLocalVelocity*>(
      ::sslsim::MoveLocalVelocity::internal_default_instance());
  ::sslsim::_RobotMoveCommand_default_instance_.global_velocity_ = const_cast< ::sslsim::MoveGlobalVelocity*>(
      ::sslsim::MoveGlobalVelocity::internal_default_instance());
}
class RobotMoveCommand::_Internal {
 public:
  static const ::sslsim::MoveWheelVelocity& wheel_velocity(const RobotMoveCommand* msg);
  static const ::sslsim::MoveLocalVelocity& local_velocity(const RobotMoveCommand* msg);
  static const ::sslsim::MoveGlobalVelocity& global_velocity(const RobotMoveCommand* msg);
};

const ::sslsim::MoveWheelVelocity&
RobotMoveCommand::_Internal::wheel_velocity(const RobotMoveCommand* msg) {
  return *msg->command_.wheel_velocity_;
}
const ::sslsim::MoveLocalVelocity&
RobotMoveCommand::_Internal::local_velocity(const RobotMoveCommand* msg) {
  return *msg->command_.local_velocity_;
}
const ::sslsim::MoveGlobalVelocity&
RobotMoveCommand::_Internal::global_velocity(const RobotMoveCommand* msg) {
  return *msg->command_.global_velocity_;
}
void RobotMoveCommand::set_allocated_wheel_velocity(::sslsim::MoveWheelVelocity* wheel_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (wheel_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wheel_velocity);
    if (message_arena != submessage_arena) {
      wheel_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_velocity, submessage_arena);
    }
    set_has_wheel_velocity();
    command_.wheel_velocity_ = wheel_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:sslsim.RobotMoveCommand.wheel_velocity)
}
void RobotMoveCommand::set_allocated_local_velocity(::sslsim::MoveLocalVelocity* local_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (local_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_velocity);
    if (message_arena != submessage_arena) {
      local_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_velocity, submessage_arena);
    }
    set_has_local_velocity();
    command_.local_velocity_ = local_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:sslsim.RobotMoveCommand.local_velocity)
}
void RobotMoveCommand::set_allocated_global_velocity(::sslsim::MoveGlobalVelocity* global_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (global_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(global_velocity);
    if (message_arena != submessage_arena) {
      global_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_velocity, submessage_arena);
    }
    set_has_global_velocity();
    command_.global_velocity_ = global_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:sslsim.RobotMoveCommand.global_velocity)
}
RobotMoveCommand::RobotMoveCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.RobotMoveCommand)
}
RobotMoveCommand::RobotMoveCommand(const RobotMoveCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kWheelVelocity: {
      _internal_mutable_wheel_velocity()->::sslsim::MoveWheelVelocity::MergeFrom(from._internal_wheel_velocity());
      break;
    }
    case kLocalVelocity: {
      _internal_mutable_local_velocity()->::sslsim::MoveLocalVelocity::MergeFrom(from._internal_local_velocity());
      break;
    }
    case kGlobalVelocity: {
      _internal_mutable_global_velocity()->::sslsim::MoveGlobalVelocity::MergeFrom(from._internal_global_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sslsim.RobotMoveCommand)
}

void RobotMoveCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  clear_has_command();
}

RobotMoveCommand::~RobotMoveCommand() {
  // @@protoc_insertion_point(destructor:sslsim.RobotMoveCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMoveCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void RobotMoveCommand::ArenaDtor(void* object) {
  RobotMoveCommand* _this = reinterpret_cast< RobotMoveCommand* >(object);
  (void)_this;
}
void RobotMoveCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMoveCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMoveCommand& RobotMoveCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMoveCommand_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void RobotMoveCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:sslsim.RobotMoveCommand)
  switch (command_case()) {
    case kWheelVelocity: {
      if (GetArena() == nullptr) {
        delete command_.wheel_velocity_;
      }
      break;
    }
    case kLocalVelocity: {
      if (GetArena() == nullptr) {
        delete command_.local_velocity_;
      }
      break;
    }
    case kGlobalVelocity: {
      if (GetArena() == nullptr) {
        delete command_.global_velocity_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void RobotMoveCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.RobotMoveCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMoveCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sslsim.MoveWheelVelocity wheel_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sslsim.MoveLocalVelocity local_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sslsim.MoveGlobalVelocity global_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMoveCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.RobotMoveCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kWheelVelocity: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::wheel_velocity(this), target, stream);
      break;
    }
    case kLocalVelocity: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::local_velocity(this), target, stream);
      break;
    }
    case kGlobalVelocity: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::global_velocity(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.RobotMoveCommand)
  return target;
}

size_t RobotMoveCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.RobotMoveCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .sslsim.MoveWheelVelocity wheel_velocity = 1;
    case kWheelVelocity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.wheel_velocity_);
      break;
    }
    // .sslsim.MoveLocalVelocity local_velocity = 2;
    case kLocalVelocity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.local_velocity_);
      break;
    }
    // .sslsim.MoveGlobalVelocity global_velocity = 3;
    case kGlobalVelocity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.global_velocity_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMoveCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMoveCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMoveCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.RobotMoveCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.RobotMoveCommand)
    MergeFrom(*source);
  }
}

void RobotMoveCommand::MergeFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kWheelVelocity: {
      _internal_mutable_wheel_velocity()->::sslsim::MoveWheelVelocity::MergeFrom(from._internal_wheel_velocity());
      break;
    }
    case kLocalVelocity: {
      _internal_mutable_local_velocity()->::sslsim::MoveLocalVelocity::MergeFrom(from._internal_local_velocity());
      break;
    }
    case kGlobalVelocity: {
      _internal_mutable_global_velocity()->::sslsim::MoveGlobalVelocity::MergeFrom(from._internal_global_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void RobotMoveCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMoveCommand::CopyFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMoveCommand::IsInitialized() const {
  switch (command_case()) {
    case kWheelVelocity: {
      if (has_wheel_velocity()) {
        if (!this->wheel_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kLocalVelocity: {
      if (has_local_velocity()) {
        if (!this->local_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kGlobalVelocity: {
      if (has_global_velocity()) {
        if (!this->global_velocity().IsInitialized()) return false;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return true;
}

void RobotMoveCommand::InternalSwap(RobotMoveCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMoveCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveWheelVelocity::InitAsDefaultInstance() {
}
class MoveWheelVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveWheelVelocity>()._has_bits_);
  static void set_has_front_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_back_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_back_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_front_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MoveWheelVelocity::MoveWheelVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.MoveWheelVelocity)
}
MoveWheelVelocity::MoveWheelVelocity(const MoveWheelVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&front_right_, &from.front_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_left_) -
    reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  // @@protoc_insertion_point(copy_constructor:sslsim.MoveWheelVelocity)
}

void MoveWheelVelocity::SharedCtor() {
  ::memset(&front_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_left_) -
      reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
}

MoveWheelVelocity::~MoveWheelVelocity() {
  // @@protoc_insertion_point(destructor:sslsim.MoveWheelVelocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveWheelVelocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveWheelVelocity::ArenaDtor(void* object) {
  MoveWheelVelocity* _this = reinterpret_cast< MoveWheelVelocity* >(object);
  (void)_this;
}
void MoveWheelVelocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveWheelVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveWheelVelocity& MoveWheelVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveWheelVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void MoveWheelVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.MoveWheelVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&front_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_left_) -
        reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveWheelVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float front_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_front_right(&has_bits);
          front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float back_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_back_right(&has_bits);
          back_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float back_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_back_left(&has_bits);
          back_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float front_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_front_left(&has_bits);
          front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveWheelVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.MoveWheelVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_front_right(), target);
  }

  // required float back_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_back_right(), target);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_back_left(), target);
  }

  // required float front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_front_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.MoveWheelVelocity)
  return target;
}

size_t MoveWheelVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sslsim.MoveWheelVelocity)
  size_t total_size = 0;

  if (_internal_has_front_right()) {
    // required float front_right = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_back_right()) {
    // required float back_right = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_back_left()) {
    // required float back_left = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_front_left()) {
    // required float front_left = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveWheelVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.MoveWheelVelocity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float front_right = 1;
    total_size += 1 + 4;

    // required float back_right = 2;
    total_size += 1 + 4;

    // required float back_left = 3;
    total_size += 1 + 4;

    // required float front_left = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveWheelVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.MoveWheelVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveWheelVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveWheelVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.MoveWheelVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.MoveWheelVelocity)
    MergeFrom(*source);
  }
}

void MoveWheelVelocity::MergeFrom(const MoveWheelVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.MoveWheelVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      front_right_ = from.front_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      back_right_ = from.back_right_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_left_ = from.back_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      front_left_ = from.front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveWheelVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.MoveWheelVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveWheelVelocity::CopyFrom(const MoveWheelVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.MoveWheelVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveWheelVelocity::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MoveWheelVelocity::InternalSwap(MoveWheelVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveWheelVelocity, front_left_)
      + sizeof(MoveWheelVelocity::front_left_)
      - PROTOBUF_FIELD_OFFSET(MoveWheelVelocity, front_right_)>(
          reinterpret_cast<char*>(&front_right_),
          reinterpret_cast<char*>(&other->front_right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveWheelVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLocalVelocity::InitAsDefaultInstance() {
}
class MoveLocalVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveLocalVelocity>()._has_bits_);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

MoveLocalVelocity::MoveLocalVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.MoveLocalVelocity)
}
MoveLocalVelocity::MoveLocalVelocity(const MoveLocalVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_, &from.forward_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:sslsim.MoveLocalVelocity)
}

void MoveLocalVelocity::SharedCtor() {
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
}

MoveLocalVelocity::~MoveLocalVelocity() {
  // @@protoc_insertion_point(destructor:sslsim.MoveLocalVelocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveLocalVelocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveLocalVelocity::ArenaDtor(void* object) {
  MoveLocalVelocity* _this = reinterpret_cast< MoveLocalVelocity* >(object);
  (void)_this;
}
void MoveLocalVelocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveLocalVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLocalVelocity& MoveLocalVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLocalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void MoveLocalVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.MoveLocalVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&forward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_) -
        reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveLocalVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float forward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_forward(&has_bits);
          forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float angular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angular(&has_bits);
          angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLocalVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.MoveLocalVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float forward = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward(), target);
  }

  // required float left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.MoveLocalVelocity)
  return target;
}

size_t MoveLocalVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sslsim.MoveLocalVelocity)
  size_t total_size = 0;

  if (_internal_has_forward()) {
    // required float forward = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_left()) {
    // required float left = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_angular()) {
    // required float angular = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveLocalVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.MoveLocalVelocity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float forward = 1;
    total_size += 1 + 4;

    // required float left = 2;
    total_size += 1 + 4;

    // required float angular = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLocalVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.MoveLocalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLocalVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLocalVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.MoveLocalVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.MoveLocalVelocity)
    MergeFrom(*source);
  }
}

void MoveLocalVelocity::MergeFrom(const MoveLocalVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.MoveLocalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      forward_ = from.forward_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_ = from.angular_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveLocalVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.MoveLocalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLocalVelocity::CopyFrom(const MoveLocalVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.MoveLocalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLocalVelocity::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MoveLocalVelocity::InternalSwap(MoveLocalVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLocalVelocity, angular_)
      + sizeof(MoveLocalVelocity::angular_)
      - PROTOBUF_FIELD_OFFSET(MoveLocalVelocity, forward_)>(
          reinterpret_cast<char*>(&forward_),
          reinterpret_cast<char*>(&other->forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLocalVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveGlobalVelocity::InitAsDefaultInstance() {
}
class MoveGlobalVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveGlobalVelocity>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

MoveGlobalVelocity::MoveGlobalVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.MoveGlobalVelocity)
}
MoveGlobalVelocity::MoveGlobalVelocity(const MoveGlobalVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:sslsim.MoveGlobalVelocity)
}

void MoveGlobalVelocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angular_));
}

MoveGlobalVelocity::~MoveGlobalVelocity() {
  // @@protoc_insertion_point(destructor:sslsim.MoveGlobalVelocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveGlobalVelocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveGlobalVelocity::ArenaDtor(void* object) {
  MoveGlobalVelocity* _this = reinterpret_cast< MoveGlobalVelocity* >(object);
  (void)_this;
}
void MoveGlobalVelocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveGlobalVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveGlobalVelocity& MoveGlobalVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveGlobalVelocity_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void MoveGlobalVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.MoveGlobalVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_) -
        reinterpret_cast<char*>(&x_)) + sizeof(angular_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveGlobalVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float angular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angular(&has_bits);
          angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveGlobalVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.MoveGlobalVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.MoveGlobalVelocity)
  return target;
}

size_t MoveGlobalVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sslsim.MoveGlobalVelocity)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_angular()) {
    // required float angular = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveGlobalVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.MoveGlobalVelocity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float angular = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveGlobalVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.MoveGlobalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveGlobalVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveGlobalVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.MoveGlobalVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.MoveGlobalVelocity)
    MergeFrom(*source);
  }
}

void MoveGlobalVelocity::MergeFrom(const MoveGlobalVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.MoveGlobalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_ = from.angular_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveGlobalVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.MoveGlobalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveGlobalVelocity::CopyFrom(const MoveGlobalVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.MoveGlobalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveGlobalVelocity::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MoveGlobalVelocity::InternalSwap(MoveGlobalVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveGlobalVelocity, angular_)
      + sizeof(MoveGlobalVelocity::angular_)
      - PROTOBUF_FIELD_OFFSET(MoveGlobalVelocity, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveGlobalVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotControl::InitAsDefaultInstance() {
}
class RobotControl::_Internal {
 public:
};

RobotControl::RobotControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.RobotControl)
}
RobotControl::RobotControl(const RobotControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robot_commands_(from.robot_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sslsim.RobotControl)
}

void RobotControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
}

RobotControl::~RobotControl() {
  // @@protoc_insertion_point(destructor:sslsim.RobotControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotControl::ArenaDtor(void* object) {
  RobotControl* _this = reinterpret_cast< RobotControl* >(object);
  (void)_this;
}
void RobotControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotControl& RobotControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotControl_ssl_5fsimulation_5frobot_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void RobotControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.RobotControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sslsim.RobotCommand robot_commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.RobotControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sslsim.RobotCommand robot_commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_robot_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.RobotControl)
  return target;
}

size_t RobotControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.RobotControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sslsim.RobotCommand robot_commands = 1;
  total_size += 1UL * this->_internal_robot_commands_size();
  for (const auto& msg : this->robot_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.RobotControl)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.RobotControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.RobotControl)
    MergeFrom(*source);
  }
}

void RobotControl::MergeFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.RobotControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_commands_.MergeFrom(from.robot_commands_);
}

void RobotControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.RobotControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotControl::CopyFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.RobotControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotControl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robot_commands_)) return false;
  return true;
}

void RobotControl::InternalSwap(RobotControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_commands_.InternalSwap(&other->robot_commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sslsim
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sslsim::RobotCommand* Arena::CreateMaybeMessage< ::sslsim::RobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::RobotCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::RobotMoveCommand* Arena::CreateMaybeMessage< ::sslsim::RobotMoveCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::RobotMoveCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::MoveWheelVelocity* Arena::CreateMaybeMessage< ::sslsim::MoveWheelVelocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::MoveWheelVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::MoveLocalVelocity* Arena::CreateMaybeMessage< ::sslsim::MoveLocalVelocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::MoveLocalVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::MoveGlobalVelocity* Arena::CreateMaybeMessage< ::sslsim::MoveGlobalVelocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::MoveGlobalVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::RobotControl* Arena::CreateMaybeMessage< ::sslsim::RobotControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::RobotControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
