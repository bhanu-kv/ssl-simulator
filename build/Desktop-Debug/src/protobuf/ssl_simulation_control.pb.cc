// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_control.proto

#include "ssl_simulation_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BotId_ssl_5fgame_5fcontroller_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimulatorConfig_ssl_5fsimulation_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5ferror_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorError_ssl_5fsimulation_5ferror_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto;
namespace sslsim {
class TeleportBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleportBall> _instance;
} _TeleportBall_default_instance_;
class TeleportRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleportRobot> _instance;
} _TeleportRobot_default_instance_;
class SimulatorControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorControl> _instance;
} _SimulatorControl_default_instance_;
class SimulatorCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorCommand> _instance;
} _SimulatorCommand_default_instance_;
class SimulatorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorResponse> _instance;
} _SimulatorResponse_default_instance_;
}  // namespace sslsim
static void InitDefaultsscc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_SimulatorCommand_default_instance_;
    new (ptr) ::sslsim::SimulatorCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::SimulatorCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto}, {
      &scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto.base,
      &scc_info_SimulatorConfig_ssl_5fsimulation_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_SimulatorControl_default_instance_;
    new (ptr) ::sslsim::SimulatorControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::SimulatorControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto}, {
      &scc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto.base,
      &scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_SimulatorResponse_default_instance_;
    new (ptr) ::sslsim::SimulatorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::SimulatorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto}, {
      &scc_info_SimulatorError_ssl_5fsimulation_5ferror_2eproto.base,}};

static void InitDefaultsscc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_TeleportBall_default_instance_;
    new (ptr) ::sslsim::TeleportBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::TeleportBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sslsim::_TeleportRobot_default_instance_;
    new (ptr) ::sslsim::TeleportRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sslsim::TeleportRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto}, {
      &scc_info_BotId_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fsimulation_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fsimulation_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fsimulation_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, x_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, y_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, z_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, vx_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, vy_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, vz_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, teleport_safely_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, roll_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportBall, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, id_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, x_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, y_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, v_x_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, v_y_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, v_angular_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, present_),
  PROTOBUF_FIELD_OFFSET(::sslsim::TeleportRobot, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorControl, teleport_ball_),
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorControl, teleport_robot_),
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorControl, simulation_speed_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorCommand, control_),
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorCommand, config_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sslsim::SimulatorResponse, errors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::sslsim::TeleportBall)},
  { 23, 37, sizeof(::sslsim::TeleportRobot)},
  { 46, 54, sizeof(::sslsim::SimulatorControl)},
  { 57, 64, sizeof(::sslsim::SimulatorCommand)},
  { 66, -1, sizeof(::sslsim::SimulatorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_TeleportBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_TeleportRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_SimulatorControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_SimulatorCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sslsim::_SimulatorResponse_default_instance_),
};

const char descriptor_table_protodef_ssl_5fsimulation_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ssl_simulation_control.proto\022\006sslsim\032 "
  "ssl_game_controller_common.proto\032\033ssl_si"
  "mulation_config.proto\032\032ssl_simulation_er"
  "ror.proto\"\241\001\n\014TeleportBall\022\t\n\001x\030\001 \001(\002\022\t\n"
  "\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\n\n\002vx\030\004 \001(\002\022\n\n\002vy\030\005 "
  "\001(\002\022\n\n\002vz\030\006 \001(\002\022\036\n\017teleport_safely\030\007 \001(\010"
  ":\005false\022\023\n\004roll\030\010 \001(\010:\005false\022\027\n\010by_force"
  "\030\t \001(\010:\005false\"\275\001\n\rTeleportRobot\022!\n\002id\030\001 "
  "\002(\0132\025.gameController.BotId\022\t\n\001x\030\002 \001(\002\022\t\n"
  "\001y\030\003 \001(\002\022\023\n\013orientation\030\004 \001(\002\022\016\n\003v_x\030\005 \001"
  "(\002:\0010\022\016\n\003v_y\030\006 \001(\002:\0010\022\024\n\tv_angular\030\007 \001(\002"
  ":\0010\022\017\n\007present\030\010 \001(\010\022\027\n\010by_force\030\t \001(\010:\005"
  "false\"\210\001\n\020SimulatorControl\022+\n\rteleport_b"
  "all\030\001 \001(\0132\024.sslsim.TeleportBall\022-\n\016telep"
  "ort_robot\030\002 \003(\0132\025.sslsim.TeleportRobot\022\030"
  "\n\020simulation_speed\030\003 \001(\002\"f\n\020SimulatorCom"
  "mand\022)\n\007control\030\001 \001(\0132\030.sslsim.Simulator"
  "Control\022\'\n\006config\030\002 \001(\0132\027.sslsim.Simulat"
  "orConfig\";\n\021SimulatorResponse\022&\n\006errors\030"
  "\001 \003(\0132\026.sslsim.SimulatorErrorB8Z6github."
  "com/RoboCup-SSL/ssl-simulation-protocol/"
  "pkg/sim"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_deps[3] = {
  &::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto,
  &::descriptor_table_ssl_5fsimulation_5fconfig_2eproto,
  &::descriptor_table_ssl_5fsimulation_5ferror_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_sccs[5] = {
  &scc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto.base,
  &scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto.base,
  &scc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto.base,
  &scc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto.base,
  &scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fsimulation_5fcontrol_2eproto, "ssl_simulation_control.proto", 847,
  &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once, descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_sccs, descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_ssl_5fsimulation_5fcontrol_2eproto::offsets,
  file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto, 5, file_level_enum_descriptors_ssl_5fsimulation_5fcontrol_2eproto, file_level_service_descriptors_ssl_5fsimulation_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fsimulation_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fsimulation_5fcontrol_2eproto)), true);
namespace sslsim {

// ===================================================================

void TeleportBall::InitAsDefaultInstance() {
}
class TeleportBall::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleportBall>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_teleport_safely(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_by_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TeleportBall::TeleportBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.TeleportBall)
}
TeleportBall::TeleportBall(const TeleportBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:sslsim.TeleportBall)
}

void TeleportBall::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_force_) -
      reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
}

TeleportBall::~TeleportBall() {
  // @@protoc_insertion_point(destructor:sslsim.TeleportBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleportBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TeleportBall::ArenaDtor(void* object) {
  TeleportBall* _this = reinterpret_cast< TeleportBall* >(object);
  (void)_this;
}
void TeleportBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleportBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleportBall& TeleportBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleportBall_ssl_5fsimulation_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TeleportBall::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.TeleportBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&x_)) + sizeof(roll_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleportBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_vx(&has_bits);
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_vy(&has_bits);
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_vz(&has_bits);
          vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool teleport_safely = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_teleport_safely(&has_bits);
          teleport_safely_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool roll = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool by_force = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_by_force(&has_bits);
          by_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleportBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.TeleportBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float vx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_vx(), target);
  }

  // optional float vy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_vy(), target);
  }

  // optional float vz = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vz(), target);
  }

  // optional bool teleport_safely = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_teleport_safely(), target);
  }

  // optional bool roll = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_roll(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_by_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.TeleportBall)
  return target;
}

size_t TeleportBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.TeleportBall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float vx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float vy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vz = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool teleport_safely = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool roll = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleportBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.TeleportBall)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleportBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleportBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.TeleportBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.TeleportBall)
    MergeFrom(*source);
  }
}

void TeleportBall::MergeFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.TeleportBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000020u) {
      vz_ = from.vz_;
    }
    if (cached_has_bits & 0x00000040u) {
      teleport_safely_ = from.teleport_safely_;
    }
    if (cached_has_bits & 0x00000080u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_by_force(from._internal_by_force());
  }
}

void TeleportBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.TeleportBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportBall::CopyFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.TeleportBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportBall::IsInitialized() const {
  return true;
}

void TeleportBall::InternalSwap(TeleportBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleportBall, by_force_)
      + sizeof(TeleportBall::by_force_)
      - PROTOBUF_FIELD_OFFSET(TeleportBall, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleportBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleportRobot::InitAsDefaultInstance() {
  ::sslsim::_TeleportRobot_default_instance_._instance.get_mutable()->id_ = const_cast< ::gameController::BotId*>(
      ::gameController::BotId::internal_default_instance());
}
class TeleportRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleportRobot>()._has_bits_);
  static const ::gameController::BotId& id(const TeleportRobot* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_present(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_by_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::gameController::BotId&
TeleportRobot::_Internal::id(const TeleportRobot* msg) {
  return *msg->id_;
}
void TeleportRobot::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TeleportRobot::TeleportRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.TeleportRobot)
}
TeleportRobot::TeleportRobot(const TeleportRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::gameController::BotId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:sslsim.TeleportRobot)
}

void TeleportRobot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_force_) -
      reinterpret_cast<char*>(&id_)) + sizeof(by_force_));
}

TeleportRobot::~TeleportRobot() {
  // @@protoc_insertion_point(destructor:sslsim.TeleportRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleportRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void TeleportRobot::ArenaDtor(void* object) {
  TeleportRobot* _this = reinterpret_cast< TeleportRobot* >(object);
  (void)_this;
}
void TeleportRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleportRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleportRobot& TeleportRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleportRobot_ssl_5fsimulation_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TeleportRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.TeleportRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&present_) -
        reinterpret_cast<char*>(&x_)) + sizeof(present_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleportRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gameController.BotId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_angular = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_v_angular(&has_bits);
          v_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool present = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_present(&has_bits);
          present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool by_force = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_by_force(&has_bits);
          by_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleportRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.TeleportRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gameController.BotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional float orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_orientation(), target);
  }

  // optional float v_x = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_x(), target);
  }

  // optional float v_y = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_y(), target);
  }

  // optional float v_angular = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_angular(), target);
  }

  // optional bool present = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_present(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_by_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.TeleportRobot)
  return target;
}

size_t TeleportRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.TeleportRobot)
  size_t total_size = 0;

  // required .gameController.BotId id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float v_x = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float v_angular = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool present = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleportRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.TeleportRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleportRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleportRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.TeleportRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.TeleportRobot)
    MergeFrom(*source);
  }
}

void TeleportRobot::MergeFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.TeleportRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::gameController::BotId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_angular_ = from.v_angular_;
    }
    if (cached_has_bits & 0x00000080u) {
      present_ = from.present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_by_force(from._internal_by_force());
  }
}

void TeleportRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.TeleportRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportRobot::CopyFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.TeleportRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TeleportRobot::InternalSwap(TeleportRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleportRobot, by_force_)
      + sizeof(TeleportRobot::by_force_)
      - PROTOBUF_FIELD_OFFSET(TeleportRobot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleportRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorControl::InitAsDefaultInstance() {
  ::sslsim::_SimulatorControl_default_instance_._instance.get_mutable()->teleport_ball_ = const_cast< ::sslsim::TeleportBall*>(
      ::sslsim::TeleportBall::internal_default_instance());
}
class SimulatorControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorControl>()._has_bits_);
  static const ::sslsim::TeleportBall& teleport_ball(const SimulatorControl* msg);
  static void set_has_teleport_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_simulation_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sslsim::TeleportBall&
SimulatorControl::_Internal::teleport_ball(const SimulatorControl* msg) {
  return *msg->teleport_ball_;
}
SimulatorControl::SimulatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teleport_robot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.SimulatorControl)
}
SimulatorControl::SimulatorControl(const SimulatorControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teleport_robot_(from.teleport_robot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teleport_ball()) {
    teleport_ball_ = new ::sslsim::TeleportBall(*from.teleport_ball_);
  } else {
    teleport_ball_ = nullptr;
  }
  simulation_speed_ = from.simulation_speed_;
  // @@protoc_insertion_point(copy_constructor:sslsim.SimulatorControl)
}

void SimulatorControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto.base);
  ::memset(&teleport_ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulation_speed_) -
      reinterpret_cast<char*>(&teleport_ball_)) + sizeof(simulation_speed_));
}

SimulatorControl::~SimulatorControl() {
  // @@protoc_insertion_point(destructor:sslsim.SimulatorControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete teleport_ball_;
}

void SimulatorControl::ArenaDtor(void* object) {
  SimulatorControl* _this = reinterpret_cast< SimulatorControl* >(object);
  (void)_this;
}
void SimulatorControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorControl& SimulatorControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void SimulatorControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.SimulatorControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teleport_robot_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(teleport_ball_ != nullptr);
    teleport_ball_->Clear();
  }
  simulation_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sslsim.TeleportBall teleport_ball = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleport_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sslsim.TeleportRobot teleport_robot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teleport_robot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float simulation_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_simulation_speed(&has_bits);
          simulation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.SimulatorControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sslsim.TeleportBall teleport_ball = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::teleport_ball(this), target, stream);
  }

  // repeated .sslsim.TeleportRobot teleport_robot = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teleport_robot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teleport_robot(i), target, stream);
  }

  // optional float simulation_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_simulation_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.SimulatorControl)
  return target;
}

size_t SimulatorControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.SimulatorControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sslsim.TeleportRobot teleport_robot = 2;
  total_size += 1UL * this->_internal_teleport_robot_size();
  for (const auto& msg : this->teleport_robot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sslsim.TeleportBall teleport_ball = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teleport_ball_);
    }

    // optional float simulation_speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.SimulatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.SimulatorControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.SimulatorControl)
    MergeFrom(*source);
  }
}

void SimulatorControl::MergeFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.SimulatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teleport_robot_.MergeFrom(from.teleport_robot_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teleport_ball()->::sslsim::TeleportBall::MergeFrom(from._internal_teleport_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      simulation_speed_ = from.simulation_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.SimulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorControl::CopyFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.SimulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorControl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(teleport_robot_)) return false;
  return true;
}

void SimulatorControl::InternalSwap(SimulatorControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teleport_robot_.InternalSwap(&other->teleport_robot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorControl, simulation_speed_)
      + sizeof(SimulatorControl::simulation_speed_)
      - PROTOBUF_FIELD_OFFSET(SimulatorControl, teleport_ball_)>(
          reinterpret_cast<char*>(&teleport_ball_),
          reinterpret_cast<char*>(&other->teleport_ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorCommand::InitAsDefaultInstance() {
  ::sslsim::_SimulatorCommand_default_instance_._instance.get_mutable()->control_ = const_cast< ::sslsim::SimulatorControl*>(
      ::sslsim::SimulatorControl::internal_default_instance());
  ::sslsim::_SimulatorCommand_default_instance_._instance.get_mutable()->config_ = const_cast< ::sslsim::SimulatorConfig*>(
      ::sslsim::SimulatorConfig::internal_default_instance());
}
class SimulatorCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorCommand>()._has_bits_);
  static const ::sslsim::SimulatorControl& control(const SimulatorCommand* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sslsim::SimulatorConfig& config(const SimulatorCommand* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sslsim::SimulatorControl&
SimulatorCommand::_Internal::control(const SimulatorCommand* msg) {
  return *msg->control_;
}
const ::sslsim::SimulatorConfig&
SimulatorCommand::_Internal::config(const SimulatorCommand* msg) {
  return *msg->config_;
}
void SimulatorCommand::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SimulatorCommand::SimulatorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.SimulatorCommand)
}
SimulatorCommand::SimulatorCommand(const SimulatorCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control()) {
    control_ = new ::sslsim::SimulatorControl(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::sslsim::SimulatorConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sslsim.SimulatorCommand)
}

void SimulatorCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto.base);
  ::memset(&control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&control_)) + sizeof(config_));
}

SimulatorCommand::~SimulatorCommand() {
  // @@protoc_insertion_point(destructor:sslsim.SimulatorCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete config_;
}

void SimulatorCommand::ArenaDtor(void* object) {
  SimulatorCommand* _this = reinterpret_cast< SimulatorCommand* >(object);
  (void)_this;
}
void SimulatorCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorCommand& SimulatorCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorCommand_ssl_5fsimulation_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void SimulatorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.SimulatorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_ != nullptr);
      control_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sslsim.SimulatorControl control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sslsim.SimulatorConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.SimulatorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sslsim.SimulatorControl control = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control(this), target, stream);
  }

  // optional .sslsim.SimulatorConfig config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.SimulatorCommand)
  return target;
}

size_t SimulatorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.SimulatorCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sslsim.SimulatorControl control = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_);
    }

    // optional .sslsim.SimulatorConfig config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.SimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.SimulatorCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.SimulatorCommand)
    MergeFrom(*source);
  }
}

void SimulatorCommand::MergeFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.SimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_control()->::sslsim::SimulatorControl::MergeFrom(from._internal_control());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_config()->::sslsim::SimulatorConfig::MergeFrom(from._internal_config());
    }
  }
}

void SimulatorCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.SimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorCommand::CopyFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.SimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorCommand::IsInitialized() const {
  if (_internal_has_control()) {
    if (!control_->IsInitialized()) return false;
  }
  if (_internal_has_config()) {
    if (!config_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorCommand::InternalSwap(SimulatorCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorCommand, config_)
      + sizeof(SimulatorCommand::config_)
      - PROTOBUF_FIELD_OFFSET(SimulatorCommand, control_)>(
          reinterpret_cast<char*>(&control_),
          reinterpret_cast<char*>(&other->control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorResponse::InitAsDefaultInstance() {
}
class SimulatorResponse::_Internal {
 public:
};

void SimulatorResponse::clear_errors() {
  errors_.Clear();
}
SimulatorResponse::SimulatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sslsim.SimulatorResponse)
}
SimulatorResponse::SimulatorResponse(const SimulatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sslsim.SimulatorResponse)
}

void SimulatorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto.base);
}

SimulatorResponse::~SimulatorResponse() {
  // @@protoc_insertion_point(destructor:sslsim.SimulatorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulatorResponse::ArenaDtor(void* object) {
  SimulatorResponse* _this = reinterpret_cast< SimulatorResponse* >(object);
  (void)_this;
}
void SimulatorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorResponse& SimulatorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorResponse_ssl_5fsimulation_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void SimulatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sslsim.SimulatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sslsim.SimulatorError errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sslsim.SimulatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sslsim.SimulatorError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslsim.SimulatorResponse)
  return target;
}

size_t SimulatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslsim.SimulatorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sslsim.SimulatorError errors = 1;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslsim.SimulatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslsim.SimulatorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslsim.SimulatorResponse)
    MergeFrom(*source);
  }
}

void SimulatorResponse::MergeFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslsim.SimulatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void SimulatorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslsim.SimulatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorResponse::CopyFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslsim.SimulatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorResponse::IsInitialized() const {
  return true;
}

void SimulatorResponse::InternalSwap(SimulatorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errors_.InternalSwap(&other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sslsim
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sslsim::TeleportBall* Arena::CreateMaybeMessage< ::sslsim::TeleportBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::TeleportBall >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::TeleportRobot* Arena::CreateMaybeMessage< ::sslsim::TeleportRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::TeleportRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::SimulatorControl* Arena::CreateMaybeMessage< ::sslsim::SimulatorControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::SimulatorControl >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::SimulatorCommand* Arena::CreateMaybeMessage< ::sslsim::SimulatorCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::SimulatorCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sslsim::SimulatorResponse* Arena::CreateMaybeMessage< ::sslsim::SimulatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sslsim::SimulatorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
