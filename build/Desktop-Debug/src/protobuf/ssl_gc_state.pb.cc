// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_state.proto

#include "ssl_gc_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Foul_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<40> scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Proposal_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedCard_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_YellowCard_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class YellowCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YellowCard> _instance;
} _YellowCard_default_instance_;
class RedCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedCard> _instance;
} _RedCard_default_instance_;
class FoulDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Foul> _instance;
} _Foul_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class ProposalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposalGroup> _instance;
} _ProposalGroup_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamInfo> _instance;
} _TeamInfo_default_instance_;
class State_TeamStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State_TeamStateEntry_DoNotUse> _instance;
} _State_TeamStateEntry_DoNotUse_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class ShootoutState_NumberOfAttemptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShootoutState_NumberOfAttemptsEntry_DoNotUse> _instance;
} _ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_;
class ShootoutStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShootoutState> _instance;
} _ShootoutState_default_instance_;
static void InitDefaultsscc_info_Command_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Command_default_instance_;
    new (ptr) ::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Command_ssl_5fgc_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_Foul_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Foul_default_instance_;
    new (ptr) ::Foul();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Foul::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Foul_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Foul_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GameState_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameState_default_instance_;
    new (ptr) ::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameState_ssl_5fgc_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_Proposal_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proposal_default_instance_;
    new (ptr) ::Proposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proposal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Proposal_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Proposal_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProposalGroup_default_instance_;
    new (ptr) ::ProposalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProposalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_Proposal_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_RedCard_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RedCard_default_instance_;
    new (ptr) ::RedCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RedCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedCard_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RedCard_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_ShootoutState_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShootoutState_default_instance_;
    new (ptr) ::ShootoutState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShootoutState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShootoutState_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_;
    new (ptr) ::ShootoutState_NumberOfAttemptsEntry_DoNotUse();
  }
  ::ShootoutState_NumberOfAttemptsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_State_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_State_default_instance_;
    new (ptr) ::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_State_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_State_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_Command_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_GameState_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_State_TeamStateEntry_DoNotUse_default_instance_;
    new (ptr) ::State_TeamStateEntry_DoNotUse();
  }
  ::State_TeamStateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_TeamInfo_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamInfo_default_instance_;
    new (ptr) ::TeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TeamInfo_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_YellowCard_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_RedCard_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Foul_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_YellowCard_ssl_5fgc_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_YellowCard_default_instance_;
    new (ptr) ::YellowCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YellowCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_YellowCard_ssl_5fgc_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_YellowCard_ssl_5fgc_5fstate_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fstate_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fstate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::YellowCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::YellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YellowCard, id_),
  PROTOBUF_FIELD_OFFSET(::YellowCard, caused_by_game_event_),
  PROTOBUF_FIELD_OFFSET(::YellowCard, time_remaining_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RedCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedCard, id_),
  PROTOBUF_FIELD_OFFSET(::RedCard, caused_by_game_event_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Foul, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Foul, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Foul, id_),
  PROTOBUF_FIELD_OFFSET(::Foul, caused_by_game_event_),
  PROTOBUF_FIELD_OFFSET(::Foul, timestamp_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Command, type_),
  PROTOBUF_FIELD_OFFSET(::Command, for_team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameState, type_),
  PROTOBUF_FIELD_OFFSET(::GameState, for_team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proposal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Proposal, game_event_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProposalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProposalGroup, id_),
  PROTOBUF_FIELD_OFFSET(::ProposalGroup, proposals_),
  PROTOBUF_FIELD_OFFSET(::ProposalGroup, accepted_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeamInfo, name_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, goals_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, goalkeeper_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, yellow_cards_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, red_cards_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, timeouts_left_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, timeout_time_left_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, on_positive_half_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, fouls_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, ball_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, ball_placement_failures_reached_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, can_place_ball_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, max_allowed_bots_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, requests_bot_substitution_since_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, requests_timeout_since_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, requests_emergency_stop_since_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, challenge_flags_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, bot_substitution_allowed_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, bot_substitutions_left_),
  PROTOBUF_FIELD_OFFSET(::TeamInfo, bot_substitution_time_left_),
  0,
  6,
  7,
  ~0u,
  ~0u,
  8,
  1,
  10,
  ~0u,
  9,
  11,
  12,
  14,
  2,
  3,
  4,
  15,
  13,
  16,
  5,
  PROTOBUF_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::State, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::State, stage_),
  PROTOBUF_FIELD_OFFSET(::State, command_),
  PROTOBUF_FIELD_OFFSET(::State, game_state_),
  PROTOBUF_FIELD_OFFSET(::State, stage_time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::State, stage_time_left_),
  PROTOBUF_FIELD_OFFSET(::State, match_time_start_),
  PROTOBUF_FIELD_OFFSET(::State, team_state_),
  PROTOBUF_FIELD_OFFSET(::State, placement_pos_),
  PROTOBUF_FIELD_OFFSET(::State, next_command_),
  PROTOBUF_FIELD_OFFSET(::State, current_action_time_remaining_),
  PROTOBUF_FIELD_OFFSET(::State, game_events_),
  PROTOBUF_FIELD_OFFSET(::State, proposal_groups_),
  PROTOBUF_FIELD_OFFSET(::State, division_),
  PROTOBUF_FIELD_OFFSET(::State, first_kickoff_team_),
  PROTOBUF_FIELD_OFFSET(::State, match_type_),
  PROTOBUF_FIELD_OFFSET(::State, ready_continue_time_),
  PROTOBUF_FIELD_OFFSET(::State, shootout_state_),
  PROTOBUF_FIELD_OFFSET(::State, status_message_),
  PROTOBUF_FIELD_OFFSET(::State, max_bots_per_team_),
  11,
  1,
  8,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  ~0u,
  ~0u,
  12,
  13,
  14,
  9,
  10,
  0,
  15,
  PROTOBUF_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ShootoutState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShootoutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShootoutState, next_team_),
  PROTOBUF_FIELD_OFFSET(::ShootoutState, number_of_attempts_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::YellowCard)},
  { 11, 18, sizeof(::RedCard)},
  { 20, 28, sizeof(::Foul)},
  { 31, 38, sizeof(::Command)},
  { 40, 47, sizeof(::GameState)},
  { 49, 56, sizeof(::Proposal)},
  { 58, 66, sizeof(::ProposalGroup)},
  { 69, 94, sizeof(::TeamInfo)},
  { 114, 121, sizeof(::State_TeamStateEntry_DoNotUse)},
  { 123, 147, sizeof(::State)},
  { 166, 173, sizeof(::ShootoutState_NumberOfAttemptsEntry_DoNotUse)},
  { 175, 182, sizeof(::ShootoutState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_YellowCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RedCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Foul_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProposalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_State_TeamStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShootoutState_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ssl_gc_state.proto\032\023ssl_gc_common.prot"
  "o\032\025ssl_gc_geometry.proto\032\027ssl_gc_game_ev"
  "ent.proto\032\034ssl_gc_referee_message.proto\032"
  "\036google/protobuf/duration.proto\032\037google/"
  "protobuf/timestamp.proto\"u\n\nYellowCard\022\n"
  "\n\002id\030\001 \001(\r\022(\n\024caused_by_game_event\030\002 \001(\013"
  "2\n.GameEvent\0221\n\016time_remaining\030\003 \001(\0132\031.g"
  "oogle.protobuf.Duration\"\?\n\007RedCard\022\n\n\002id"
  "\030\001 \001(\r\022(\n\024caused_by_game_event\030\002 \001(\0132\n.G"
  "ameEvent\"k\n\004Foul\022\n\n\002id\030\001 \001(\r\022(\n\024caused_b"
  "y_game_event\030\002 \001(\0132\n.GameEvent\022-\n\ttimest"
  "amp\030\003 \001(\0132\032.google.protobuf.Timestamp\"\331\001"
  "\n\007Command\022\033\n\004type\030\001 \002(\0162\r.Command.Type\022\027"
  "\n\010for_team\030\002 \002(\0162\005.Team\"\227\001\n\004Type\022\013\n\007UNKN"
  "OWN\020\000\022\010\n\004HALT\020\001\022\010\n\004STOP\020\002\022\020\n\014NORMAL_STAR"
  "T\020\003\022\017\n\013FORCE_START\020\004\022\n\n\006DIRECT\020\005\022\013\n\007KICK"
  "OFF\020\007\022\013\n\007PENALTY\020\010\022\013\n\007TIMEOUT\020\t\022\022\n\016BALL_"
  "PLACEMENT\020\n\"\004\010\006\020\006\"\303\001\n\tGameState\022\035\n\004type\030"
  "\001 \002(\0162\017.GameState.Type\022\027\n\010for_team\030\002 \001(\016"
  "2\005.Team\"~\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004HALT\020\001\022\010"
  "\n\004STOP\020\002\022\013\n\007RUNNING\020\003\022\r\n\tFREE_KICK\020\004\022\013\n\007"
  "KICKOFF\020\005\022\013\n\007PENALTY\020\006\022\013\n\007TIMEOUT\020\007\022\022\n\016B"
  "ALL_PLACEMENT\020\010\"Y\n\010Proposal\022-\n\ttimestamp"
  "\030\001 \001(\0132\032.google.protobuf.Timestamp\022\036\n\nga"
  "me_event\030\002 \001(\0132\n.GameEvent\"Q\n\rProposalGr"
  "oup\022\n\n\002id\030\004 \001(\t\022\034\n\tproposals\030\001 \003(\0132\t.Pro"
  "posal\022\020\n\010accepted\030\002 \001(\010J\004\010\003\020\004\"\322\005\n\010TeamIn"
  "fo\022\014\n\004name\030\001 \001(\t\022\r\n\005goals\030\002 \001(\005\022\022\n\ngoalk"
  "eeper\030\003 \001(\005\022!\n\014yellow_cards\030\004 \003(\0132\013.Yell"
  "owCard\022\033\n\tred_cards\030\005 \003(\0132\010.RedCard\022\025\n\rt"
  "imeouts_left\030\006 \001(\005\0224\n\021timeout_time_left\030"
  "\007 \001(\0132\031.google.protobuf.Duration\022\030\n\020on_p"
  "ositive_half\030\010 \001(\010\022\024\n\005fouls\030\t \003(\0132\005.Foul"
  "\022\037\n\027ball_placement_failures\030\n \001(\005\022\'\n\037bal"
  "l_placement_failures_reached\030\013 \001(\010\022\026\n\016ca"
  "n_place_ball\030\014 \001(\010\022\030\n\020max_allowed_bots\030\r"
  " \001(\005\022C\n\037requests_bot_substitution_since\030"
  "\016 \001(\0132\032.google.protobuf.Timestamp\022:\n\026req"
  "uests_timeout_since\030\017 \001(\0132\032.google.proto"
  "buf.Timestamp\022A\n\035requests_emergency_stop"
  "_since\030\020 \001(\0132\032.google.protobuf.Timestamp"
  "\022\027\n\017challenge_flags\030\021 \001(\005\022 \n\030bot_substit"
  "ution_allowed\030\022 \001(\010\022\036\n\026bot_substitutions"
  "_left\030\023 \001(\005\022=\n\032bot_substitution_time_lef"
  "t\030\024 \001(\0132\031.google.protobuf.Duration\"\261\006\n\005S"
  "tate\022\035\n\005stage\030\001 \001(\0162\016.Referee.Stage\022\031\n\007c"
  "ommand\030\002 \001(\0132\010.Command\022\036\n\ngame_state\030\023 \001"
  "(\0132\n.GameState\0225\n\022stage_time_elapsed\030\004 \001"
  "(\0132\031.google.protobuf.Duration\0222\n\017stage_t"
  "ime_left\030\005 \001(\0132\031.google.protobuf.Duratio"
  "n\0224\n\020match_time_start\030\006 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022)\n\nteam_state\030\010 \003(\0132\025.St"
  "ate.TeamStateEntry\022\037\n\rplacement_pos\030\t \001("
  "\0132\010.Vector2\022\036\n\014next_command\030\n \001(\0132\010.Comm"
  "and\022@\n\035current_action_time_remaining\030\014 \001"
  "(\0132\031.google.protobuf.Duration\022\037\n\013game_ev"
  "ents\030\r \003(\0132\n.GameEvent\022\'\n\017proposal_group"
  "s\030\016 \003(\0132\016.ProposalGroup\022\033\n\010division\030\017 \001("
  "\0162\t.Division\022!\n\022first_kickoff_team\030\021 \001(\016"
  "2\005.Team\022\036\n\nmatch_type\030\022 \001(\0162\n.MatchType\022"
  "7\n\023ready_continue_time\030\024 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022&\n\016shootout_state\030\025 \001(\013"
  "2\016.ShootoutState\022\026\n\016status_message\030\026 \001(\t"
  "\022\031\n\021max_bots_per_team\030\027 \001(\005\032;\n\016TeamState"
  "Entry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.Team"
  "Info:\0028\001J\004\010\020\020\021\"\244\001\n\rShootoutState\022\030\n\tnext"
  "_team\030\001 \001(\0162\005.Team\022@\n\022number_of_attempts"
  "\030\002 \003(\0132$.ShootoutState.NumberOfAttemptsE"
  "ntry\0327\n\025NumberOfAttemptsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\005:\0028\001B\?Z=github.com/Robo"
  "Cup-SSL/ssl-game-controller/internal/app"
  "/state"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fstate_2eproto_deps[6] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
  &::descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fstate_2eproto_sccs[12] = {
  &scc_info_Command_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_Foul_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_GameState_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_Proposal_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_RedCard_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_State_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_State_TeamStateEntry_DoNotUse_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto.base,
  &scc_info_YellowCard_ssl_5fgc_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fstate_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fstate_2eproto, "ssl_gc_state.proto", 2846,
  &descriptor_table_ssl_5fgc_5fstate_2eproto_once, descriptor_table_ssl_5fgc_5fstate_2eproto_sccs, descriptor_table_ssl_5fgc_5fstate_2eproto_deps, 12, 6,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fstate_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fstate_2eproto, 12, file_level_enum_descriptors_ssl_5fgc_5fstate_2eproto, file_level_service_descriptors_ssl_5fgc_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fstate_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fstate_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fstate_2eproto[0];
}
bool Command_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Command_Type Command::UNKNOWN;
constexpr Command_Type Command::HALT;
constexpr Command_Type Command::STOP;
constexpr Command_Type Command::NORMAL_START;
constexpr Command_Type Command::FORCE_START;
constexpr Command_Type Command::DIRECT;
constexpr Command_Type Command::KICKOFF;
constexpr Command_Type Command::PENALTY;
constexpr Command_Type Command::TIMEOUT;
constexpr Command_Type Command::BALL_PLACEMENT;
constexpr Command_Type Command::Type_MIN;
constexpr Command_Type Command::Type_MAX;
constexpr int Command::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fstate_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fstate_2eproto[1];
}
bool GameState_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameState_Type GameState::UNKNOWN;
constexpr GameState_Type GameState::HALT;
constexpr GameState_Type GameState::STOP;
constexpr GameState_Type GameState::RUNNING;
constexpr GameState_Type GameState::FREE_KICK;
constexpr GameState_Type GameState::KICKOFF;
constexpr GameState_Type GameState::PENALTY;
constexpr GameState_Type GameState::TIMEOUT;
constexpr GameState_Type GameState::BALL_PLACEMENT;
constexpr GameState_Type GameState::Type_MIN;
constexpr GameState_Type GameState::Type_MAX;
constexpr int GameState::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void YellowCard::InitAsDefaultInstance() {
  ::_YellowCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
  ::_YellowCard_default_instance_._instance.get_mutable()->time_remaining_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class YellowCard::_Internal {
 public:
  using HasBits = decltype(std::declval<YellowCard>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameEvent& caused_by_game_event(const YellowCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& time_remaining(const YellowCard* msg);
  static void set_has_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::GameEvent&
YellowCard::_Internal::caused_by_game_event(const YellowCard* msg) {
  return *msg->caused_by_game_event_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
YellowCard::_Internal::time_remaining(const YellowCard* msg) {
  return *msg->time_remaining_;
}
void YellowCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != nullptr) caused_by_game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void YellowCard::clear_time_remaining() {
  if (time_remaining_ != nullptr) time_remaining_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
YellowCard::YellowCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YellowCard)
}
YellowCard::YellowCard(const YellowCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = nullptr;
  }
  if (from._internal_has_time_remaining()) {
    time_remaining_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_remaining_);
  } else {
    time_remaining_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:YellowCard)
}

void YellowCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YellowCard_ssl_5fgc_5fstate_2eproto.base);
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

YellowCard::~YellowCard() {
  // @@protoc_insertion_point(destructor:YellowCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void YellowCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caused_by_game_event_;
  if (this != internal_default_instance()) delete time_remaining_;
}

void YellowCard::ArenaDtor(void* object) {
  YellowCard* _this = reinterpret_cast< YellowCard* >(object);
  (void)_this;
}
void YellowCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YellowCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YellowCard& YellowCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YellowCard_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void YellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:YellowCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caused_by_game_event_ != nullptr);
      caused_by_game_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_remaining_ != nullptr);
      time_remaining_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YellowCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration time_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_remaining(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YellowCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YellowCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caused_by_game_event(this), target, stream);
  }

  // optional .google.protobuf.Duration time_remaining = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_remaining(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YellowCard)
  return target;
}

size_t YellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YellowCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .google.protobuf.Duration time_remaining = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_remaining_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YellowCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  const YellowCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YellowCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YellowCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YellowCard)
    MergeFrom(*source);
  }
}

void YellowCard::MergeFrom(const YellowCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_time_remaining()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_remaining());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YellowCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YellowCard::CopyFrom(const YellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void YellowCard::InternalSwap(YellowCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YellowCard, id_)
      + sizeof(YellowCard::id_)
      - PROTOBUF_FIELD_OFFSET(YellowCard, caused_by_game_event_)>(
          reinterpret_cast<char*>(&caused_by_game_event_),
          reinterpret_cast<char*>(&other->caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata YellowCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedCard::InitAsDefaultInstance() {
  ::_RedCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class RedCard::_Internal {
 public:
  using HasBits = decltype(std::declval<RedCard>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent& caused_by_game_event(const RedCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
RedCard::_Internal::caused_by_game_event(const RedCard* msg) {
  return *msg->caused_by_game_event_;
}
void RedCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != nullptr) caused_by_game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RedCard::RedCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedCard)
}
RedCard::RedCard(const RedCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RedCard)
}

void RedCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedCard_ssl_5fgc_5fstate_2eproto.base);
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

RedCard::~RedCard() {
  // @@protoc_insertion_point(destructor:RedCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void RedCard::ArenaDtor(void* object) {
  RedCard* _this = reinterpret_cast< RedCard* >(object);
  (void)_this;
}
void RedCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedCard& RedCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedCard_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:RedCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != nullptr);
    caused_by_game_event_->Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caused_by_game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedCard)
  return target;
}

size_t RedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedCard)
  GOOGLE_DCHECK_NE(&from, this);
  const RedCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedCard)
    MergeFrom(*source);
  }
}

void RedCard::MergeFrom(const RedCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedCard::CopyFrom(const RedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void RedCard::InternalSwap(RedCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedCard, id_)
      + sizeof(RedCard::id_)
      - PROTOBUF_FIELD_OFFSET(RedCard, caused_by_game_event_)>(
          reinterpret_cast<char*>(&caused_by_game_event_),
          reinterpret_cast<char*>(&other->caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Foul::InitAsDefaultInstance() {
  ::_Foul_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
  ::_Foul_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Foul::_Internal {
 public:
  using HasBits = decltype(std::declval<Foul>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameEvent& caused_by_game_event(const Foul* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Foul* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::GameEvent&
Foul::_Internal::caused_by_game_event(const Foul* msg) {
  return *msg->caused_by_game_event_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Foul::_Internal::timestamp(const Foul* msg) {
  return *msg->timestamp_;
}
void Foul::clear_caused_by_game_event() {
  if (caused_by_game_event_ != nullptr) caused_by_game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Foul::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Foul::Foul(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Foul)
}
Foul::Foul(const Foul& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Foul)
}

void Foul::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Foul_ssl_5fgc_5fstate_2eproto.base);
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

Foul::~Foul() {
  // @@protoc_insertion_point(destructor:Foul)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Foul::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caused_by_game_event_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Foul::ArenaDtor(void* object) {
  Foul* _this = reinterpret_cast< Foul* >(object);
  (void)_this;
}
void Foul::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Foul::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Foul& Foul::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Foul_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Foul::Clear() {
// @@protoc_insertion_point(message_clear_start:Foul)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caused_by_game_event_ != nullptr);
      caused_by_game_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Foul::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Foul::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Foul)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caused_by_game_event(this), target, stream);
  }

  // optional .google.protobuf.Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Foul)
  return target;
}

size_t Foul::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Foul)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .google.protobuf.Timestamp timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Foul::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Foul)
  GOOGLE_DCHECK_NE(&from, this);
  const Foul* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Foul>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Foul)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Foul)
    MergeFrom(*source);
  }
}

void Foul::MergeFrom(const Foul& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Foul)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Foul::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Foul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Foul::CopyFrom(const Foul& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Foul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Foul::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Foul::InternalSwap(Foul* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Foul, id_)
      + sizeof(Foul::id_)
      - PROTOBUF_FIELD_OFFSET(Foul, caused_by_game_event_)>(
          reinterpret_cast<char*>(&caused_by_game_event_),
          reinterpret_cast<char*>(&other->caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Foul::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
}
class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  // @@protoc_insertion_point(copy_constructor:Command)
}

void Command::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Command.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Command_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Command_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .Team for_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Command.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_for_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Command)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .Command.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_for_team()) {
    // required .Team for_team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Command.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .Team for_team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, for_team_)
      + sizeof(Command::for_team_)
      - PROTOBUF_FIELD_OFFSET(Command, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
class GameState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  // @@protoc_insertion_point(copy_constructor:GameState)
}

void GameState::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .GameState.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameState_Type_IsValid(val))) {
            _internal_set_type(static_cast<::GameState_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Team for_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameState.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_for_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState)
  size_t total_size = 0;

  // required .GameState.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Team for_team = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, for_team_)
      + sizeof(GameState::for_team_)
      - PROTOBUF_FIELD_OFFSET(GameState, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
  ::_Proposal_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_Proposal_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class Proposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Proposal>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Proposal* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEvent& game_event(const Proposal* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::timestamp(const Proposal* msg) {
  return *msg->timestamp_;
}
const ::GameEvent&
Proposal::_Internal::game_event(const Proposal* msg) {
  return *msg->game_event_;
}
void Proposal::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Proposal::clear_game_event() {
  if (game_event_ != nullptr) game_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proposal)
}

void Proposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proposal_ssl_5fgc_5fstate_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_event_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(game_event_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:Proposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete game_event_;
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
}
void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proposal_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != nullptr);
      game_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .GameEvent game_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_event()->::GameEvent::MergeFrom(from._internal_game_event());
    }
  }
}

void Proposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  if (_internal_has_game_event()) {
    if (!game_event_->IsInitialized()) return false;
  }
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, game_event_)
      + sizeof(Proposal::game_event_)
      - PROTOBUF_FIELD_OFFSET(Proposal, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposalGroup::InitAsDefaultInstance() {
}
class ProposalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposalGroup>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProposalGroup::ProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProposalGroup)
}
ProposalGroup::ProposalGroup(const ProposalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  accepted_ = from.accepted_;
  // @@protoc_insertion_point(copy_constructor:ProposalGroup)
}

void ProposalGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accepted_ = false;
}

ProposalGroup::~ProposalGroup() {
  // @@protoc_insertion_point(destructor:ProposalGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProposalGroup::ArenaDtor(void* object) {
  ProposalGroup* _this = reinterpret_cast< ProposalGroup* >(object);
  (void)_this;
}
void ProposalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalGroup& ProposalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposalGroup_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  accepted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proposal proposals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool accepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accepted(&has_bits);
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProposalGroup.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proposal proposals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_proposals(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accepted(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProposalGroup.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProposalGroup)
  return target;
}

size_t ProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProposalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proposal proposals = 1;
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional bool accepted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProposalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProposalGroup)
    MergeFrom(*source);
  }
}

void ProposalGroup::MergeFrom(const ProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      accepted_ = from.accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProposalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalGroup::CopyFrom(const ProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(proposals_)) return false;
  return true;
}

void ProposalGroup::InternalSwap(ProposalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proposals_.InternalSwap(&other->proposals_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accepted_, other->accepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
  ::_TeamInfo_default_instance_._instance.get_mutable()->timeout_time_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_bot_substitution_since_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_timeout_since_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_emergency_stop_since_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->bot_substitution_time_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_goalkeeper(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timeouts_left(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout_time_left(const TeamInfo* msg);
  static void set_has_timeout_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_on_positive_half(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ball_placement_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ball_placement_failures_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_place_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_allowed_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& requests_bot_substitution_since(const TeamInfo* msg);
  static void set_has_requests_bot_substitution_since(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& requests_timeout_since(const TeamInfo* msg);
  static void set_has_requests_timeout_since(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& requests_emergency_stop_since(const TeamInfo* msg);
  static void set_has_requests_emergency_stop_since(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bot_substitution_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bot_substitutions_left(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& bot_substitution_time_left(const TeamInfo* msg);
  static void set_has_bot_substitution_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const PROTOBUF_NAMESPACE_ID::Duration&
TeamInfo::_Internal::timeout_time_left(const TeamInfo* msg) {
  return *msg->timeout_time_left_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TeamInfo::_Internal::requests_bot_substitution_since(const TeamInfo* msg) {
  return *msg->requests_bot_substitution_since_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TeamInfo::_Internal::requests_timeout_since(const TeamInfo* msg) {
  return *msg->requests_timeout_since_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TeamInfo::_Internal::requests_emergency_stop_since(const TeamInfo* msg) {
  return *msg->requests_emergency_stop_since_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TeamInfo::_Internal::bot_substitution_time_left(const TeamInfo* msg) {
  return *msg->bot_substitution_time_left_;
}
void TeamInfo::clear_timeout_time_left() {
  if (timeout_time_left_ != nullptr) timeout_time_left_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TeamInfo::clear_requests_bot_substitution_since() {
  if (requests_bot_substitution_since_ != nullptr) requests_bot_substitution_since_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TeamInfo::clear_requests_timeout_since() {
  if (requests_timeout_since_ != nullptr) requests_timeout_since_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TeamInfo::clear_requests_emergency_stop_since() {
  if (requests_emergency_stop_since_ != nullptr) requests_emergency_stop_since_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TeamInfo::clear_bot_substitution_time_left() {
  if (bot_substitution_time_left_ != nullptr) bot_substitution_time_left_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
TeamInfo::TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  yellow_cards_(arena),
  red_cards_(arena),
  fouls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      yellow_cards_(from.yellow_cards_),
      red_cards_(from.red_cards_),
      fouls_(from.fouls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_timeout_time_left()) {
    timeout_time_left_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_time_left_);
  } else {
    timeout_time_left_ = nullptr;
  }
  if (from._internal_has_requests_bot_substitution_since()) {
    requests_bot_substitution_since_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.requests_bot_substitution_since_);
  } else {
    requests_bot_substitution_since_ = nullptr;
  }
  if (from._internal_has_requests_timeout_since()) {
    requests_timeout_since_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.requests_timeout_since_);
  } else {
    requests_timeout_since_ = nullptr;
  }
  if (from._internal_has_requests_emergency_stop_since()) {
    requests_emergency_stop_since_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.requests_emergency_stop_since_);
  } else {
    requests_emergency_stop_since_ = nullptr;
  }
  if (from._internal_has_bot_substitution_time_left()) {
    bot_substitution_time_left_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.bot_substitution_time_left_);
  } else {
    bot_substitution_time_left_ = nullptr;
  }
  ::memcpy(&goals_, &from.goals_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_substitutions_left_) -
    reinterpret_cast<char*>(&goals_)) + sizeof(bot_substitutions_left_));
  // @@protoc_insertion_point(copy_constructor:TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_time_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_substitutions_left_) -
      reinterpret_cast<char*>(&timeout_time_left_)) + sizeof(bot_substitutions_left_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:TeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_time_left_;
  if (this != internal_default_instance()) delete requests_bot_substitution_since_;
  if (this != internal_default_instance()) delete requests_timeout_since_;
  if (this != internal_default_instance()) delete requests_emergency_stop_since_;
  if (this != internal_default_instance()) delete bot_substitution_time_left_;
}

void TeamInfo::ArenaDtor(void* object) {
  TeamInfo* _this = reinterpret_cast< TeamInfo* >(object);
  (void)_this;
}
void TeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamInfo& TeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamInfo_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_cards_.Clear();
  red_cards_.Clear();
  fouls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timeout_time_left_ != nullptr);
      timeout_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(requests_bot_substitution_since_ != nullptr);
      requests_bot_substitution_since_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(requests_timeout_since_ != nullptr);
      requests_timeout_since_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(requests_emergency_stop_since_ != nullptr);
      requests_emergency_stop_since_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bot_substitution_time_left_ != nullptr);
      bot_substitution_time_left_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&goals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goalkeeper_) -
        reinterpret_cast<char*>(&goals_)) + sizeof(goalkeeper_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&timeouts_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_flags_) -
        reinterpret_cast<char*>(&timeouts_left_)) + sizeof(challenge_flags_));
  }
  bot_substitutions_left_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeamInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 goals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_goals(&has_bits);
          goals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 goalkeeper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_goalkeeper(&has_bits);
          goalkeeper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .YellowCard yellow_cards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yellow_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RedCard red_cards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_red_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 timeouts_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeouts_left(&has_bits);
          timeouts_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration timeout_time_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_time_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool on_positive_half = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_on_positive_half(&has_bits);
          on_positive_half_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Foul fouls = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fouls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 ball_placement_failures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ball_placement_failures(&has_bits);
          ball_placement_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ball_placement_failures_reached = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ball_placement_failures_reached(&has_bits);
          ball_placement_failures_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_place_ball = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_place_ball(&has_bits);
          can_place_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_allowed_bots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_allowed_bots(&has_bits);
          max_allowed_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_bot_substitution_since(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp requests_timeout_since = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_timeout_since(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_emergency_stop_since(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 challenge_flags = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_challenge_flags(&has_bits);
          challenge_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bot_substitution_allowed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bot_substitution_allowed(&has_bits);
          bot_substitution_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bot_substitutions_left = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_bot_substitutions_left(&has_bits);
          bot_substitutions_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration bot_substitution_time_left = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_substitution_time_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 goals = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goals(), target);
  }

  // optional int32 goalkeeper = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goalkeeper(), target);
  }

  // repeated .YellowCard yellow_cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yellow_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_yellow_cards(i), target, stream);
  }

  // repeated .RedCard red_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_red_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_red_cards(i), target, stream);
  }

  // optional int32 timeouts_left = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_timeouts_left(), target);
  }

  // optional .google.protobuf.Duration timeout_time_left = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::timeout_time_left(this), target, stream);
  }

  // optional bool on_positive_half = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_on_positive_half(), target);
  }

  // repeated .Foul fouls = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fouls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_fouls(i), target, stream);
  }

  // optional int32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_ball_placement_failures(), target);
  }

  // optional bool ball_placement_failures_reached = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_ball_placement_failures_reached(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_can_place_ball(), target);
  }

  // optional int32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_allowed_bots(), target);
  }

  // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::requests_bot_substitution_since(this), target, stream);
  }

  // optional .google.protobuf.Timestamp requests_timeout_since = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::requests_timeout_since(this), target, stream);
  }

  // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::requests_emergency_stop_since(this), target, stream);
  }

  // optional int32 challenge_flags = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_challenge_flags(), target);
  }

  // optional bool bot_substitution_allowed = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_bot_substitution_allowed(), target);
  }

  // optional int32 bot_substitutions_left = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_bot_substitutions_left(), target);
  }

  // optional .google.protobuf.Duration bot_substitution_time_left = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::bot_substitution_time_left(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YellowCard yellow_cards = 4;
  total_size += 1UL * this->_internal_yellow_cards_size();
  for (const auto& msg : this->yellow_cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RedCard red_cards = 5;
  total_size += 1UL * this->_internal_red_cards_size();
  for (const auto& msg : this->red_cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Foul fouls = 9;
  total_size += 1UL * this->_internal_fouls_size();
  for (const auto& msg : this->fouls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .google.protobuf.Duration timeout_time_left = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_time_left_);
    }

    // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_bot_substitution_since_);
    }

    // optional .google.protobuf.Timestamp requests_timeout_since = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_timeout_since_);
    }

    // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_emergency_stop_since_);
    }

    // optional .google.protobuf.Duration bot_substitution_time_left = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bot_substitution_time_left_);
    }

    // optional int32 goals = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_goals());
    }

    // optional int32 goalkeeper = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_goalkeeper());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 timeouts_left = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timeouts_left());
    }

    // optional int32 ball_placement_failures = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ball_placement_failures());
    }

    // optional bool on_positive_half = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool ball_placement_failures_reached = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool can_place_ball = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_allowed = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_allowed_bots = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_allowed_bots());
    }

    // optional int32 challenge_flags = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_challenge_flags());
    }

  }
  // optional int32 bot_substitutions_left = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bot_substitutions_left());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_cards_.MergeFrom(from.yellow_cards_);
  red_cards_.MergeFrom(from.red_cards_);
  fouls_.MergeFrom(from.fouls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timeout_time_left()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout_time_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_requests_bot_substitution_since()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_requests_bot_substitution_since());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_requests_timeout_since()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_requests_timeout_since());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_requests_emergency_stop_since()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_requests_emergency_stop_since());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_bot_substitution_time_left()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_bot_substitution_time_left());
    }
    if (cached_has_bits & 0x00000040u) {
      goals_ = from.goals_;
    }
    if (cached_has_bits & 0x00000080u) {
      goalkeeper_ = from.goalkeeper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      timeouts_left_ = from.timeouts_left_;
    }
    if (cached_has_bits & 0x00000200u) {
      ball_placement_failures_ = from.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000400u) {
      on_positive_half_ = from.on_positive_half_;
    }
    if (cached_has_bits & 0x00000800u) {
      ball_placement_failures_reached_ = from.ball_placement_failures_reached_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_place_ball_ = from.can_place_ball_;
    }
    if (cached_has_bits & 0x00002000u) {
      bot_substitution_allowed_ = from.bot_substitution_allowed_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_allowed_bots_ = from.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00008000u) {
      challenge_flags_ = from.challenge_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_bot_substitutions_left(from._internal_bot_substitutions_left());
  }
}

void TeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(yellow_cards_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(red_cards_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fouls_)) return false;
  return true;
}

void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yellow_cards_.InternalSwap(&other->yellow_cards_);
  red_cards_.InternalSwap(&other->red_cards_);
  fouls_.InternalSwap(&other->fouls_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamInfo, bot_substitutions_left_)
      + sizeof(TeamInfo::bot_substitutions_left_)
      - PROTOBUF_FIELD_OFFSET(TeamInfo, timeout_time_left_)>(
          reinterpret_cast<char*>(&timeout_time_left_),
          reinterpret_cast<char*>(&other->timeout_time_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

State_TeamStateEntry_DoNotUse::State_TeamStateEntry_DoNotUse() {}
State_TeamStateEntry_DoNotUse::State_TeamStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void State_TeamStateEntry_DoNotUse::MergeFrom(const State_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata State_TeamStateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void State_TeamStateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::_State_default_instance_._instance.get_mutable()->command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->game_state_ = const_cast< ::GameState*>(
      ::GameState::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->stage_time_elapsed_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->stage_time_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->match_time_start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->placement_pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->next_command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->current_action_time_remaining_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->ready_continue_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->shootout_state_ = const_cast< ::ShootoutState*>(
      ::ShootoutState::internal_default_instance());
}
class State::_Internal {
 public:
  using HasBits = decltype(std::declval<State>()._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::Command& command(const State* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameState& game_state(const State* msg);
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& stage_time_elapsed(const State* msg);
  static void set_has_stage_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& stage_time_left(const State* msg);
  static void set_has_stage_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& match_time_start(const State* msg);
  static void set_has_match_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& placement_pos(const State* msg);
  static void set_has_placement_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Command& next_command(const State* msg);
  static void set_has_next_command(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& current_action_time_remaining(const State* msg);
  static void set_has_current_action_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_first_kickoff_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& ready_continue_time(const State* msg);
  static void set_has_ready_continue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ShootoutState& shootout_state(const State* msg);
  static void set_has_shootout_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_status_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_bots_per_team(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::Command&
State::_Internal::command(const State* msg) {
  return *msg->command_;
}
const ::GameState&
State::_Internal::game_state(const State* msg) {
  return *msg->game_state_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
State::_Internal::stage_time_elapsed(const State* msg) {
  return *msg->stage_time_elapsed_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
State::_Internal::stage_time_left(const State* msg) {
  return *msg->stage_time_left_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
State::_Internal::match_time_start(const State* msg) {
  return *msg->match_time_start_;
}
const ::Vector2&
State::_Internal::placement_pos(const State* msg) {
  return *msg->placement_pos_;
}
const ::Command&
State::_Internal::next_command(const State* msg) {
  return *msg->next_command_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
State::_Internal::current_action_time_remaining(const State* msg) {
  return *msg->current_action_time_remaining_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
State::_Internal::ready_continue_time(const State* msg) {
  return *msg->ready_continue_time_;
}
const ::ShootoutState&
State::_Internal::shootout_state(const State* msg) {
  return *msg->shootout_state_;
}
void State::clear_stage_time_elapsed() {
  if (stage_time_elapsed_ != nullptr) stage_time_elapsed_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void State::clear_stage_time_left() {
  if (stage_time_left_ != nullptr) stage_time_left_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void State::clear_match_time_start() {
  if (match_time_start_ != nullptr) match_time_start_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void State::clear_placement_pos() {
  if (placement_pos_ != nullptr) placement_pos_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void State::clear_current_action_time_remaining() {
  if (current_action_time_remaining_ != nullptr) current_action_time_remaining_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void State::clear_game_events() {
  game_events_.Clear();
}
void State::clear_ready_continue_time() {
  if (ready_continue_time_ != nullptr) ready_continue_time_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_state_(arena),
  game_events_(arena),
  proposal_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_events_(from.game_events_),
      proposal_groups_(from.proposal_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_state_.MergeFrom(from.team_state_);
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status_message()) {
    status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status_message(),
      GetArena());
  }
  if (from._internal_has_command()) {
    command_ = new ::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_stage_time_elapsed()) {
    stage_time_elapsed_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.stage_time_elapsed_);
  } else {
    stage_time_elapsed_ = nullptr;
  }
  if (from._internal_has_stage_time_left()) {
    stage_time_left_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.stage_time_left_);
  } else {
    stage_time_left_ = nullptr;
  }
  if (from._internal_has_match_time_start()) {
    match_time_start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.match_time_start_);
  } else {
    match_time_start_ = nullptr;
  }
  if (from._internal_has_placement_pos()) {
    placement_pos_ = new ::Vector2(*from.placement_pos_);
  } else {
    placement_pos_ = nullptr;
  }
  if (from._internal_has_next_command()) {
    next_command_ = new ::Command(*from.next_command_);
  } else {
    next_command_ = nullptr;
  }
  if (from._internal_has_current_action_time_remaining()) {
    current_action_time_remaining_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.current_action_time_remaining_);
  } else {
    current_action_time_remaining_ = nullptr;
  }
  if (from._internal_has_game_state()) {
    game_state_ = new ::GameState(*from.game_state_);
  } else {
    game_state_ = nullptr;
  }
  if (from._internal_has_ready_continue_time()) {
    ready_continue_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.ready_continue_time_);
  } else {
    ready_continue_time_ = nullptr;
  }
  if (from._internal_has_shootout_state()) {
    shootout_state_ = new ::ShootoutState(*from.shootout_state_);
  } else {
    shootout_state_ = nullptr;
  }
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bots_per_team_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(max_bots_per_team_));
  // @@protoc_insertion_point(copy_constructor:State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_ssl_5fgc_5fstate_2eproto.base);
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bots_per_team_) -
      reinterpret_cast<char*>(&command_)) + sizeof(max_bots_per_team_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete stage_time_elapsed_;
  if (this != internal_default_instance()) delete stage_time_left_;
  if (this != internal_default_instance()) delete match_time_start_;
  if (this != internal_default_instance()) delete placement_pos_;
  if (this != internal_default_instance()) delete next_command_;
  if (this != internal_default_instance()) delete current_action_time_remaining_;
  if (this != internal_default_instance()) delete game_state_;
  if (this != internal_default_instance()) delete ready_continue_time_;
  if (this != internal_default_instance()) delete shootout_state_;
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_state_.Clear();
  game_events_.Clear();
  proposal_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      status_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stage_time_elapsed_ != nullptr);
      stage_time_elapsed_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stage_time_left_ != nullptr);
      stage_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(match_time_start_ != nullptr);
      match_time_start_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(placement_pos_ != nullptr);
      placement_pos_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(next_command_ != nullptr);
      next_command_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(current_action_time_remaining_ != nullptr);
      current_action_time_remaining_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(game_state_ != nullptr);
      game_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ready_continue_time_ != nullptr);
      ready_continue_time_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(shootout_state_ != nullptr);
      shootout_state_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_bots_per_team_) -
        reinterpret_cast<char*>(&stage_)) + sizeof(max_bots_per_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Referee.Stage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration stage_time_elapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stage_time_elapsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration stage_time_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stage_time_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp match_time_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_time_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .TeamInfo> team_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&team_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Vector2 placement_pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Command next_command = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration current_action_time_remaining = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_action_time_remaining(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameEvent game_events = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ProposalGroup proposal_groups = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposal_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Division division = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Division_IsValid(val))) {
            _internal_set_division(static_cast<::Division>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Team first_kickoff_team = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_first_kickoff_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .GameState game_state = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp ready_continue_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready_continue_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ShootoutState shootout_state = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_shootout_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status_message = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_status_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "State.status_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_bots_per_team = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_max_bots_per_team(&has_bits);
          max_bots_per_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage stage = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // optional .Command command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stage_time_elapsed(this), target, stream);
  }

  // optional .google.protobuf.Duration stage_time_left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stage_time_left(this), target, stream);
  }

  // optional .google.protobuf.Timestamp match_time_start = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::match_time_start(this), target, stream);
  }

  // map<string, .TeamInfo> team_state = 8;
  if (!this->_internal_team_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "State.TeamStateEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_team_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >::const_iterator
          it = this->_internal_team_state().begin();
          it != this->_internal_team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = State_TeamStateEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >::const_iterator
          it = this->_internal_team_state().begin();
          it != this->_internal_team_state().end(); ++it) {
        target = State_TeamStateEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .Vector2 placement_pos = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::placement_pos(this), target, stream);
  }

  // optional .Command next_command = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::next_command(this), target, stream);
  }

  // optional .google.protobuf.Duration current_action_time_remaining = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::current_action_time_remaining(this), target, stream);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_game_events(i), target, stream);
  }

  // repeated .ProposalGroup proposal_groups = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_proposal_groups(i), target, stream);
  }

  // optional .Division division = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_division(), target);
  }

  // optional .Team first_kickoff_team = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_first_kickoff_team(), target);
  }

  // optional .MatchType match_type = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_match_type(), target);
  }

  // optional .GameState game_state = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::game_state(this), target, stream);
  }

  // optional .google.protobuf.Timestamp ready_continue_time = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ready_continue_time(this), target, stream);
  }

  // optional .ShootoutState shootout_state = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::shootout_state(this), target, stream);
  }

  // optional string status_message = 22;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "State.status_message");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_status_message(), target);
  }

  // optional int32 max_bots_per_team = 23;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_max_bots_per_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .TeamInfo> team_state = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >::const_iterator
      it = this->_internal_team_state().begin();
      it != this->_internal_team_state().end(); ++it) {
    total_size += State_TeamStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .GameEvent game_events = 13;
  total_size += 1UL * this->_internal_game_events_size();
  for (const auto& msg : this->game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProposalGroup proposal_groups = 14;
  total_size += 1UL * this->_internal_proposal_groups_size();
  for (const auto& msg : this->proposal_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string status_message = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_message());
    }

    // optional .Command command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .google.protobuf.Duration stage_time_elapsed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_time_elapsed_);
    }

    // optional .google.protobuf.Duration stage_time_left = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_time_left_);
    }

    // optional .google.protobuf.Timestamp match_time_start = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_time_start_);
    }

    // optional .Vector2 placement_pos = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *placement_pos_);
    }

    // optional .Command next_command = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *next_command_);
    }

    // optional .google.protobuf.Duration current_action_time_remaining = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_action_time_remaining_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .GameState game_state = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_state_);
    }

    // optional .google.protobuf.Timestamp ready_continue_time = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ready_continue_time_);
    }

    // optional .ShootoutState shootout_state = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shootout_state_);
    }

    // optional .Referee.Stage stage = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
    }

    // optional .Division division = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_division());
    }

    // optional .Team first_kickoff_team = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_first_kickoff_team());
    }

    // optional .MatchType match_type = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional int32 max_bots_per_team = 23;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_bots_per_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_state_.MergeFrom(from.team_state_);
  game_events_.MergeFrom(from.game_events_);
  proposal_groups_.MergeFrom(from.proposal_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status_message(from._internal_status_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_command()->::Command::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stage_time_elapsed()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_stage_time_elapsed());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stage_time_left()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_stage_time_left());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_match_time_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_match_time_start());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_placement_pos()->::Vector2::MergeFrom(from._internal_placement_pos());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_next_command()->::Command::MergeFrom(from._internal_next_command());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_current_action_time_remaining()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_current_action_time_remaining());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_game_state()->::GameState::MergeFrom(from._internal_game_state());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ready_continue_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_ready_continue_time());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_shootout_state()->::ShootoutState::MergeFrom(from._internal_shootout_state());
    }
    if (cached_has_bits & 0x00000800u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00001000u) {
      division_ = from.division_;
    }
    if (cached_has_bits & 0x00002000u) {
      first_kickoff_team_ = from.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00004000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_bots_per_team_ = from.max_bots_per_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(team_state_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_events_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(proposal_groups_)) return false;
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_placement_pos()) {
    if (!placement_pos_->IsInitialized()) return false;
  }
  if (_internal_has_next_command()) {
    if (!next_command_->IsInitialized()) return false;
  }
  if (_internal_has_game_state()) {
    if (!game_state_->IsInitialized()) return false;
  }
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_state_.Swap(&other->team_state_);
  game_events_.InternalSwap(&other->game_events_);
  proposal_groups_.InternalSwap(&other->proposal_groups_);
  status_message_.Swap(&other->status_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, max_bots_per_team_)
      + sizeof(State::max_bots_per_team_)
      - PROTOBUF_FIELD_OFFSET(State, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ShootoutState_NumberOfAttemptsEntry_DoNotUse::ShootoutState_NumberOfAttemptsEntry_DoNotUse() {}
ShootoutState_NumberOfAttemptsEntry_DoNotUse::ShootoutState_NumberOfAttemptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ShootoutState_NumberOfAttemptsEntry_DoNotUse::MergeFrom(const ShootoutState_NumberOfAttemptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ShootoutState_NumberOfAttemptsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ShootoutState_NumberOfAttemptsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ShootoutState::InitAsDefaultInstance() {
}
class ShootoutState::_Internal {
 public:
  using HasBits = decltype(std::declval<ShootoutState>()._has_bits_);
  static void set_has_next_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShootoutState::ShootoutState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  number_of_attempts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShootoutState)
}
ShootoutState::ShootoutState(const ShootoutState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_of_attempts_.MergeFrom(from.number_of_attempts_);
  next_team_ = from.next_team_;
  // @@protoc_insertion_point(copy_constructor:ShootoutState)
}

void ShootoutState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto.base);
  next_team_ = 0;
}

ShootoutState::~ShootoutState() {
  // @@protoc_insertion_point(destructor:ShootoutState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShootoutState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShootoutState::ArenaDtor(void* object) {
  ShootoutState* _this = reinterpret_cast< ShootoutState* >(object);
  (void)_this;
}
void ShootoutState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShootoutState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShootoutState& ShootoutState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShootoutState_ssl_5fgc_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ShootoutState::Clear() {
// @@protoc_insertion_point(message_clear_start:ShootoutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_of_attempts_.Clear();
  next_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShootoutState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team next_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_next_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // map<string, int32> number_of_attempts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&number_of_attempts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShootoutState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShootoutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team next_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_next_team(), target);
  }

  // map<string, int32> number_of_attempts = 2;
  if (!this->_internal_number_of_attempts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "ShootoutState.NumberOfAttemptsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_number_of_attempts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_number_of_attempts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_number_of_attempts().begin();
          it != this->_internal_number_of_attempts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ShootoutState_NumberOfAttemptsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_number_of_attempts().begin();
          it != this->_internal_number_of_attempts().end(); ++it) {
        target = ShootoutState_NumberOfAttemptsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShootoutState)
  return target;
}

size_t ShootoutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShootoutState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> number_of_attempts = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_number_of_attempts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_number_of_attempts().begin();
      it != this->_internal_number_of_attempts().end(); ++it) {
    total_size += ShootoutState_NumberOfAttemptsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .Team next_team = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShootoutState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShootoutState)
  GOOGLE_DCHECK_NE(&from, this);
  const ShootoutState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShootoutState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShootoutState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShootoutState)
    MergeFrom(*source);
  }
}

void ShootoutState::MergeFrom(const ShootoutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShootoutState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_of_attempts_.MergeFrom(from.number_of_attempts_);
  if (from._internal_has_next_team()) {
    _internal_set_next_team(from._internal_next_team());
  }
}

void ShootoutState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShootoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShootoutState::CopyFrom(const ShootoutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShootoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShootoutState::IsInitialized() const {
  return true;
}

void ShootoutState::InternalSwap(ShootoutState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  number_of_attempts_.Swap(&other->number_of_attempts_);
  swap(next_team_, other->next_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShootoutState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::YellowCard* Arena::CreateMaybeMessage< ::YellowCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YellowCard >(arena);
}
template<> PROTOBUF_NOINLINE ::RedCard* Arena::CreateMaybeMessage< ::RedCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedCard >(arena);
}
template<> PROTOBUF_NOINLINE ::Foul* Arena::CreateMaybeMessage< ::Foul >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Foul >(arena);
}
template<> PROTOBUF_NOINLINE ::Command* Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::GameState* Arena::CreateMaybeMessage< ::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Proposal* Arena::CreateMaybeMessage< ::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::ProposalGroup* Arena::CreateMaybeMessage< ::ProposalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProposalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamInfo* Arena::CreateMaybeMessage< ::TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::State_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::State_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::State_TeamStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::State* Arena::CreateMaybeMessage< ::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::State >(arena);
}
template<> PROTOBUF_NOINLINE ::ShootoutState_NumberOfAttemptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ShootoutState_NumberOfAttemptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShootoutState_NumberOfAttemptsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ShootoutState* Arena::CreateMaybeMessage< ::ShootoutState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShootoutState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
