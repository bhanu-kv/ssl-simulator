// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_game_event.proto

#include "ssl_gc_game_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<40> scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto;
class GameEvent_BallLeftFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BallLeftField> _instance;
} _GameEvent_BallLeftField_default_instance_;
class GameEvent_AimlessKickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_AimlessKick> _instance;
} _GameEvent_AimlessKick_default_instance_;
class GameEvent_GoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_Goal> _instance;
} _GameEvent_Goal_default_instance_;
class GameEvent_IndirectGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_IndirectGoal> _instance;
} _GameEvent_IndirectGoal_default_instance_;
class GameEvent_ChippedGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_ChippedGoal> _instance;
} _GameEvent_ChippedGoal_default_instance_;
class GameEvent_BotTooFastInStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotTooFastInStop> _instance;
} _GameEvent_BotTooFastInStop_default_instance_;
class GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_DefenderTooCloseToKickPoint> _instance;
} _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
class GameEvent_BotCrashDrawnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotCrashDrawn> _instance;
} _GameEvent_BotCrashDrawn_default_instance_;
class GameEvent_BotCrashUniqueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotCrashUnique> _instance;
} _GameEvent_BotCrashUnique_default_instance_;
class GameEvent_BotPushedBotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotPushedBot> _instance;
} _GameEvent_BotPushedBot_default_instance_;
class GameEvent_BotTippedOverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotTippedOver> _instance;
} _GameEvent_BotTippedOver_default_instance_;
class GameEvent_BotDroppedPartsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotDroppedParts> _instance;
} _GameEvent_BotDroppedParts_default_instance_;
class GameEvent_DefenderInDefenseAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseArea> _instance;
} _GameEvent_DefenderInDefenseArea_default_instance_;
class GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_DefenderInDefenseAreaPartially> _instance;
} _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
class GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedBallInDefenseArea> _instance;
} _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
class GameEvent_BotKickedBallTooFastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotKickedBallTooFast> _instance;
} _GameEvent_BotKickedBallTooFast_default_instance_;
class GameEvent_BotDribbledBallTooFarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotDribbledBallTooFar> _instance;
} _GameEvent_BotDribbledBallTooFar_default_instance_;
class GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_AttackerTouchedOpponentInDefenseArea> _instance;
} _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
class GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_AttackerDoubleTouchedBall> _instance;
} _GameEvent_AttackerDoubleTouchedBall_default_instance_;
class GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_AttackerTooCloseToDefenseArea> _instance;
} _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
class GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotHeldBallDeliberately> _instance;
} _GameEvent_BotHeldBallDeliberately_default_instance_;
class GameEvent_BotInterferedPlacementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotInterferedPlacement> _instance;
} _GameEvent_BotInterferedPlacement_default_instance_;
class GameEvent_MultipleCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_MultipleCards> _instance;
} _GameEvent_MultipleCards_default_instance_;
class GameEvent_MultipleFoulsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_MultipleFouls> _instance;
} _GameEvent_MultipleFouls_default_instance_;
class GameEvent_MultiplePlacementFailuresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_MultiplePlacementFailures> _instance;
} _GameEvent_MultiplePlacementFailures_default_instance_;
class GameEvent_KickTimeoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_KickTimeout> _instance;
} _GameEvent_KickTimeout_default_instance_;
class GameEvent_NoProgressInGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_NoProgressInGame> _instance;
} _GameEvent_NoProgressInGame_default_instance_;
class GameEvent_PlacementFailedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_PlacementFailed> _instance;
} _GameEvent_PlacementFailed_default_instance_;
class GameEvent_UnsportingBehaviorMinorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMinor> _instance;
} _GameEvent_UnsportingBehaviorMinor_default_instance_;
class GameEvent_UnsportingBehaviorMajorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_UnsportingBehaviorMajor> _instance;
} _GameEvent_UnsportingBehaviorMajor_default_instance_;
class GameEvent_KeeperHeldBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_KeeperHeldBall> _instance;
} _GameEvent_KeeperHeldBall_default_instance_;
class GameEvent_PlacementSucceededDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_PlacementSucceeded> _instance;
} _GameEvent_PlacementSucceeded_default_instance_;
class GameEvent_PreparedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_Prepared> _instance;
} _GameEvent_Prepared_default_instance_;
class GameEvent_BotSubstitutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BotSubstitution> _instance;
} _GameEvent_BotSubstitution_default_instance_;
class GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_ExcessiveBotSubstitution> _instance;
} _GameEvent_ExcessiveBotSubstitution_default_instance_;
class GameEvent_ChallengeFlagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_ChallengeFlag> _instance;
} _GameEvent_ChallengeFlag_default_instance_;
class GameEvent_ChallengeFlagHandledDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_ChallengeFlagHandled> _instance;
} _GameEvent_ChallengeFlagHandled_default_instance_;
class GameEvent_EmergencyStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_EmergencyStop> _instance;
} _GameEvent_EmergencyStop_default_instance_;
class GameEvent_TooManyRobotsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_TooManyRobots> _instance;
} _GameEvent_TooManyRobots_default_instance_;
class GameEvent_BoundaryCrossingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_BoundaryCrossing> _instance;
} _GameEvent_BoundaryCrossing_default_instance_;
class GameEvent_PenaltyKickFailedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent_PenaltyKickFailed> _instance;
} _GameEvent_PenaltyKickFailed_default_instance_;
class GameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent> _instance;
  const ::GameEvent_BallLeftField* ball_left_field_touch_line_;
  const ::GameEvent_BallLeftField* ball_left_field_goal_line_;
  const ::GameEvent_AimlessKick* aimless_kick_;
  const ::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area_;
  const ::GameEvent_DefenderInDefenseArea* defender_in_defense_area_;
  const ::GameEvent_BoundaryCrossing* boundary_crossing_;
  const ::GameEvent_KeeperHeldBall* keeper_held_ball_;
  const ::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_;
  const ::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately_;
  const ::GameEvent_BotTippedOver* bot_tipped_over_;
  const ::GameEvent_BotDroppedParts* bot_dropped_parts_;
  const ::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area_;
  const ::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_;
  const ::GameEvent_BotCrashDrawn* bot_crash_drawn_;
  const ::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point_;
  const ::GameEvent_BotTooFastInStop* bot_too_fast_in_stop_;
  const ::GameEvent_BotInterferedPlacement* bot_interfered_placement_;
  const ::GameEvent_Goal* possible_goal_;
  const ::GameEvent_Goal* goal_;
  const ::GameEvent_Goal* invalid_goal_;
  const ::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball_;
  const ::GameEvent_PlacementSucceeded* placement_succeeded_;
  const ::GameEvent_PenaltyKickFailed* penalty_kick_failed_;
  const ::GameEvent_NoProgressInGame* no_progress_in_game_;
  const ::GameEvent_PlacementFailed* placement_failed_;
  const ::GameEvent_MultipleCards* multiple_cards_;
  const ::GameEvent_MultipleFouls* multiple_fouls_;
  const ::GameEvent_BotSubstitution* bot_substitution_;
  const ::GameEvent_ExcessiveBotSubstitution* excessive_bot_substitution_;
  const ::GameEvent_TooManyRobots* too_many_robots_;
  const ::GameEvent_ChallengeFlag* challenge_flag_;
  const ::GameEvent_ChallengeFlagHandled* challenge_flag_handled_;
  const ::GameEvent_EmergencyStop* emergency_stop_;
  const ::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor_;
  const ::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major_;
  const ::GameEvent_Prepared* prepared_;
  const ::GameEvent_IndirectGoal* indirect_goal_;
  const ::GameEvent_ChippedGoal* chipped_goal_;
  const ::GameEvent_KickTimeout* kick_timeout_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped_;
  const ::GameEvent_BotCrashUnique* bot_crash_unique_skipped_;
  const ::GameEvent_BotPushedBot* bot_pushed_bot_skipped_;
  const ::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially_;
  const ::GameEvent_MultiplePlacementFailures* multiple_placement_failures_;
} _GameEvent_default_instance_;
static void InitDefaultsscc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultipleFouls_default_instance_;
    new (ptr) ::GameEvent_MultipleFouls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_GameEvent_default_instance_;
    new (ptr) ::GameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultipleFouls::InitAsDefaultInstance();
  ::GameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<40> scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 40, 0, InitDefaultsscc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AimlessKick_default_instance_;
    new (ptr) ::GameEvent_AimlessKick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AimlessKick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerDoubleTouchedBall_default_instance_;
    new (ptr) ::GameEvent_AttackerDoubleTouchedBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerDoubleTouchedBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTooCloseToDefenseArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTooCloseToDefenseArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTouchedBallInDefenseArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTouchedBallInDefenseArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_AttackerTouchedOpponentInDefenseArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_AttackerTouchedOpponentInDefenseArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BallLeftField_default_instance_;
    new (ptr) ::GameEvent_BallLeftField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BallLeftField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotCrashDrawn_default_instance_;
    new (ptr) ::GameEvent_BotCrashDrawn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotCrashDrawn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotCrashUnique_default_instance_;
    new (ptr) ::GameEvent_BotCrashUnique();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotCrashUnique::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotDribbledBallTooFar_default_instance_;
    new (ptr) ::GameEvent_BotDribbledBallTooFar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotDribbledBallTooFar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotDroppedParts_default_instance_;
    new (ptr) ::GameEvent_BotDroppedParts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotDroppedParts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotHeldBallDeliberately_default_instance_;
    new (ptr) ::GameEvent_BotHeldBallDeliberately();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotHeldBallDeliberately::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotInterferedPlacement_default_instance_;
    new (ptr) ::GameEvent_BotInterferedPlacement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotInterferedPlacement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotKickedBallTooFast_default_instance_;
    new (ptr) ::GameEvent_BotKickedBallTooFast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotKickedBallTooFast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotPushedBot_default_instance_;
    new (ptr) ::GameEvent_BotPushedBot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotPushedBot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotSubstitution_default_instance_;
    new (ptr) ::GameEvent_BotSubstitution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotSubstitution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotTippedOver_default_instance_;
    new (ptr) ::GameEvent_BotTippedOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotTippedOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BotTooFastInStop_default_instance_;
    new (ptr) ::GameEvent_BotTooFastInStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BotTooFastInStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_BoundaryCrossing_default_instance_;
    new (ptr) ::GameEvent_BoundaryCrossing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_BoundaryCrossing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_ChallengeFlag_default_instance_;
    new (ptr) ::GameEvent_ChallengeFlag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_ChallengeFlag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_ChallengeFlagHandled_default_instance_;
    new (ptr) ::GameEvent_ChallengeFlagHandled();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_ChallengeFlagHandled::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_ChippedGoal_default_instance_;
    new (ptr) ::GameEvent_ChippedGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_ChippedGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderInDefenseArea_default_instance_;
    new (ptr) ::GameEvent_DefenderInDefenseArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderInDefenseArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderInDefenseAreaPartially_default_instance_;
    new (ptr) ::GameEvent_DefenderInDefenseAreaPartially();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderInDefenseAreaPartially::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_DefenderTooCloseToKickPoint_default_instance_;
    new (ptr) ::GameEvent_DefenderTooCloseToKickPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_DefenderTooCloseToKickPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_EmergencyStop_default_instance_;
    new (ptr) ::GameEvent_EmergencyStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_EmergencyStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_ExcessiveBotSubstitution_default_instance_;
    new (ptr) ::GameEvent_ExcessiveBotSubstitution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_ExcessiveBotSubstitution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_Goal_default_instance_;
    new (ptr) ::GameEvent_Goal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_Goal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_IndirectGoal_default_instance_;
    new (ptr) ::GameEvent_IndirectGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_IndirectGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_KeeperHeldBall_default_instance_;
    new (ptr) ::GameEvent_KeeperHeldBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_KeeperHeldBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_KickTimeout_default_instance_;
    new (ptr) ::GameEvent_KickTimeout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_KickTimeout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultipleCards_default_instance_;
    new (ptr) ::GameEvent_MultipleCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultipleCards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_MultiplePlacementFailures_default_instance_;
    new (ptr) ::GameEvent_MultiplePlacementFailures();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_MultiplePlacementFailures::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_NoProgressInGame_default_instance_;
    new (ptr) ::GameEvent_NoProgressInGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_NoProgressInGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_PenaltyKickFailed_default_instance_;
    new (ptr) ::GameEvent_PenaltyKickFailed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_PenaltyKickFailed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_PlacementFailed_default_instance_;
    new (ptr) ::GameEvent_PlacementFailed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_PlacementFailed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_PlacementSucceeded_default_instance_;
    new (ptr) ::GameEvent_PlacementSucceeded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_PlacementSucceeded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_Prepared_default_instance_;
    new (ptr) ::GameEvent_Prepared();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_Prepared::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_TooManyRobots_default_instance_;
    new (ptr) ::GameEvent_TooManyRobots();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_TooManyRobots::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_UnsportingBehaviorMajor_default_instance_;
    new (ptr) ::GameEvent_UnsportingBehaviorMajor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_UnsportingBehaviorMajor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEvent_UnsportingBehaviorMinor_default_instance_;
    new (ptr) ::GameEvent_UnsportingBehaviorMinor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEvent_UnsportingBehaviorMinor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, kick_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, kicking_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, kicking_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, kick_location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, max_ball_height_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, num_robots_by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, last_touch_by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, message_),
  3,
  6,
  4,
  1,
  2,
  5,
  8,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, kick_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, kick_location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, max_ball_height_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, speed_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, bot_yellow_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, bot_blue_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, crash_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, speed_diff_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, crash_angle_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, violator_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, crash_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, speed_diff_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, crash_angle_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, violator_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, pushed_distance_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, ball_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, ball_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, distance_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, ball_location_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, initial_ball_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, chipped_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, start_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, end_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, location_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, distance_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, ball_location_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, duration_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, caused_game_events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, time_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, remaining_distance_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, nearest_own_bot_distance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, duration_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, time_taken_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, precision_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, time_taken_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, accepted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, num_robots_allowed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, num_robots_on_field_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, ball_location_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, location_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, reason_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEvent, id_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, type_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, origin_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, created_timestamp_),
  offsetof(::GameEventDefaultTypeInternal, ball_left_field_touch_line_),
  offsetof(::GameEventDefaultTypeInternal, ball_left_field_goal_line_),
  offsetof(::GameEventDefaultTypeInternal, aimless_kick_),
  offsetof(::GameEventDefaultTypeInternal, attacker_too_close_to_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, defender_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, boundary_crossing_),
  offsetof(::GameEventDefaultTypeInternal, keeper_held_ball_),
  offsetof(::GameEventDefaultTypeInternal, bot_dribbled_ball_too_far_),
  offsetof(::GameEventDefaultTypeInternal, bot_pushed_bot_),
  offsetof(::GameEventDefaultTypeInternal, bot_held_ball_deliberately_),
  offsetof(::GameEventDefaultTypeInternal, bot_tipped_over_),
  offsetof(::GameEventDefaultTypeInternal, bot_dropped_parts_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_ball_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, bot_kicked_ball_too_fast_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_unique_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_drawn_),
  offsetof(::GameEventDefaultTypeInternal, defender_too_close_to_kick_point_),
  offsetof(::GameEventDefaultTypeInternal, bot_too_fast_in_stop_),
  offsetof(::GameEventDefaultTypeInternal, bot_interfered_placement_),
  offsetof(::GameEventDefaultTypeInternal, possible_goal_),
  offsetof(::GameEventDefaultTypeInternal, goal_),
  offsetof(::GameEventDefaultTypeInternal, invalid_goal_),
  offsetof(::GameEventDefaultTypeInternal, attacker_double_touched_ball_),
  offsetof(::GameEventDefaultTypeInternal, placement_succeeded_),
  offsetof(::GameEventDefaultTypeInternal, penalty_kick_failed_),
  offsetof(::GameEventDefaultTypeInternal, no_progress_in_game_),
  offsetof(::GameEventDefaultTypeInternal, placement_failed_),
  offsetof(::GameEventDefaultTypeInternal, multiple_cards_),
  offsetof(::GameEventDefaultTypeInternal, multiple_fouls_),
  offsetof(::GameEventDefaultTypeInternal, bot_substitution_),
  offsetof(::GameEventDefaultTypeInternal, excessive_bot_substitution_),
  offsetof(::GameEventDefaultTypeInternal, too_many_robots_),
  offsetof(::GameEventDefaultTypeInternal, challenge_flag_),
  offsetof(::GameEventDefaultTypeInternal, challenge_flag_handled_),
  offsetof(::GameEventDefaultTypeInternal, emergency_stop_),
  offsetof(::GameEventDefaultTypeInternal, unsporting_behavior_minor_),
  offsetof(::GameEventDefaultTypeInternal, unsporting_behavior_major_),
  offsetof(::GameEventDefaultTypeInternal, prepared_),
  offsetof(::GameEventDefaultTypeInternal, indirect_goal_),
  offsetof(::GameEventDefaultTypeInternal, chipped_goal_),
  offsetof(::GameEventDefaultTypeInternal, kick_timeout_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_opponent_in_defense_area_),
  offsetof(::GameEventDefaultTypeInternal, attacker_touched_opponent_in_defense_area_skipped_),
  offsetof(::GameEventDefaultTypeInternal, bot_crash_unique_skipped_),
  offsetof(::GameEventDefaultTypeInternal, bot_pushed_bot_skipped_),
  offsetof(::GameEventDefaultTypeInternal, defender_in_defense_area_partially_),
  offsetof(::GameEventDefaultTypeInternal, multiple_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, event_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::GameEvent_BallLeftField)},
  { 11, 20, sizeof(::GameEvent_AimlessKick)},
  { 24, 38, sizeof(::GameEvent_Goal)},
  { 47, 56, sizeof(::GameEvent_IndirectGoal)},
  { 60, 70, sizeof(::GameEvent_ChippedGoal)},
  { 75, 84, sizeof(::GameEvent_BotTooFastInStop)},
  { 88, 97, sizeof(::GameEvent_DefenderTooCloseToKickPoint)},
  { 101, 112, sizeof(::GameEvent_BotCrashDrawn)},
  { 118, 130, sizeof(::GameEvent_BotCrashUnique)},
  { 137, 147, sizeof(::GameEvent_BotPushedBot)},
  { 152, 161, sizeof(::GameEvent_BotTippedOver)},
  { 165, 174, sizeof(::GameEvent_BotDroppedParts)},
  { 178, 187, sizeof(::GameEvent_DefenderInDefenseArea)},
  { 191, 201, sizeof(::GameEvent_DefenderInDefenseAreaPartially)},
  { 206, 215, sizeof(::GameEvent_AttackerTouchedBallInDefenseArea)},
  { 219, 229, sizeof(::GameEvent_BotKickedBallTooFast)},
  { 234, 243, sizeof(::GameEvent_BotDribbledBallTooFar)},
  { 247, 256, sizeof(::GameEvent_AttackerTouchedOpponentInDefenseArea)},
  { 260, 268, sizeof(::GameEvent_AttackerDoubleTouchedBall)},
  { 271, 281, sizeof(::GameEvent_AttackerTooCloseToDefenseArea)},
  { 286, 295, sizeof(::GameEvent_BotHeldBallDeliberately)},
  { 299, 307, sizeof(::GameEvent_BotInterferedPlacement)},
  { 310, 316, sizeof(::GameEvent_MultipleCards)},
  { 317, 324, sizeof(::GameEvent_MultipleFouls)},
  { 326, 332, sizeof(::GameEvent_MultiplePlacementFailures)},
  { 333, 341, sizeof(::GameEvent_KickTimeout)},
  { 344, 351, sizeof(::GameEvent_NoProgressInGame)},
  { 353, 361, sizeof(::GameEvent_PlacementFailed)},
  { 364, 371, sizeof(::GameEvent_UnsportingBehaviorMinor)},
  { 373, 380, sizeof(::GameEvent_UnsportingBehaviorMajor)},
  { 382, 390, sizeof(::GameEvent_KeeperHeldBall)},
  { 393, 402, sizeof(::GameEvent_PlacementSucceeded)},
  { 406, 412, sizeof(::GameEvent_Prepared)},
  { 413, 419, sizeof(::GameEvent_BotSubstitution)},
  { 420, 426, sizeof(::GameEvent_ExcessiveBotSubstitution)},
  { 427, 433, sizeof(::GameEvent_ChallengeFlag)},
  { 434, 441, sizeof(::GameEvent_ChallengeFlagHandled)},
  { 443, 449, sizeof(::GameEvent_EmergencyStop)},
  { 450, 459, sizeof(::GameEvent_TooManyRobots)},
  { 463, 470, sizeof(::GameEvent_BoundaryCrossing)},
  { 472, 480, sizeof(::GameEvent_PenaltyKickFailed)},
  { 483, 540, sizeof(::GameEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BallLeftField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_AimlessKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_Goal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_IndirectGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_ChippedGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotTooFastInStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_DefenderTooCloseToKickPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotCrashDrawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotCrashUnique_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotPushedBot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotTippedOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotDroppedParts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_DefenderInDefenseArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_DefenderInDefenseAreaPartially_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotKickedBallTooFast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotDribbledBallTooFar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_AttackerDoubleTouchedBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotHeldBallDeliberately_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotInterferedPlacement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_MultipleCards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_MultipleFouls_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_MultiplePlacementFailures_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_KickTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_NoProgressInGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_PlacementFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_UnsportingBehaviorMinor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_UnsportingBehaviorMajor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_KeeperHeldBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_PlacementSucceeded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_Prepared_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BotSubstitution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_ExcessiveBotSubstitution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_ChallengeFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_ChallengeFlagHandled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_EmergencyStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_TooManyRobots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_BoundaryCrossing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_PenaltyKickFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEvent_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ssl_gc_game_event.proto\032\023ssl_gc_common"
  ".proto\032\025ssl_gc_geometry.proto\"\205C\n\tGameEv"
  "ent\022\n\n\002id\0302 \001(\t\022\035\n\004type\030( \001(\0162\017.GameEven"
  "t.Type\022\016\n\006origin\030) \003(\t\022\031\n\021created_timest"
  "amp\0301 \001(\004\022>\n\032ball_left_field_touch_line\030"
  "\006 \001(\0132\030.GameEvent.BallLeftFieldH\000\022=\n\031bal"
  "l_left_field_goal_line\030\007 \001(\0132\030.GameEvent"
  ".BallLeftFieldH\000\022.\n\014aimless_kick\030\013 \001(\0132\026"
  ".GameEvent.AimlessKickH\000\022V\n\"attacker_too"
  "_close_to_defense_area\030\023 \001(\0132(.GameEvent"
  ".AttackerTooCloseToDefenseAreaH\000\022D\n\030defe"
  "nder_in_defense_area\030\037 \001(\0132 .GameEvent.D"
  "efenderInDefenseAreaH\000\0228\n\021boundary_cross"
  "ing\030+ \001(\0132\033.GameEvent.BoundaryCrossingH\000"
  "\0225\n\020keeper_held_ball\030\r \001(\0132\031.GameEvent.K"
  "eeperHeldBallH\000\022E\n\031bot_dribbled_ball_too"
  "_far\030\021 \001(\0132 .GameEvent.BotDribbledBallTo"
  "oFarH\000\0221\n\016bot_pushed_bot\030\030 \001(\0132\027.GameEve"
  "nt.BotPushedBotH\000\022H\n\032bot_held_ball_delib"
  "erately\030\032 \001(\0132\".GameEvent.BotHeldBallDel"
  "iberatelyH\000\0223\n\017bot_tipped_over\030\033 \001(\0132\030.G"
  "ameEvent.BotTippedOverH\000\0227\n\021bot_dropped_"
  "parts\0303 \001(\0132\032.GameEvent.BotDroppedPartsH"
  "\000\022\\\n%attacker_touched_ball_in_defense_ar"
  "ea\030\017 \001(\0132+.GameEvent.AttackerTouchedBall"
  "InDefenseAreaH\000\022C\n\030bot_kicked_ball_too_f"
  "ast\030\022 \001(\0132\037.GameEvent.BotKickedBallTooFa"
  "stH\000\0225\n\020bot_crash_unique\030\026 \001(\0132\031.GameEve"
  "nt.BotCrashUniqueH\000\0223\n\017bot_crash_drawn\030\025"
  " \001(\0132\030.GameEvent.BotCrashDrawnH\000\022R\n defe"
  "nder_too_close_to_kick_point\030\035 \001(\0132&.Gam"
  "eEvent.DefenderTooCloseToKickPointH\000\022;\n\024"
  "bot_too_fast_in_stop\030\034 \001(\0132\033.GameEvent.B"
  "otTooFastInStopH\000\022E\n\030bot_interfered_plac"
  "ement\030\024 \001(\0132!.GameEvent.BotInterferedPla"
  "cementH\000\022(\n\rpossible_goal\030\' \001(\0132\017.GameEv"
  "ent.GoalH\000\022\037\n\004goal\030\010 \001(\0132\017.GameEvent.Goa"
  "lH\000\022\'\n\014invalid_goal\030, \001(\0132\017.GameEvent.Go"
  "alH\000\022L\n\034attacker_double_touched_ball\030\016 \001"
  "(\0132$.GameEvent.AttackerDoubleTouchedBall"
  "H\000\022<\n\023placement_succeeded\030\005 \001(\0132\035.GameEv"
  "ent.PlacementSucceededH\000\022;\n\023penalty_kick"
  "_failed\030- \001(\0132\034.GameEvent.PenaltyKickFai"
  "ledH\000\022:\n\023no_progress_in_game\030\002 \001(\0132\033.Gam"
  "eEvent.NoProgressInGameH\000\0226\n\020placement_f"
  "ailed\030\003 \001(\0132\032.GameEvent.PlacementFailedH"
  "\000\0222\n\016multiple_cards\030  \001(\0132\030.GameEvent.Mu"
  "ltipleCardsH\000\0222\n\016multiple_fouls\030\" \001(\0132\030."
  "GameEvent.MultipleFoulsH\000\0226\n\020bot_substit"
  "ution\030% \001(\0132\032.GameEvent.BotSubstitutionH"
  "\000\022I\n\032excessive_bot_substitution\0304 \001(\0132#."
  "GameEvent.ExcessiveBotSubstitutionH\000\0223\n\017"
  "too_many_robots\030& \001(\0132\030.GameEvent.TooMan"
  "yRobotsH\000\0222\n\016challenge_flag\030. \001(\0132\030.Game"
  "Event.ChallengeFlagH\000\022A\n\026challenge_flag_"
  "handled\0300 \001(\0132\037.GameEvent.ChallengeFlagH"
  "andledH\000\0222\n\016emergency_stop\030/ \001(\0132\030.GameE"
  "vent.EmergencyStopH\000\022G\n\031unsporting_behav"
  "ior_minor\030# \001(\0132\".GameEvent.UnsportingBe"
  "haviorMinorH\000\022G\n\031unsporting_behavior_maj"
  "or\030$ \001(\0132\".GameEvent.UnsportingBehaviorM"
  "ajorH\000\022+\n\010prepared\030\001 \001(\0132\023.GameEvent.Pre"
  "paredB\002\030\001H\000\0224\n\rindirect_goal\030\t \001(\0132\027.Gam"
  "eEvent.IndirectGoalB\002\030\001H\000\0222\n\014chipped_goa"
  "l\030\n \001(\0132\026.GameEvent.ChippedGoalB\002\030\001H\000\0222\n"
  "\014kick_timeout\030\014 \001(\0132\026.GameEvent.KickTime"
  "outB\002\030\001H\000\022h\n)attacker_touched_opponent_i"
  "n_defense_area\030\020 \001(\0132/.GameEvent.Attacke"
  "rTouchedOpponentInDefenseAreaB\002\030\001H\000\022p\n1a"
  "ttacker_touched_opponent_in_defense_area"
  "_skipped\030* \001(\0132/.GameEvent.AttackerTouch"
  "edOpponentInDefenseAreaB\002\030\001H\000\022A\n\030bot_cra"
  "sh_unique_skipped\030\027 \001(\0132\031.GameEvent.BotC"
  "rashUniqueB\002\030\001H\000\022=\n\026bot_pushed_bot_skipp"
  "ed\030\031 \001(\0132\027.GameEvent.BotPushedBotB\002\030\001H\000\022"
  "[\n\"defender_in_defense_area_partially\030\036 "
  "\001(\0132).GameEvent.DefenderInDefenseAreaPar"
  "tiallyB\002\030\001H\000\022O\n\033multiple_placement_failu"
  "res\030! \001(\0132$.GameEvent.MultiplePlacementF"
  "ailuresB\002\030\001H\000\032S\n\rBallLeftField\022\026\n\007by_tea"
  "m\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010locati"
  "on\030\003 \001(\0132\010.Vector2\032r\n\013AimlessKick\022\026\n\007by_"
  "team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loc"
  "ation\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004"
  " \001(\0132\010.Vector2\032\357\001\n\004Goal\022\026\n\007by_team\030\001 \002(\016"
  "2\005.Team\022\033\n\014kicking_team\030\006 \001(\0162\005.Team\022\023\n\013"
  "kicking_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Ve"
  "ctor2\022\037\n\rkick_location\030\004 \001(\0132\010.Vector2\022\027"
  "\n\017max_ball_height\030\005 \001(\002\022\032\n\022num_robots_by"
  "_team\030\007 \001(\r\022\032\n\022last_touch_by_team\030\010 \001(\004\022"
  "\017\n\007message\030\t \001(\t\032s\n\014IndirectGoal\022\026\n\007by_t"
  "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
  "tion\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004 "
  "\001(\0132\010.Vector2\032\213\001\n\013ChippedGoal\022\026\n\007by_team"
  "\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010locatio"
  "n\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004 \001(\013"
  "2\010.Vector2\022\027\n\017max_ball_height\030\005 \001(\002\032e\n\020B"
  "otTooFastInStop\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
  "\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vect"
  "or2\022\r\n\005speed\030\004 \001(\002\032s\n\033DefenderTooCloseTo"
  "KickPoint\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_"
  "bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n"
  "\010distance\030\004 \001(\002\032\217\001\n\rBotCrashDrawn\022\022\n\nbot"
  "_yellow\030\001 \001(\r\022\020\n\010bot_blue\030\002 \001(\r\022\032\n\010locat"
  "ion\030\003 \001(\0132\010.Vector2\022\023\n\013crash_speed\030\004 \001(\002"
  "\022\022\n\nspeed_diff\030\005 \001(\002\022\023\n\013crash_angle\030\006 \001("
  "\002\032\244\001\n\016BotCrashUnique\022\026\n\007by_team\030\001 \002(\0162\005."
  "Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001(\r\022\032"
  "\n\010location\030\004 \001(\0132\010.Vector2\022\023\n\013crash_spee"
  "d\030\005 \001(\002\022\022\n\nspeed_diff\030\006 \001(\002\022\023\n\013crash_ang"
  "le\030\007 \001(\002\032}\n\014BotPushedBot\022\026\n\007by_team\030\001 \002("
  "\0162\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001"
  "(\r\022\032\n\010location\030\004 \001(\0132\010.Vector2\022\027\n\017pushed"
  "_distance\030\005 \001(\002\032t\n\rBotTippedOver\022\026\n\007by_t"
  "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
  "tion\030\003 \001(\0132\010.Vector2\022\037\n\rball_location\030\004 "
  "\001(\0132\010.Vector2\032v\n\017BotDroppedParts\022\026\n\007by_t"
  "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
  "tion\030\003 \001(\0132\010.Vector2\022\037\n\rball_location\030\004 "
  "\001(\0132\010.Vector2\032m\n\025DefenderInDefenseArea\022\026"
  "\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032"
  "\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004"
  " \001(\002\032\227\001\n\036DefenderInDefenseAreaPartially\022"
  "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
  "\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030"
  "\004 \001(\002\022\037\n\rball_location\030\005 \001(\0132\010.Vector2\032x"
  "\n AttackerTouchedBallInDefenseArea\022\026\n\007by"
  "_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010lo"
  "cation\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001(\002"
  "\032\207\001\n\024BotKickedBallTooFast\022\026\n\007by_team\030\001 \002"
  "(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 "
  "\001(\0132\010.Vector2\022\032\n\022initial_ball_speed\030\004 \001("
  "\002\022\017\n\007chipped\030\005 \001(\010\032o\n\025BotDribbledBallToo"
  "Far\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 "
  "\001(\r\022\027\n\005start\030\003 \001(\0132\010.Vector2\022\025\n\003end\030\004 \001("
  "\0132\010.Vector2\032z\n$AttackerTouchedOpponentIn"
  "DefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006b"
  "y_bot\030\002 \001(\r\022\016\n\006victim\030\004 \001(\r\022\032\n\010location\030"
  "\003 \001(\0132\010.Vector2\032_\n\031AttackerDoubleTouched"
  "Ball\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002"
  " \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\226\001\n\035Att"
  "ackerTooCloseToDefenseArea\022\026\n\007by_team\030\001 "
  "\002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003"
  " \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001(\002\022\037\n\rball"
  "_location\030\005 \001(\0132\010.Vector2\032o\n\027BotHeldBall"
  "Deliberately\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
  "by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2"
  "\022\020\n\010duration\030\004 \001(\002\032\\\n\026BotInterferedPlace"
  "ment\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002"
  " \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\'\n\rMult"
  "ipleCards\022\026\n\007by_team\030\001 \002(\0162\005.Team\032O\n\rMul"
  "tipleFouls\022\026\n\007by_team\030\001 \002(\0162\005.Team\022&\n\022ca"
  "used_game_events\030\002 \003(\0132\n.GameEvent\0323\n\031Mu"
  "ltiplePlacementFailures\022\026\n\007by_team\030\001 \002(\016"
  "2\005.Team\032O\n\013KickTimeout\022\026\n\007by_team\030\001 \002(\0162"
  "\005.Team\022\032\n\010location\030\002 \001(\0132\010.Vector2\022\014\n\004ti"
  "me\030\003 \001(\002\032<\n\020NoProgressInGame\022\032\n\010location"
  "\030\001 \001(\0132\010.Vector2\022\014\n\004time\030\002 \001(\002\032g\n\017Placem"
  "entFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022rem"
  "aining_distance\030\002 \001(\002\022 \n\030nearest_own_bot"
  "_distance\030\003 \001(\002\032A\n\027UnsportingBehaviorMin"
  "or\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002"
  "(\t\032A\n\027UnsportingBehaviorMajor\022\026\n\007by_team"
  "\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002(\t\032V\n\016KeeperH"
  "eldBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010locat"
  "ion\030\002 \001(\0132\010.Vector2\022\020\n\010duration\030\003 \001(\002\032e\n"
  "\022PlacementSucceeded\022\026\n\007by_team\030\001 \002(\0162\005.T"
  "eam\022\022\n\ntime_taken\030\002 \001(\002\022\021\n\tprecision\030\003 \001"
  "(\002\022\020\n\010distance\030\004 \001(\002\032\036\n\010Prepared\022\022\n\ntime"
  "_taken\030\001 \001(\002\032)\n\017BotSubstitution\022\026\n\007by_te"
  "am\030\001 \002(\0162\005.Team\0322\n\030ExcessiveBotSubstitut"
  "ion\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rChallenge"
  "Flag\022\026\n\007by_team\030\001 \002(\0162\005.Team\032@\n\024Challeng"
  "eFlagHandled\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\020\n\010"
  "accepted\030\002 \002(\010\032\'\n\rEmergencyStop\022\026\n\007by_te"
  "am\030\001 \002(\0162\005.Team\032\201\001\n\rTooManyRobots\022\026\n\007by_"
  "team\030\001 \002(\0162\005.Team\022\032\n\022num_robots_allowed\030"
  "\002 \001(\005\022\033\n\023num_robots_on_field\030\003 \001(\005\022\037\n\rba"
  "ll_location\030\004 \001(\0132\010.Vector2\032F\n\020BoundaryC"
  "rossing\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010locat"
  "ion\030\002 \001(\0132\010.Vector2\032W\n\021PenaltyKickFailed"
  "\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010location\030\002 \001"
  "(\0132\010.Vector2\022\016\n\006reason\030\003 \001(\t\"\265\n\n\004Type\022\033\n"
  "\027UNKNOWN_GAME_EVENT_TYPE\020\000\022\036\n\032BALL_LEFT_"
  "FIELD_TOUCH_LINE\020\006\022\035\n\031BALL_LEFT_FIELD_GO"
  "AL_LINE\020\007\022\020\n\014AIMLESS_KICK\020\013\022&\n\"ATTACKER_"
  "TOO_CLOSE_TO_DEFENSE_AREA\020\023\022\034\n\030DEFENDER_"
  "IN_DEFENSE_AREA\020\037\022\025\n\021BOUNDARY_CROSSING\020)"
  "\022\024\n\020KEEPER_HELD_BALL\020\r\022\035\n\031BOT_DRIBBLED_B"
  "ALL_TOO_FAR\020\021\022\022\n\016BOT_PUSHED_BOT\020\030\022\036\n\032BOT"
  "_HELD_BALL_DELIBERATELY\020\032\022\023\n\017BOT_TIPPED_"
  "OVER\020\033\022\025\n\021BOT_DROPPED_PARTS\020/\022)\n%ATTACKE"
  "R_TOUCHED_BALL_IN_DEFENSE_AREA\020\017\022\034\n\030BOT_"
  "KICKED_BALL_TOO_FAST\020\022\022\024\n\020BOT_CRASH_UNIQ"
  "UE\020\026\022\023\n\017BOT_CRASH_DRAWN\020\025\022$\n DEFENDER_TO"
  "O_CLOSE_TO_KICK_POINT\020\035\022\030\n\024BOT_TOO_FAST_"
  "IN_STOP\020\034\022\034\n\030BOT_INTERFERED_PLACEMENT\020\024\022"
  "\036\n\032EXCESSIVE_BOT_SUBSTITUTION\0200\022\021\n\rPOSSI"
  "BLE_GOAL\020\'\022\010\n\004GOAL\020\010\022\020\n\014INVALID_GOAL\020*\022 "
  "\n\034ATTACKER_DOUBLE_TOUCHED_BALL\020\016\022\027\n\023PLAC"
  "EMENT_SUCCEEDED\020\005\022\027\n\023PENALTY_KICK_FAILED"
  "\020+\022\027\n\023NO_PROGRESS_IN_GAME\020\002\022\024\n\020PLACEMENT"
  "_FAILED\020\003\022\022\n\016MULTIPLE_CARDS\020 \022\022\n\016MULTIPL"
  "E_FOULS\020\"\022\024\n\020BOT_SUBSTITUTION\020%\022\023\n\017TOO_M"
  "ANY_ROBOTS\020&\022\022\n\016CHALLENGE_FLAG\020,\022\032\n\026CHAL"
  "LENGE_FLAG_HANDLED\020.\022\022\n\016EMERGENCY_STOP\020-"
  "\022\035\n\031UNSPORTING_BEHAVIOR_MINOR\020#\022\035\n\031UNSPO"
  "RTING_BEHAVIOR_MAJOR\020$\022\020\n\010PREPARED\020\001\032\002\010\001"
  "\022\025\n\rINDIRECT_GOAL\020\t\032\002\010\001\022\024\n\014CHIPPED_GOAL\020"
  "\n\032\002\010\001\022\024\n\014KICK_TIMEOUT\020\014\032\002\010\001\0221\n)ATTACKER_"
  "TOUCHED_OPPONENT_IN_DEFENSE_AREA\020\020\032\002\010\001\0229"
  "\n1ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_A"
  "REA_SKIPPED\020(\032\002\010\001\022 \n\030BOT_CRASH_UNIQUE_SK"
  "IPPED\020\027\032\002\010\001\022\036\n\026BOT_PUSHED_BOT_SKIPPED\020\031\032"
  "\002\010\001\022*\n\"DEFENDER_IN_DEFENSE_AREA_PARTIALL"
  "Y\020\036\032\002\010\001\022#\n\033MULTIPLE_PLACEMENT_FAILURES\020!"
  "\032\002\010\001B\007\n\005eventB\?Z=github.com/RoboCup-SSL/"
  "ssl-game-controller/internal/app/state"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_sccs[41] = {
  &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto.base,
  &scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto, "ssl_gc_game_event.proto", 8718,
  &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once, descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_sccs, descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps, 41, 2,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto, 42, file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto, file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fgame_5fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[0];
}
bool GameEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameEvent_Type GameEvent::UNKNOWN_GAME_EVENT_TYPE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_TOUCH_LINE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_GOAL_LINE;
constexpr GameEvent_Type GameEvent::AIMLESS_KICK;
constexpr GameEvent_Type GameEvent::ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOUNDARY_CROSSING;
constexpr GameEvent_Type GameEvent::KEEPER_HELD_BALL;
constexpr GameEvent_Type GameEvent::BOT_DRIBBLED_BALL_TOO_FAR;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT;
constexpr GameEvent_Type GameEvent::BOT_HELD_BALL_DELIBERATELY;
constexpr GameEvent_Type GameEvent::BOT_TIPPED_OVER;
constexpr GameEvent_Type GameEvent::BOT_DROPPED_PARTS;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOT_KICKED_BALL_TOO_FAST;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE;
constexpr GameEvent_Type GameEvent::BOT_CRASH_DRAWN;
constexpr GameEvent_Type GameEvent::DEFENDER_TOO_CLOSE_TO_KICK_POINT;
constexpr GameEvent_Type GameEvent::BOT_TOO_FAST_IN_STOP;
constexpr GameEvent_Type GameEvent::BOT_INTERFERED_PLACEMENT;
constexpr GameEvent_Type GameEvent::EXCESSIVE_BOT_SUBSTITUTION;
constexpr GameEvent_Type GameEvent::POSSIBLE_GOAL;
constexpr GameEvent_Type GameEvent::GOAL;
constexpr GameEvent_Type GameEvent::INVALID_GOAL;
constexpr GameEvent_Type GameEvent::ATTACKER_DOUBLE_TOUCHED_BALL;
constexpr GameEvent_Type GameEvent::PLACEMENT_SUCCEEDED;
constexpr GameEvent_Type GameEvent::PENALTY_KICK_FAILED;
constexpr GameEvent_Type GameEvent::NO_PROGRESS_IN_GAME;
constexpr GameEvent_Type GameEvent::PLACEMENT_FAILED;
constexpr GameEvent_Type GameEvent::MULTIPLE_CARDS;
constexpr GameEvent_Type GameEvent::MULTIPLE_FOULS;
constexpr GameEvent_Type GameEvent::BOT_SUBSTITUTION;
constexpr GameEvent_Type GameEvent::TOO_MANY_ROBOTS;
constexpr GameEvent_Type GameEvent::CHALLENGE_FLAG;
constexpr GameEvent_Type GameEvent::CHALLENGE_FLAG_HANDLED;
constexpr GameEvent_Type GameEvent::EMERGENCY_STOP;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MINOR;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MAJOR;
constexpr GameEvent_Type GameEvent::PREPARED;
constexpr GameEvent_Type GameEvent::INDIRECT_GOAL;
constexpr GameEvent_Type GameEvent::CHIPPED_GOAL;
constexpr GameEvent_Type GameEvent::KICK_TIMEOUT;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT_SKIPPED;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA_PARTIALLY;
constexpr GameEvent_Type GameEvent::MULTIPLE_PLACEMENT_FAILURES;
constexpr GameEvent_Type GameEvent::Type_MIN;
constexpr GameEvent_Type GameEvent::Type_MAX;
constexpr int GameEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GameEvent_BallLeftField::InitAsDefaultInstance() {
  ::_GameEvent_BallLeftField_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BallLeftField::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BallLeftField>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BallLeftField* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BallLeftField::_Internal::location(const GameEvent_BallLeftField* msg) {
  return *msg->location_;
}
void GameEvent_BallLeftField::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BallLeftField::GameEvent_BallLeftField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BallLeftField)
}
GameEvent_BallLeftField::GameEvent_BallLeftField(const GameEvent_BallLeftField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BallLeftField)
}

void GameEvent_BallLeftField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BallLeftField::~GameEvent_BallLeftField() {
  // @@protoc_insertion_point(destructor:GameEvent.BallLeftField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BallLeftField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BallLeftField::ArenaDtor(void* object) {
  GameEvent_BallLeftField* _this = reinterpret_cast< GameEvent_BallLeftField* >(object);
  (void)_this;
}
void GameEvent_BallLeftField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BallLeftField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BallLeftField& GameEvent_BallLeftField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BallLeftField_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BallLeftField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BallLeftField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BallLeftField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BallLeftField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BallLeftField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BallLeftField)
  return target;
}

size_t GameEvent_BallLeftField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BallLeftField)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BallLeftField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BallLeftField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BallLeftField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BallLeftField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BallLeftField)
    MergeFrom(*source);
  }
}

void GameEvent_BallLeftField::MergeFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BallLeftField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BallLeftField::CopyFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BallLeftField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BallLeftField::InternalSwap(GameEvent_BallLeftField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, by_bot_)
      + sizeof(GameEvent_BallLeftField::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BallLeftField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_AimlessKick::InitAsDefaultInstance() {
  ::_GameEvent_AimlessKick_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_AimlessKick_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_AimlessKick::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AimlessKick>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AimlessKick* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_AimlessKick* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_AimlessKick::_Internal::location(const GameEvent_AimlessKick* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_AimlessKick::_Internal::kick_location(const GameEvent_AimlessKick* msg) {
  return *msg->kick_location_;
}
void GameEvent_AimlessKick::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AimlessKick::clear_kick_location() {
  if (kick_location_ != nullptr) kick_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_AimlessKick::GameEvent_AimlessKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AimlessKick)
}
GameEvent_AimlessKick::GameEvent_AimlessKick(const GameEvent_AimlessKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_kick_location()) {
    kick_location_ = new ::Vector2(*from.kick_location_);
  } else {
    kick_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AimlessKick)
}

void GameEvent_AimlessKick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_AimlessKick::~GameEvent_AimlessKick() {
  // @@protoc_insertion_point(destructor:GameEvent.AimlessKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_AimlessKick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_AimlessKick::ArenaDtor(void* object) {
  GameEvent_AimlessKick* _this = reinterpret_cast< GameEvent_AimlessKick* >(object);
  (void)_this;
}
void GameEvent_AimlessKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_AimlessKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_AimlessKick& GameEvent_AimlessKick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_AimlessKick_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_AimlessKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AimlessKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != nullptr);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AimlessKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_AimlessKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AimlessKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kick_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AimlessKick)
  return target;
}

size_t GameEvent_AimlessKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AimlessKick)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AimlessKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AimlessKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_AimlessKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AimlessKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AimlessKick)
    MergeFrom(*source);
  }
}

void GameEvent_AimlessKick::MergeFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_kick_location()->::Vector2::MergeFrom(from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AimlessKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AimlessKick::CopyFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AimlessKick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AimlessKick::InternalSwap(GameEvent_AimlessKick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, by_bot_)
      + sizeof(GameEvent_AimlessKick::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AimlessKick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_Goal::InitAsDefaultInstance() {
  ::_GameEvent_Goal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_Goal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_Goal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_Goal>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kicking_team(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_kicking_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& location(const GameEvent_Goal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& kick_location(const GameEvent_Goal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_ball_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_robots_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_touch_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::Vector2&
GameEvent_Goal::_Internal::location(const GameEvent_Goal* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_Goal::_Internal::kick_location(const GameEvent_Goal* msg) {
  return *msg->kick_location_;
}
void GameEvent_Goal::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GameEvent_Goal::clear_kick_location() {
  if (kick_location_ != nullptr) kick_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GameEvent_Goal::GameEvent_Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Goal)
}
GameEvent_Goal::GameEvent_Goal(const GameEvent_Goal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_kick_location()) {
    kick_location_ = new ::Vector2(*from.kick_location_);
  } else {
    kick_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_robots_by_team_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(num_robots_by_team_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.Goal)
}

void GameEvent_Goal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_robots_by_team_) -
      reinterpret_cast<char*>(&location_)) + sizeof(num_robots_by_team_));
}

GameEvent_Goal::~GameEvent_Goal() {
  // @@protoc_insertion_point(destructor:GameEvent.Goal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_Goal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_Goal::ArenaDtor(void* object) {
  GameEvent_Goal* _this = reinterpret_cast< GameEvent_Goal* >(object);
  (void)_this;
}
void GameEvent_Goal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_Goal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_Goal& GameEvent_Goal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_Goal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Goal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kick_location_ != nullptr);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_touch_by_team_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(last_touch_by_team_));
  }
  num_robots_by_team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_Goal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 kicking_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kicking_bot(&has_bits);
          kicking_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_ball_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_ball_height(&has_bits);
          max_ball_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .Team kicking_team = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_kicking_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 num_robots_by_team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_robots_by_team(&has_bits);
          num_robots_by_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_touch_by_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_touch_by_team(&has_bits);
          last_touch_by_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.Goal.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_Goal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Goal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kicking_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kick_location(this), target, stream);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_ball_height(), target);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_kicking_team(), target);
  }

  // optional uint32 num_robots_by_team = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_robots_by_team(), target);
  }

  // optional uint64 last_touch_by_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_last_touch_by_team(), target);
  }

  // optional string message = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.Goal.message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Goal)
  return target;
}

size_t GameEvent_Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Goal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 kicking_bot = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kicking_bot());
    }

    // optional float max_ball_height = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .Team kicking_team = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kicking_team());
    }

    // optional uint64 last_touch_by_team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_touch_by_team());
    }

  }
  // optional uint32 num_robots_by_team = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_robots_by_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_Goal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Goal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_Goal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Goal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Goal)
    MergeFrom(*source);
  }
}

void GameEvent_Goal::MergeFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kick_location()->::Vector2::MergeFrom(from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000008u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      kicking_bot_ = from.kicking_bot_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_ball_height_ = from.max_ball_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      kicking_team_ = from.kicking_team_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_touch_by_team_ = from.last_touch_by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_num_robots_by_team(from._internal_num_robots_by_team());
  }
}

void GameEvent_Goal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Goal::CopyFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Goal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_Goal::InternalSwap(GameEvent_Goal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_Goal, num_robots_by_team_)
      + sizeof(GameEvent_Goal::num_robots_by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_Goal, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_Goal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_IndirectGoal::InitAsDefaultInstance() {
  ::_GameEvent_IndirectGoal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_IndirectGoal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_IndirectGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_IndirectGoal>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_IndirectGoal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_IndirectGoal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_IndirectGoal::_Internal::location(const GameEvent_IndirectGoal* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_IndirectGoal::_Internal::kick_location(const GameEvent_IndirectGoal* msg) {
  return *msg->kick_location_;
}
void GameEvent_IndirectGoal::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_IndirectGoal::clear_kick_location() {
  if (kick_location_ != nullptr) kick_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.IndirectGoal)
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_kick_location()) {
    kick_location_ = new ::Vector2(*from.kick_location_);
  } else {
    kick_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.IndirectGoal)
}

void GameEvent_IndirectGoal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_IndirectGoal::~GameEvent_IndirectGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.IndirectGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_IndirectGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_IndirectGoal::ArenaDtor(void* object) {
  GameEvent_IndirectGoal* _this = reinterpret_cast< GameEvent_IndirectGoal* >(object);
  (void)_this;
}
void GameEvent_IndirectGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_IndirectGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_IndirectGoal& GameEvent_IndirectGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_IndirectGoal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_IndirectGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.IndirectGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != nullptr);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_IndirectGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_IndirectGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.IndirectGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kick_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.IndirectGoal)
  return target;
}

size_t GameEvent_IndirectGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.IndirectGoal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_IndirectGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_IndirectGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_IndirectGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.IndirectGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.IndirectGoal)
    MergeFrom(*source);
  }
}

void GameEvent_IndirectGoal::MergeFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_kick_location()->::Vector2::MergeFrom(from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_IndirectGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_IndirectGoal::CopyFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_IndirectGoal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_IndirectGoal::InternalSwap(GameEvent_IndirectGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, by_bot_)
      + sizeof(GameEvent_IndirectGoal::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_IndirectGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_ChippedGoal::InitAsDefaultInstance() {
  ::_GameEvent_ChippedGoal_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_ChippedGoal_default_instance_._instance.get_mutable()->kick_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_ChippedGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ChippedGoal>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_ChippedGoal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_ChippedGoal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_ball_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_ChippedGoal::_Internal::location(const GameEvent_ChippedGoal* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_ChippedGoal::_Internal::kick_location(const GameEvent_ChippedGoal* msg) {
  return *msg->kick_location_;
}
void GameEvent_ChippedGoal::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_ChippedGoal::clear_kick_location() {
  if (kick_location_ != nullptr) kick_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChippedGoal)
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_kick_location()) {
    kick_location_ = new ::Vector2(*from.kick_location_);
  } else {
    kick_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_ball_height_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(max_ball_height_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChippedGoal)
}

void GameEvent_ChippedGoal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ball_height_) -
      reinterpret_cast<char*>(&location_)) + sizeof(max_ball_height_));
}

GameEvent_ChippedGoal::~GameEvent_ChippedGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.ChippedGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_ChippedGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete kick_location_;
}

void GameEvent_ChippedGoal::ArenaDtor(void* object) {
  GameEvent_ChippedGoal* _this = reinterpret_cast< GameEvent_ChippedGoal* >(object);
  (void)_this;
}
void GameEvent_ChippedGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_ChippedGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_ChippedGoal& GameEvent_ChippedGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ChippedGoal_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_ChippedGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChippedGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kick_location_ != nullptr);
      kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ball_height_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(max_ball_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ChippedGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_ball_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_ball_height(&has_bits);
          max_ball_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_ChippedGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChippedGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kick_location(this), target, stream);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_ball_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChippedGoal)
  return target;
}

size_t GameEvent_ChippedGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChippedGoal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kick_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float max_ball_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_ChippedGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ChippedGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_ChippedGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ChippedGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ChippedGoal)
    MergeFrom(*source);
  }
}

void GameEvent_ChippedGoal::MergeFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_kick_location()->::Vector2::MergeFrom(from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ball_height_ = from.max_ball_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_ChippedGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ChippedGoal::CopyFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChippedGoal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_ChippedGoal::InternalSwap(GameEvent_ChippedGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, max_ball_height_)
      + sizeof(GameEvent_ChippedGoal::max_ball_height_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ChippedGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotTooFastInStop::InitAsDefaultInstance() {
  ::_GameEvent_BotTooFastInStop_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotTooFastInStop::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotTooFastInStop>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotTooFastInStop* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotTooFastInStop::_Internal::location(const GameEvent_BotTooFastInStop* msg) {
  return *msg->location_;
}
void GameEvent_BotTooFastInStop::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTooFastInStop)
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTooFastInStop)
}

void GameEvent_BotTooFastInStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&location_)) + sizeof(speed_));
}

GameEvent_BotTooFastInStop::~GameEvent_BotTooFastInStop() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTooFastInStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotTooFastInStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotTooFastInStop::ArenaDtor(void* object) {
  GameEvent_BotTooFastInStop* _this = reinterpret_cast< GameEvent_BotTooFastInStop* >(object);
  (void)_this;
}
void GameEvent_BotTooFastInStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotTooFastInStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotTooFastInStop& GameEvent_BotTooFastInStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotTooFastInStop_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotTooFastInStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTooFastInStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotTooFastInStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotTooFastInStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTooFastInStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTooFastInStop)
  return target;
}

size_t GameEvent_BotTooFastInStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTooFastInStop)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotTooFastInStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTooFastInStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotTooFastInStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTooFastInStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTooFastInStop)
    MergeFrom(*source);
  }
}

void GameEvent_BotTooFastInStop::MergeFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTooFastInStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTooFastInStop::CopyFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTooFastInStop::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTooFastInStop::InternalSwap(GameEvent_BotTooFastInStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, speed_)
      + sizeof(GameEvent_BotTooFastInStop::speed_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotTooFastInStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_DefenderTooCloseToKickPoint::InitAsDefaultInstance() {
  ::_GameEvent_DefenderTooCloseToKickPoint_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_DefenderTooCloseToKickPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderTooCloseToKickPoint>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_DefenderTooCloseToKickPoint* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderTooCloseToKickPoint::_Internal::location(const GameEvent_DefenderTooCloseToKickPoint* msg) {
  return *msg->location_;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderTooCloseToKickPoint)
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderTooCloseToKickPoint)
}

void GameEvent_DefenderTooCloseToKickPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderTooCloseToKickPoint::~GameEvent_DefenderTooCloseToKickPoint() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderTooCloseToKickPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_DefenderTooCloseToKickPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_DefenderTooCloseToKickPoint::ArenaDtor(void* object) {
  GameEvent_DefenderTooCloseToKickPoint* _this = reinterpret_cast< GameEvent_DefenderTooCloseToKickPoint* >(object);
  (void)_this;
}
void GameEvent_DefenderTooCloseToKickPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_DefenderTooCloseToKickPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_DefenderTooCloseToKickPoint& GameEvent_DefenderTooCloseToKickPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_DefenderTooCloseToKickPoint_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_DefenderTooCloseToKickPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderTooCloseToKickPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderTooCloseToKickPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_DefenderTooCloseToKickPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderTooCloseToKickPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderTooCloseToKickPoint)
  return target;
}

size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderTooCloseToKickPoint)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderTooCloseToKickPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_DefenderTooCloseToKickPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderTooCloseToKickPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderTooCloseToKickPoint)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderTooCloseToKickPoint::MergeFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderTooCloseToKickPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderTooCloseToKickPoint::InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, distance_)
      + sizeof(GameEvent_DefenderTooCloseToKickPoint::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderTooCloseToKickPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotCrashDrawn::InitAsDefaultInstance() {
  ::_GameEvent_BotCrashDrawn_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotCrashDrawn::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotCrashDrawn>()._has_bits_);
  static void set_has_bot_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotCrashDrawn* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crash_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::Vector2&
GameEvent_BotCrashDrawn::_Internal::location(const GameEvent_BotCrashDrawn* msg) {
  return *msg->location_;
}
void GameEvent_BotCrashDrawn::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashDrawn)
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&bot_yellow_, &from.bot_yellow_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&bot_yellow_)) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashDrawn)
}

void GameEvent_BotCrashDrawn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&location_)) + sizeof(crash_angle_));
}

GameEvent_BotCrashDrawn::~GameEvent_BotCrashDrawn() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashDrawn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotCrashDrawn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotCrashDrawn::ArenaDtor(void* object) {
  GameEvent_BotCrashDrawn* _this = reinterpret_cast< GameEvent_BotCrashDrawn* >(object);
  (void)_this;
}
void GameEvent_BotCrashDrawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotCrashDrawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotCrashDrawn& GameEvent_BotCrashDrawn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotCrashDrawn_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotCrashDrawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashDrawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&bot_yellow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_angle_) -
        reinterpret_cast<char*>(&bot_yellow_)) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotCrashDrawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 bot_yellow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bot_yellow(&has_bits);
          bot_yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_blue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bot_blue(&has_bits);
          bot_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float crash_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_crash_speed(&has_bits);
          crash_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_speed_diff(&has_bits);
          speed_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crash_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_crash_angle(&has_bits);
          crash_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotCrashDrawn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashDrawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bot_yellow(), target);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bot_blue(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_crash_speed(), target);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_diff(), target);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_crash_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashDrawn)
  return target;
}

size_t GameEvent_BotCrashDrawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashDrawn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 bot_yellow = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_yellow());
    }

    // optional uint32 bot_blue = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_blue());
    }

    // optional float crash_speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotCrashDrawn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashDrawn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotCrashDrawn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashDrawn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashDrawn)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashDrawn::MergeFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      bot_yellow_ = from.bot_yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_blue_ = from.bot_blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000020u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashDrawn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashDrawn::CopyFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashDrawn::IsInitialized() const {
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashDrawn::InternalSwap(GameEvent_BotCrashDrawn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, crash_angle_)
      + sizeof(GameEvent_BotCrashDrawn::crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotCrashDrawn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotCrashUnique::InitAsDefaultInstance() {
  ::_GameEvent_BotCrashUnique_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotCrashUnique::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotCrashUnique>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_violator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotCrashUnique* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crash_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotCrashUnique::_Internal::location(const GameEvent_BotCrashUnique* msg) {
  return *msg->location_;
}
void GameEvent_BotCrashUnique::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashUnique)
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_angle_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashUnique)
}

void GameEvent_BotCrashUnique::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_angle_) -
      reinterpret_cast<char*>(&location_)) + sizeof(crash_angle_));
}

GameEvent_BotCrashUnique::~GameEvent_BotCrashUnique() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashUnique)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotCrashUnique::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotCrashUnique::ArenaDtor(void* object) {
  GameEvent_BotCrashUnique* _this = reinterpret_cast< GameEvent_BotCrashUnique* >(object);
  (void)_this;
}
void GameEvent_BotCrashUnique::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotCrashUnique::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotCrashUnique& GameEvent_BotCrashUnique::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotCrashUnique_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotCrashUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_angle_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(crash_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotCrashUnique::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 violator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_violator(&has_bits);
          violator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 victim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_victim(&has_bits);
          victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float crash_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_crash_speed(&has_bits);
          crash_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_diff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_speed_diff(&has_bits);
          speed_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crash_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_crash_angle(&has_bits);
          crash_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotCrashUnique::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashUnique)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim(), target);
  }

  // optional .Vector2 location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_crash_speed(), target);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_speed_diff(), target);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_crash_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashUnique)
  return target;
}

size_t GameEvent_BotCrashUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashUnique)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional uint32 violator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_violator());
    }

    // optional uint32 victim = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim());
    }

    // optional float crash_speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotCrashUnique::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotCrashUnique* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotCrashUnique>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotCrashUnique)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotCrashUnique)
    MergeFrom(*source);
  }
}

void GameEvent_BotCrashUnique::MergeFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      crash_speed_ = from.crash_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_diff_ = from.speed_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      crash_angle_ = from.crash_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotCrashUnique::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotCrashUnique::CopyFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashUnique::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashUnique::InternalSwap(GameEvent_BotCrashUnique* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, crash_angle_)
      + sizeof(GameEvent_BotCrashUnique::crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotCrashUnique::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotPushedBot::InitAsDefaultInstance() {
  ::_GameEvent_BotPushedBot_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotPushedBot::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotPushedBot>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_violator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotPushedBot* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pushed_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotPushedBot::_Internal::location(const GameEvent_BotPushedBot* msg) {
  return *msg->location_;
}
void GameEvent_BotPushedBot::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotPushedBot)
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&pushed_distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(pushed_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotPushedBot)
}

void GameEvent_BotPushedBot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pushed_distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(pushed_distance_));
}

GameEvent_BotPushedBot::~GameEvent_BotPushedBot() {
  // @@protoc_insertion_point(destructor:GameEvent.BotPushedBot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotPushedBot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotPushedBot::ArenaDtor(void* object) {
  GameEvent_BotPushedBot* _this = reinterpret_cast< GameEvent_BotPushedBot* >(object);
  (void)_this;
}
void GameEvent_BotPushedBot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotPushedBot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotPushedBot& GameEvent_BotPushedBot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotPushedBot_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotPushedBot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotPushedBot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pushed_distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(pushed_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotPushedBot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 violator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_violator(&has_bits);
          violator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 victim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_victim(&has_bits);
          victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pushed_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pushed_distance(&has_bits);
          pushed_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotPushedBot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotPushedBot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim(), target);
  }

  // optional .Vector2 location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pushed_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotPushedBot)
  return target;
}

size_t GameEvent_BotPushedBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotPushedBot)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 violator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_violator());
    }

    // optional uint32 victim = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim());
    }

    // optional float pushed_distance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotPushedBot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotPushedBot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotPushedBot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotPushedBot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotPushedBot)
    MergeFrom(*source);
  }
}

void GameEvent_BotPushedBot::MergeFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      violator_ = from.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      pushed_distance_ = from.pushed_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotPushedBot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotPushedBot::CopyFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotPushedBot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotPushedBot::InternalSwap(GameEvent_BotPushedBot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, pushed_distance_)
      + sizeof(GameEvent_BotPushedBot::pushed_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotPushedBot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotTippedOver::InitAsDefaultInstance() {
  ::_GameEvent_BotTippedOver_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_BotTippedOver_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotTippedOver::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotTippedOver>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotTippedOver* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& ball_location(const GameEvent_BotTippedOver* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_BotTippedOver::_Internal::location(const GameEvent_BotTippedOver* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_BotTippedOver::_Internal::ball_location(const GameEvent_BotTippedOver* msg) {
  return *msg->ball_location_;
}
void GameEvent_BotTippedOver::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotTippedOver::clear_ball_location() {
  if (ball_location_ != nullptr) ball_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTippedOver)
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vector2(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTippedOver)
}

void GameEvent_BotTippedOver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BotTippedOver::~GameEvent_BotTippedOver() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTippedOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotTippedOver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete ball_location_;
}

void GameEvent_BotTippedOver::ArenaDtor(void* object) {
  GameEvent_BotTippedOver* _this = reinterpret_cast< GameEvent_BotTippedOver* >(object);
  (void)_this;
}
void GameEvent_BotTippedOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotTippedOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotTippedOver& GameEvent_BotTippedOver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotTippedOver_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotTippedOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTippedOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ball_location_ != nullptr);
      ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotTippedOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotTippedOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTippedOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 ball_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ball_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTippedOver)
  return target;
}

size_t GameEvent_BotTippedOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTippedOver)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 ball_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotTippedOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotTippedOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotTippedOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotTippedOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotTippedOver)
    MergeFrom(*source);
  }
}

void GameEvent_BotTippedOver::MergeFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ball_location()->::Vector2::MergeFrom(from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotTippedOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotTippedOver::CopyFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTippedOver::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTippedOver::InternalSwap(GameEvent_BotTippedOver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, by_bot_)
      + sizeof(GameEvent_BotTippedOver::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotTippedOver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotDroppedParts::InitAsDefaultInstance() {
  ::_GameEvent_BotDroppedParts_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_BotDroppedParts_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotDroppedParts::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotDroppedParts>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotDroppedParts* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& ball_location(const GameEvent_BotDroppedParts* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_BotDroppedParts::_Internal::location(const GameEvent_BotDroppedParts* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_BotDroppedParts::_Internal::ball_location(const GameEvent_BotDroppedParts* msg) {
  return *msg->ball_location_;
}
void GameEvent_BotDroppedParts::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDroppedParts::clear_ball_location() {
  if (ball_location_ != nullptr) ball_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotDroppedParts::GameEvent_BotDroppedParts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotDroppedParts)
}
GameEvent_BotDroppedParts::GameEvent_BotDroppedParts(const GameEvent_BotDroppedParts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vector2(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDroppedParts)
}

void GameEvent_BotDroppedParts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BotDroppedParts::~GameEvent_BotDroppedParts() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDroppedParts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotDroppedParts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete ball_location_;
}

void GameEvent_BotDroppedParts::ArenaDtor(void* object) {
  GameEvent_BotDroppedParts* _this = reinterpret_cast< GameEvent_BotDroppedParts* >(object);
  (void)_this;
}
void GameEvent_BotDroppedParts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotDroppedParts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotDroppedParts& GameEvent_BotDroppedParts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotDroppedParts_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotDroppedParts::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDroppedParts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ball_location_ != nullptr);
      ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotDroppedParts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotDroppedParts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDroppedParts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional .Vector2 ball_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ball_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDroppedParts)
  return target;
}

size_t GameEvent_BotDroppedParts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDroppedParts)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 ball_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotDroppedParts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotDroppedParts)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotDroppedParts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotDroppedParts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotDroppedParts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotDroppedParts)
    MergeFrom(*source);
  }
}

void GameEvent_BotDroppedParts::MergeFrom(const GameEvent_BotDroppedParts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDroppedParts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ball_location()->::Vector2::MergeFrom(from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotDroppedParts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotDroppedParts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotDroppedParts::CopyFrom(const GameEvent_BotDroppedParts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDroppedParts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotDroppedParts::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDroppedParts::InternalSwap(GameEvent_BotDroppedParts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, by_bot_)
      + sizeof(GameEvent_BotDroppedParts::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotDroppedParts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_DefenderInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_DefenderInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_DefenderInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderInDefenseArea>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_DefenderInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderInDefenseArea::_Internal::location(const GameEvent_DefenderInDefenseArea* msg) {
  return *msg->location_;
}
void GameEvent_DefenderInDefenseArea::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseArea)
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseArea)
}

void GameEvent_DefenderInDefenseArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderInDefenseArea::~GameEvent_DefenderInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_DefenderInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_DefenderInDefenseArea::ArenaDtor(void* object) {
  GameEvent_DefenderInDefenseArea* _this = reinterpret_cast< GameEvent_DefenderInDefenseArea* >(object);
  (void)_this;
}
void GameEvent_DefenderInDefenseArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_DefenderInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_DefenderInDefenseArea& GameEvent_DefenderInDefenseArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_DefenderInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_DefenderInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderInDefenseArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_DefenderInDefenseArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseArea)
  return target;
}

size_t GameEvent_DefenderInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_DefenderInDefenseArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseArea::MergeFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseArea::InternalSwap(GameEvent_DefenderInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, distance_)
      + sizeof(GameEvent_DefenderInDefenseArea::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderInDefenseArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_DefenderInDefenseAreaPartially::InitAsDefaultInstance() {
  ::_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_DefenderInDefenseAreaPartially::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderInDefenseAreaPartially>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_DefenderInDefenseAreaPartially* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& ball_location(const GameEvent_DefenderInDefenseAreaPartially* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderInDefenseAreaPartially::_Internal::location(const GameEvent_DefenderInDefenseAreaPartially* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_DefenderInDefenseAreaPartially::_Internal::ball_location(const GameEvent_DefenderInDefenseAreaPartially* msg) {
  return *msg->ball_location_;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_ball_location() {
  if (ball_location_ != nullptr) ball_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseAreaPartially)
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vector2(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseAreaPartially)
}

void GameEvent_DefenderInDefenseAreaPartially::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_DefenderInDefenseAreaPartially::~GameEvent_DefenderInDefenseAreaPartially() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseAreaPartially)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_DefenderInDefenseAreaPartially::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete ball_location_;
}

void GameEvent_DefenderInDefenseAreaPartially::ArenaDtor(void* object) {
  GameEvent_DefenderInDefenseAreaPartially* _this = reinterpret_cast< GameEvent_DefenderInDefenseAreaPartially* >(object);
  (void)_this;
}
void GameEvent_DefenderInDefenseAreaPartially::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_DefenderInDefenseAreaPartially::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_DefenderInDefenseAreaPartially& GameEvent_DefenderInDefenseAreaPartially::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_DefenderInDefenseAreaPartially_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_DefenderInDefenseAreaPartially::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseAreaPartially)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ball_location_ != nullptr);
      ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderInDefenseAreaPartially::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_DefenderInDefenseAreaPartially::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseAreaPartially)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional .Vector2 ball_location = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ball_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseAreaPartially)
  return target;
}

size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseAreaPartially)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 ball_location = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_DefenderInDefenseAreaPartially* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_DefenderInDefenseAreaPartially>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.DefenderInDefenseAreaPartially)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.DefenderInDefenseAreaPartially)
    MergeFrom(*source);
  }
}

void GameEvent_DefenderInDefenseAreaPartially::MergeFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ball_location()->::Vector2::MergeFrom(from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseAreaPartially::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseAreaPartially::InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, distance_)
      + sizeof(GameEvent_DefenderInDefenseAreaPartially::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderInDefenseAreaPartially::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_AttackerTouchedBallInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_AttackerTouchedBallInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTouchedBallInDefenseArea>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTouchedBallInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTouchedBallInDefenseArea::_Internal::location(const GameEvent_AttackerTouchedBallInDefenseArea* msg) {
  return *msg->location_;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_AttackerTouchedBallInDefenseArea::~GameEvent_AttackerTouchedBallInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedBallInDefenseArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_AttackerTouchedBallInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerTouchedBallInDefenseArea::ArenaDtor(void* object) {
  GameEvent_AttackerTouchedBallInDefenseArea* _this = reinterpret_cast< GameEvent_AttackerTouchedBallInDefenseArea* >(object);
  (void)_this;
}
void GameEvent_AttackerTouchedBallInDefenseArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_AttackerTouchedBallInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_AttackerTouchedBallInDefenseArea& GameEvent_AttackerTouchedBallInDefenseArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_AttackerTouchedBallInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTouchedBallInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTouchedBallInDefenseArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_AttackerTouchedBallInDefenseArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedBallInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedBallInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedBallInDefenseArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_AttackerTouchedBallInDefenseArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedBallInDefenseArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedBallInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedBallInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedBallInDefenseArea::InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, distance_)
      + sizeof(GameEvent_AttackerTouchedBallInDefenseArea::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTouchedBallInDefenseArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotKickedBallTooFast::InitAsDefaultInstance() {
  ::_GameEvent_BotKickedBallTooFast_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotKickedBallTooFast::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotKickedBallTooFast>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotKickedBallTooFast* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_ball_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chipped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotKickedBallTooFast::_Internal::location(const GameEvent_BotKickedBallTooFast* msg) {
  return *msg->location_;
}
void GameEvent_BotKickedBallTooFast::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotKickedBallTooFast)
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&chipped_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(chipped_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotKickedBallTooFast)
}

void GameEvent_BotKickedBallTooFast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chipped_) -
      reinterpret_cast<char*>(&location_)) + sizeof(chipped_));
}

GameEvent_BotKickedBallTooFast::~GameEvent_BotKickedBallTooFast() {
  // @@protoc_insertion_point(destructor:GameEvent.BotKickedBallTooFast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotKickedBallTooFast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotKickedBallTooFast::ArenaDtor(void* object) {
  GameEvent_BotKickedBallTooFast* _this = reinterpret_cast< GameEvent_BotKickedBallTooFast* >(object);
  (void)_this;
}
void GameEvent_BotKickedBallTooFast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotKickedBallTooFast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotKickedBallTooFast& GameEvent_BotKickedBallTooFast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotKickedBallTooFast_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotKickedBallTooFast::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotKickedBallTooFast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chipped_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(chipped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotKickedBallTooFast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float initial_ball_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_initial_ball_speed(&has_bits);
          initial_ball_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool chipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chipped(&has_bits);
          chipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotKickedBallTooFast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotKickedBallTooFast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_initial_ball_speed(), target);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_chipped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotKickedBallTooFast)
  return target;
}

size_t GameEvent_BotKickedBallTooFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotKickedBallTooFast)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float initial_ball_speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool chipped = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotKickedBallTooFast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotKickedBallTooFast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotKickedBallTooFast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotKickedBallTooFast)
    MergeFrom(*source);
  }
}

void GameEvent_BotKickedBallTooFast::MergeFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ball_speed_ = from.initial_ball_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      chipped_ = from.chipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotKickedBallTooFast::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotKickedBallTooFast::InternalSwap(GameEvent_BotKickedBallTooFast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, chipped_)
      + sizeof(GameEvent_BotKickedBallTooFast::chipped_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotKickedBallTooFast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotDribbledBallTooFar::InitAsDefaultInstance() {
  ::_GameEvent_BotDribbledBallTooFar_default_instance_._instance.get_mutable()->start_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_BotDribbledBallTooFar_default_instance_._instance.get_mutable()->end_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotDribbledBallTooFar::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotDribbledBallTooFar>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& start(const GameEvent_BotDribbledBallTooFar* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& end(const GameEvent_BotDribbledBallTooFar* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_BotDribbledBallTooFar::_Internal::start(const GameEvent_BotDribbledBallTooFar* msg) {
  return *msg->start_;
}
const ::Vector2&
GameEvent_BotDribbledBallTooFar::_Internal::end(const GameEvent_BotDribbledBallTooFar* msg) {
  return *msg->end_;
}
void GameEvent_BotDribbledBallTooFar::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDribbledBallTooFar::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotDribbledBallTooFar)
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::Vector2(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::Vector2(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDribbledBallTooFar)
}

void GameEvent_BotDribbledBallTooFar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&start_)) + sizeof(by_bot_));
}

GameEvent_BotDribbledBallTooFar::~GameEvent_BotDribbledBallTooFar() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDribbledBallTooFar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotDribbledBallTooFar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void GameEvent_BotDribbledBallTooFar::ArenaDtor(void* object) {
  GameEvent_BotDribbledBallTooFar* _this = reinterpret_cast< GameEvent_BotDribbledBallTooFar* >(object);
  (void)_this;
}
void GameEvent_BotDribbledBallTooFar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotDribbledBallTooFar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotDribbledBallTooFar& GameEvent_BotDribbledBallTooFar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotDribbledBallTooFar_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotDribbledBallTooFar::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDribbledBallTooFar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotDribbledBallTooFar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotDribbledBallTooFar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDribbledBallTooFar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // optional .Vector2 end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDribbledBallTooFar)
  return target;
}

size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDribbledBallTooFar)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .Vector2 end = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotDribbledBallTooFar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotDribbledBallTooFar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotDribbledBallTooFar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotDribbledBallTooFar)
    MergeFrom(*source);
  }
}

void GameEvent_BotDribbledBallTooFar::MergeFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::Vector2::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::Vector2::MergeFrom(from._internal_end());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotDribbledBallTooFar::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_start()) {
    if (!start_->IsInitialized()) return false;
  }
  if (_internal_has_end()) {
    if (!end_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDribbledBallTooFar::InternalSwap(GameEvent_BotDribbledBallTooFar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, by_bot_)
      + sizeof(GameEvent_BotDribbledBallTooFar::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotDribbledBallTooFar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_AttackerTouchedOpponentInDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_AttackerTouchedOpponentInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTouchedOpponentInDefenseArea>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTouchedOpponentInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTouchedOpponentInDefenseArea::_Internal::location(const GameEvent_AttackerTouchedOpponentInDefenseArea* msg) {
  return *msg->location_;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&victim_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(victim_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&victim_) -
      reinterpret_cast<char*>(&location_)) + sizeof(victim_));
}

GameEvent_AttackerTouchedOpponentInDefenseArea::~GameEvent_AttackerTouchedOpponentInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::ArenaDtor(void* object) {
  GameEvent_AttackerTouchedOpponentInDefenseArea* _this = reinterpret_cast< GameEvent_AttackerTouchedOpponentInDefenseArea* >(object);
  (void)_this;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTouchedOpponentInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&victim_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(victim_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_victim(&has_bits);
          victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_victim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional uint32 victim = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTouchedOpponentInDefenseArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_AttackerTouchedOpponentInDefenseArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTouchedOpponentInDefenseArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTouchedOpponentInDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      victim_ = from.victim_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, victim_)
      + sizeof(GameEvent_AttackerTouchedOpponentInDefenseArea::victim_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTouchedOpponentInDefenseArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_AttackerDoubleTouchedBall::InitAsDefaultInstance() {
  ::_GameEvent_AttackerDoubleTouchedBall_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_AttackerDoubleTouchedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerDoubleTouchedBall>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_AttackerDoubleTouchedBall* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerDoubleTouchedBall::_Internal::location(const GameEvent_AttackerDoubleTouchedBall* msg) {
  return *msg->location_;
}
void GameEvent_AttackerDoubleTouchedBall::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerDoubleTouchedBall)
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerDoubleTouchedBall)
}

void GameEvent_AttackerDoubleTouchedBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_AttackerDoubleTouchedBall::~GameEvent_AttackerDoubleTouchedBall() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerDoubleTouchedBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_AttackerDoubleTouchedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_AttackerDoubleTouchedBall::ArenaDtor(void* object) {
  GameEvent_AttackerDoubleTouchedBall* _this = reinterpret_cast< GameEvent_AttackerDoubleTouchedBall* >(object);
  (void)_this;
}
void GameEvent_AttackerDoubleTouchedBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_AttackerDoubleTouchedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_AttackerDoubleTouchedBall& GameEvent_AttackerDoubleTouchedBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_AttackerDoubleTouchedBall_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_AttackerDoubleTouchedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerDoubleTouchedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerDoubleTouchedBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_AttackerDoubleTouchedBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerDoubleTouchedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerDoubleTouchedBall)
  return target;
}

size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerDoubleTouchedBall)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerDoubleTouchedBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_AttackerDoubleTouchedBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerDoubleTouchedBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerDoubleTouchedBall)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerDoubleTouchedBall::MergeFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerDoubleTouchedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerDoubleTouchedBall::InternalSwap(GameEvent_AttackerDoubleTouchedBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, by_bot_)
      + sizeof(GameEvent_AttackerDoubleTouchedBall::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerDoubleTouchedBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_AttackerTooCloseToDefenseArea::InitAsDefaultInstance() {
  ::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_AttackerTooCloseToDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTooCloseToDefenseArea>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTooCloseToDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& ball_location(const GameEvent_AttackerTooCloseToDefenseArea* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTooCloseToDefenseArea::_Internal::location(const GameEvent_AttackerTooCloseToDefenseArea* msg) {
  return *msg->location_;
}
const ::Vector2&
GameEvent_AttackerTooCloseToDefenseArea::_Internal::ball_location(const GameEvent_AttackerTooCloseToDefenseArea* msg) {
  return *msg->ball_location_;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_ball_location() {
  if (ball_location_ != nullptr) ball_location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vector2(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&location_)) + sizeof(distance_));
}

GameEvent_AttackerTooCloseToDefenseArea::~GameEvent_AttackerTooCloseToDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTooCloseToDefenseArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_AttackerTooCloseToDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete ball_location_;
}

void GameEvent_AttackerTooCloseToDefenseArea::ArenaDtor(void* object) {
  GameEvent_AttackerTooCloseToDefenseArea* _this = reinterpret_cast< GameEvent_AttackerTooCloseToDefenseArea* >(object);
  (void)_this;
}
void GameEvent_AttackerTooCloseToDefenseArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_AttackerTooCloseToDefenseArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_AttackerTooCloseToDefenseArea& GameEvent_AttackerTooCloseToDefenseArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_AttackerTooCloseToDefenseArea_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_AttackerTooCloseToDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ball_location_ != nullptr);
      ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTooCloseToDefenseArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_AttackerTooCloseToDefenseArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional .Vector2 ball_location = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ball_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTooCloseToDefenseArea)
  return target;
}

size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTooCloseToDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .Vector2 ball_location = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_AttackerTooCloseToDefenseArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_AttackerTooCloseToDefenseArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.AttackerTooCloseToDefenseArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.AttackerTooCloseToDefenseArea)
    MergeFrom(*source);
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ball_location()->::Vector2::MergeFrom(from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTooCloseToDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTooCloseToDefenseArea::InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, distance_)
      + sizeof(GameEvent_AttackerTooCloseToDefenseArea::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTooCloseToDefenseArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotHeldBallDeliberately::InitAsDefaultInstance() {
  ::_GameEvent_BotHeldBallDeliberately_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotHeldBallDeliberately::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotHeldBallDeliberately>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotHeldBallDeliberately* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotHeldBallDeliberately::_Internal::location(const GameEvent_BotHeldBallDeliberately* msg) {
  return *msg->location_;
}
void GameEvent_BotHeldBallDeliberately::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotHeldBallDeliberately)
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotHeldBallDeliberately)
}

void GameEvent_BotHeldBallDeliberately::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&location_)) + sizeof(duration_));
}

GameEvent_BotHeldBallDeliberately::~GameEvent_BotHeldBallDeliberately() {
  // @@protoc_insertion_point(destructor:GameEvent.BotHeldBallDeliberately)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotHeldBallDeliberately::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotHeldBallDeliberately::ArenaDtor(void* object) {
  GameEvent_BotHeldBallDeliberately* _this = reinterpret_cast< GameEvent_BotHeldBallDeliberately* >(object);
  (void)_this;
}
void GameEvent_BotHeldBallDeliberately::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotHeldBallDeliberately::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotHeldBallDeliberately& GameEvent_BotHeldBallDeliberately::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotHeldBallDeliberately_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotHeldBallDeliberately::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotHeldBallDeliberately)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotHeldBallDeliberately::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotHeldBallDeliberately::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotHeldBallDeliberately)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotHeldBallDeliberately)
  return target;
}

size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotHeldBallDeliberately)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_by_bot());
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotHeldBallDeliberately* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotHeldBallDeliberately>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotHeldBallDeliberately)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotHeldBallDeliberately)
    MergeFrom(*source);
  }
}

void GameEvent_BotHeldBallDeliberately::MergeFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotHeldBallDeliberately::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotHeldBallDeliberately::InternalSwap(GameEvent_BotHeldBallDeliberately* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, duration_)
      + sizeof(GameEvent_BotHeldBallDeliberately::duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotHeldBallDeliberately::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotInterferedPlacement::InitAsDefaultInstance() {
  ::_GameEvent_BotInterferedPlacement_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BotInterferedPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotInterferedPlacement>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotInterferedPlacement* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotInterferedPlacement::_Internal::location(const GameEvent_BotInterferedPlacement* msg) {
  return *msg->location_;
}
void GameEvent_BotInterferedPlacement::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotInterferedPlacement)
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_bot_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotInterferedPlacement)
}

void GameEvent_BotInterferedPlacement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_bot_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_bot_));
}

GameEvent_BotInterferedPlacement::~GameEvent_BotInterferedPlacement() {
  // @@protoc_insertion_point(destructor:GameEvent.BotInterferedPlacement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotInterferedPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BotInterferedPlacement::ArenaDtor(void* object) {
  GameEvent_BotInterferedPlacement* _this = reinterpret_cast< GameEvent_BotInterferedPlacement* >(object);
  (void)_this;
}
void GameEvent_BotInterferedPlacement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotInterferedPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotInterferedPlacement& GameEvent_BotInterferedPlacement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotInterferedPlacement_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotInterferedPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotInterferedPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&by_bot_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(by_bot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotInterferedPlacement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotInterferedPlacement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotInterferedPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotInterferedPlacement)
  return target;
}

size_t GameEvent_BotInterferedPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotInterferedPlacement)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_by_bot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotInterferedPlacement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotInterferedPlacement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotInterferedPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotInterferedPlacement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotInterferedPlacement)
    MergeFrom(*source);
  }
}

void GameEvent_BotInterferedPlacement::MergeFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      by_bot_ = from.by_bot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BotInterferedPlacement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotInterferedPlacement::CopyFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotInterferedPlacement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotInterferedPlacement::InternalSwap(GameEvent_BotInterferedPlacement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, by_bot_)
      + sizeof(GameEvent_BotInterferedPlacement::by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotInterferedPlacement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_MultipleCards::InitAsDefaultInstance() {
}
class GameEvent_MultipleCards::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultipleCards>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleCards::GameEvent_MultipleCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleCards)
}
GameEvent_MultipleCards::GameEvent_MultipleCards(const GameEvent_MultipleCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleCards)
}

void GameEvent_MultipleCards::SharedCtor() {
  by_team_ = 0;
}

GameEvent_MultipleCards::~GameEvent_MultipleCards() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_MultipleCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_MultipleCards::ArenaDtor(void* object) {
  GameEvent_MultipleCards* _this = reinterpret_cast< GameEvent_MultipleCards* >(object);
  (void)_this;
}
void GameEvent_MultipleCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_MultipleCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_MultipleCards& GameEvent_MultipleCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_MultipleCards_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_MultipleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultipleCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_MultipleCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleCards)
  return target;
}

size_t GameEvent_MultipleCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleCards)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultipleCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_MultipleCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleCards)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleCards::MergeFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_MultipleCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleCards::CopyFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleCards::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_MultipleCards::InternalSwap(GameEvent_MultipleCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultipleCards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_MultipleFouls::InitAsDefaultInstance() {
}
class GameEvent_MultipleFouls::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultipleFouls>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleFouls::GameEvent_MultipleFouls(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  caused_game_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleFouls)
}
GameEvent_MultipleFouls::GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      caused_game_events_(from.caused_game_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleFouls)
}

void GameEvent_MultipleFouls::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base);
  by_team_ = 0;
}

GameEvent_MultipleFouls::~GameEvent_MultipleFouls() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleFouls)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_MultipleFouls::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_MultipleFouls::ArenaDtor(void* object) {
  GameEvent_MultipleFouls* _this = reinterpret_cast< GameEvent_MultipleFouls* >(object);
  (void)_this;
}
void GameEvent_MultipleFouls::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_MultipleFouls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_MultipleFouls& GameEvent_MultipleFouls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_MultipleFouls::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleFouls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caused_game_events_.Clear();
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultipleFouls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .GameEvent caused_game_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caused_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_MultipleFouls::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleFouls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // repeated .GameEvent caused_game_events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caused_game_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_caused_game_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleFouls)
  return target;
}

size_t GameEvent_MultipleFouls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleFouls)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent caused_game_events = 2;
  total_size += 1UL * this->_internal_caused_game_events_size();
  for (const auto& msg : this->caused_game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultipleFouls::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultipleFouls* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_MultipleFouls>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultipleFouls)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultipleFouls)
    MergeFrom(*source);
  }
}

void GameEvent_MultipleFouls::MergeFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caused_game_events_.MergeFrom(from.caused_game_events_);
  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_MultipleFouls::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultipleFouls::CopyFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleFouls::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(caused_game_events_)) return false;
  return true;
}

void GameEvent_MultipleFouls::InternalSwap(GameEvent_MultipleFouls* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caused_game_events_.InternalSwap(&other->caused_game_events_);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultipleFouls::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_MultiplePlacementFailures::InitAsDefaultInstance() {
}
class GameEvent_MultiplePlacementFailures::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultiplePlacementFailures>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultiplePlacementFailures)
}
GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultiplePlacementFailures)
}

void GameEvent_MultiplePlacementFailures::SharedCtor() {
  by_team_ = 0;
}

GameEvent_MultiplePlacementFailures::~GameEvent_MultiplePlacementFailures() {
  // @@protoc_insertion_point(destructor:GameEvent.MultiplePlacementFailures)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_MultiplePlacementFailures::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_MultiplePlacementFailures::ArenaDtor(void* object) {
  GameEvent_MultiplePlacementFailures* _this = reinterpret_cast< GameEvent_MultiplePlacementFailures* >(object);
  (void)_this;
}
void GameEvent_MultiplePlacementFailures::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_MultiplePlacementFailures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_MultiplePlacementFailures& GameEvent_MultiplePlacementFailures::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_MultiplePlacementFailures_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_MultiplePlacementFailures::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultiplePlacementFailures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultiplePlacementFailures::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_MultiplePlacementFailures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultiplePlacementFailures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultiplePlacementFailures)
  return target;
}

size_t GameEvent_MultiplePlacementFailures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultiplePlacementFailures)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_MultiplePlacementFailures* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_MultiplePlacementFailures>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.MultiplePlacementFailures)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.MultiplePlacementFailures)
    MergeFrom(*source);
  }
}

void GameEvent_MultiplePlacementFailures::MergeFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultiplePlacementFailures::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_MultiplePlacementFailures::InternalSwap(GameEvent_MultiplePlacementFailures* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultiplePlacementFailures::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_KickTimeout::InitAsDefaultInstance() {
  ::_GameEvent_KickTimeout_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_KickTimeout::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_KickTimeout>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_KickTimeout* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_KickTimeout::_Internal::location(const GameEvent_KickTimeout* msg) {
  return *msg->location_;
}
void GameEvent_KickTimeout::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_KickTimeout::GameEvent_KickTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KickTimeout)
}
GameEvent_KickTimeout::GameEvent_KickTimeout(const GameEvent_KickTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KickTimeout)
}

void GameEvent_KickTimeout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&location_)) + sizeof(time_));
}

GameEvent_KickTimeout::~GameEvent_KickTimeout() {
  // @@protoc_insertion_point(destructor:GameEvent.KickTimeout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_KickTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_KickTimeout::ArenaDtor(void* object) {
  GameEvent_KickTimeout* _this = reinterpret_cast< GameEvent_KickTimeout* >(object);
  (void)_this;
}
void GameEvent_KickTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_KickTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_KickTimeout& GameEvent_KickTimeout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_KickTimeout_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_KickTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KickTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_KickTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_KickTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KickTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KickTimeout)
  return target;
}

size_t GameEvent_KickTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KickTimeout)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_KickTimeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KickTimeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_KickTimeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KickTimeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KickTimeout)
    MergeFrom(*source);
  }
}

void GameEvent_KickTimeout::MergeFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KickTimeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KickTimeout::CopyFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KickTimeout::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KickTimeout::InternalSwap(GameEvent_KickTimeout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, time_)
      + sizeof(GameEvent_KickTimeout::time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_KickTimeout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_NoProgressInGame::InitAsDefaultInstance() {
  ::_GameEvent_NoProgressInGame_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_NoProgressInGame::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_NoProgressInGame>()._has_bits_);
  static const ::Vector2& location(const GameEvent_NoProgressInGame* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Vector2&
GameEvent_NoProgressInGame::_Internal::location(const GameEvent_NoProgressInGame* msg) {
  return *msg->location_;
}
void GameEvent_NoProgressInGame::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.NoProgressInGame)
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.NoProgressInGame)
}

void GameEvent_NoProgressInGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&location_)) + sizeof(time_));
}

GameEvent_NoProgressInGame::~GameEvent_NoProgressInGame() {
  // @@protoc_insertion_point(destructor:GameEvent.NoProgressInGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_NoProgressInGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_NoProgressInGame::ArenaDtor(void* object) {
  GameEvent_NoProgressInGame* _this = reinterpret_cast< GameEvent_NoProgressInGame* >(object);
  (void)_this;
}
void GameEvent_NoProgressInGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_NoProgressInGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_NoProgressInGame& GameEvent_NoProgressInGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_NoProgressInGame_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_NoProgressInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.NoProgressInGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_NoProgressInGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Vector2 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_NoProgressInGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.NoProgressInGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector2 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.NoProgressInGame)
  return target;
}

size_t GameEvent_NoProgressInGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.NoProgressInGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional float time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_NoProgressInGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_NoProgressInGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_NoProgressInGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.NoProgressInGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.NoProgressInGame)
    MergeFrom(*source);
  }
}

void GameEvent_NoProgressInGame::MergeFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_NoProgressInGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_NoProgressInGame::CopyFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_NoProgressInGame::IsInitialized() const {
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_NoProgressInGame::InternalSwap(GameEvent_NoProgressInGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, time_)
      + sizeof(GameEvent_NoProgressInGame::time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_NoProgressInGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_PlacementFailed::InitAsDefaultInstance() {
}
class GameEvent_PlacementFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PlacementFailed>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remaining_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nearest_own_bot_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementFailed::GameEvent_PlacementFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementFailed)
}
GameEvent_PlacementFailed::GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&nearest_own_bot_distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(nearest_own_bot_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementFailed)
}

void GameEvent_PlacementFailed::SharedCtor() {
  ::memset(&by_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nearest_own_bot_distance_) -
      reinterpret_cast<char*>(&by_team_)) + sizeof(nearest_own_bot_distance_));
}

GameEvent_PlacementFailed::~GameEvent_PlacementFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementFailed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_PlacementFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_PlacementFailed::ArenaDtor(void* object) {
  GameEvent_PlacementFailed* _this = reinterpret_cast< GameEvent_PlacementFailed* >(object);
  (void)_this;
}
void GameEvent_PlacementFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_PlacementFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_PlacementFailed& GameEvent_PlacementFailed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_PlacementFailed_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_PlacementFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nearest_own_bot_distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(nearest_own_bot_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PlacementFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float remaining_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_remaining_distance(&has_bits);
          remaining_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float nearest_own_bot_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_nearest_own_bot_distance(&has_bits);
          nearest_own_bot_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_PlacementFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_remaining_distance(), target);
  }

  // optional float nearest_own_bot_distance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_nearest_own_bot_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementFailed)
  return target;
}

size_t GameEvent_PlacementFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementFailed)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional float remaining_distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float nearest_own_bot_distance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_PlacementFailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementFailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_PlacementFailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementFailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementFailed)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementFailed::MergeFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      remaining_distance_ = from.remaining_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      nearest_own_bot_distance_ = from.nearest_own_bot_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementFailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementFailed::CopyFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementFailed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_PlacementFailed::InternalSwap(GameEvent_PlacementFailed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, nearest_own_bot_distance_)
      + sizeof(GameEvent_PlacementFailed::nearest_own_bot_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, by_team_)>(
          reinterpret_cast<char*>(&by_team_),
          reinterpret_cast<char*>(&other->by_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PlacementFailed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_UnsportingBehaviorMinor::InitAsDefaultInstance() {
}
class GameEvent_UnsportingBehaviorMinor::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_UnsportingBehaviorMinor>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMinor)
}
GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMinor)
}

void GameEvent_UnsportingBehaviorMinor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMinor::~GameEvent_UnsportingBehaviorMinor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMinor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_UnsportingBehaviorMinor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMinor::ArenaDtor(void* object) {
  GameEvent_UnsportingBehaviorMinor* _this = reinterpret_cast< GameEvent_UnsportingBehaviorMinor* >(object);
  (void)_this;
}
void GameEvent_UnsportingBehaviorMinor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_UnsportingBehaviorMinor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_UnsportingBehaviorMinor& GameEvent_UnsportingBehaviorMinor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_UnsportingBehaviorMinor_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_UnsportingBehaviorMinor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMinor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_UnsportingBehaviorMinor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.UnsportingBehaviorMinor.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_UnsportingBehaviorMinor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMinor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMinor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMinor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (_internal_has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (_internal_has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMinor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_UnsportingBehaviorMinor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMinor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMinor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMinor::MergeFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMinor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMinor::InternalSwap(GameEvent_UnsportingBehaviorMinor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_UnsportingBehaviorMinor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_UnsportingBehaviorMajor::InitAsDefaultInstance() {
}
class GameEvent_UnsportingBehaviorMajor::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_UnsportingBehaviorMajor>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMajor)
}
GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMajor)
}

void GameEvent_UnsportingBehaviorMajor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  by_team_ = 0;
}

GameEvent_UnsportingBehaviorMajor::~GameEvent_UnsportingBehaviorMajor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMajor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_UnsportingBehaviorMajor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameEvent_UnsportingBehaviorMajor::ArenaDtor(void* object) {
  GameEvent_UnsportingBehaviorMajor* _this = reinterpret_cast< GameEvent_UnsportingBehaviorMajor* >(object);
  (void)_this;
}
void GameEvent_UnsportingBehaviorMajor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_UnsportingBehaviorMajor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_UnsportingBehaviorMajor& GameEvent_UnsportingBehaviorMajor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_UnsportingBehaviorMajor_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_UnsportingBehaviorMajor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMajor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_UnsportingBehaviorMajor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.UnsportingBehaviorMajor.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_UnsportingBehaviorMajor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMajor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMajor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMajor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (_internal_has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (_internal_has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_UnsportingBehaviorMajor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_UnsportingBehaviorMajor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.UnsportingBehaviorMajor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.UnsportingBehaviorMajor)
    MergeFrom(*source);
  }
}

void GameEvent_UnsportingBehaviorMajor::MergeFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMajor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMajor::InternalSwap(GameEvent_UnsportingBehaviorMajor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_UnsportingBehaviorMajor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_KeeperHeldBall::InitAsDefaultInstance() {
  ::_GameEvent_KeeperHeldBall_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_KeeperHeldBall::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_KeeperHeldBall>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_KeeperHeldBall* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_KeeperHeldBall::_Internal::location(const GameEvent_KeeperHeldBall* msg) {
  return *msg->location_;
}
void GameEvent_KeeperHeldBall::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KeeperHeldBall)
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KeeperHeldBall)
}

void GameEvent_KeeperHeldBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&location_)) + sizeof(duration_));
}

GameEvent_KeeperHeldBall::~GameEvent_KeeperHeldBall() {
  // @@protoc_insertion_point(destructor:GameEvent.KeeperHeldBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_KeeperHeldBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_KeeperHeldBall::ArenaDtor(void* object) {
  GameEvent_KeeperHeldBall* _this = reinterpret_cast< GameEvent_KeeperHeldBall* >(object);
  (void)_this;
}
void GameEvent_KeeperHeldBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_KeeperHeldBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_KeeperHeldBall& GameEvent_KeeperHeldBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_KeeperHeldBall_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_KeeperHeldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KeeperHeldBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_KeeperHeldBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_KeeperHeldBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KeeperHeldBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KeeperHeldBall)
  return target;
}

size_t GameEvent_KeeperHeldBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KeeperHeldBall)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_KeeperHeldBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_KeeperHeldBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_KeeperHeldBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.KeeperHeldBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.KeeperHeldBall)
    MergeFrom(*source);
  }
}

void GameEvent_KeeperHeldBall::MergeFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_KeeperHeldBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_KeeperHeldBall::CopyFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KeeperHeldBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KeeperHeldBall::InternalSwap(GameEvent_KeeperHeldBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, duration_)
      + sizeof(GameEvent_KeeperHeldBall::duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_KeeperHeldBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_PlacementSucceeded::InitAsDefaultInstance() {
}
class GameEvent_PlacementSucceeded::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PlacementSucceeded>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementSucceeded)
}
GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementSucceeded)
}

void GameEvent_PlacementSucceeded::SharedCtor() {
  ::memset(&by_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
}

GameEvent_PlacementSucceeded::~GameEvent_PlacementSucceeded() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementSucceeded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_PlacementSucceeded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_PlacementSucceeded::ArenaDtor(void* object) {
  GameEvent_PlacementSucceeded* _this = reinterpret_cast< GameEvent_PlacementSucceeded* >(object);
  (void)_this;
}
void GameEvent_PlacementSucceeded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_PlacementSucceeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_PlacementSucceeded& GameEvent_PlacementSucceeded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_PlacementSucceeded_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_PlacementSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementSucceeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PlacementSucceeded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float time_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_time_taken(&has_bits);
          time_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_PlacementSucceeded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementSucceeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_time_taken(), target);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_precision(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementSucceeded)
  return target;
}

size_t GameEvent_PlacementSucceeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementSucceeded)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional float time_taken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float precision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_PlacementSucceeded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PlacementSucceeded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_PlacementSucceeded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PlacementSucceeded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PlacementSucceeded)
    MergeFrom(*source);
  }
}

void GameEvent_PlacementSucceeded::MergeFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_taken_ = from.time_taken_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PlacementSucceeded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PlacementSucceeded::CopyFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementSucceeded::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_PlacementSucceeded::InternalSwap(GameEvent_PlacementSucceeded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, distance_)
      + sizeof(GameEvent_PlacementSucceeded::distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, by_team_)>(
          reinterpret_cast<char*>(&by_team_),
          reinterpret_cast<char*>(&other->by_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PlacementSucceeded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_Prepared::InitAsDefaultInstance() {
}
class GameEvent_Prepared::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_Prepared>()._has_bits_);
  static void set_has_time_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameEvent_Prepared::GameEvent_Prepared(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Prepared)
}
GameEvent_Prepared::GameEvent_Prepared(const GameEvent_Prepared& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_taken_ = from.time_taken_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.Prepared)
}

void GameEvent_Prepared::SharedCtor() {
  time_taken_ = 0;
}

GameEvent_Prepared::~GameEvent_Prepared() {
  // @@protoc_insertion_point(destructor:GameEvent.Prepared)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_Prepared::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_Prepared::ArenaDtor(void* object) {
  GameEvent_Prepared* _this = reinterpret_cast< GameEvent_Prepared* >(object);
  (void)_this;
}
void GameEvent_Prepared::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_Prepared::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_Prepared& GameEvent_Prepared::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_Prepared_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_Prepared::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Prepared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_taken_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_Prepared::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float time_taken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_time_taken(&has_bits);
          time_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_Prepared::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Prepared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Prepared)
  return target;
}

size_t GameEvent_Prepared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Prepared)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float time_taken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_Prepared::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_Prepared* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_Prepared>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.Prepared)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.Prepared)
    MergeFrom(*source);
  }
}

void GameEvent_Prepared::MergeFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_taken()) {
    _internal_set_time_taken(from._internal_time_taken());
  }
}

void GameEvent_Prepared::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_Prepared::CopyFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Prepared::IsInitialized() const {
  return true;
}

void GameEvent_Prepared::InternalSwap(GameEvent_Prepared* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_taken_, other->time_taken_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_Prepared::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BotSubstitution::InitAsDefaultInstance() {
}
class GameEvent_BotSubstitution::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotSubstitution>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_BotSubstitution::GameEvent_BotSubstitution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotSubstitution)
}
GameEvent_BotSubstitution::GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotSubstitution)
}

void GameEvent_BotSubstitution::SharedCtor() {
  by_team_ = 0;
}

GameEvent_BotSubstitution::~GameEvent_BotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.BotSubstitution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BotSubstitution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_BotSubstitution::ArenaDtor(void* object) {
  GameEvent_BotSubstitution* _this = reinterpret_cast< GameEvent_BotSubstitution* >(object);
  (void)_this;
}
void GameEvent_BotSubstitution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BotSubstitution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BotSubstitution& GameEvent_BotSubstitution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotSubstitution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotSubstitution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BotSubstitution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotSubstitution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotSubstitution)
  return target;
}

size_t GameEvent_BotSubstitution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotSubstitution)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BotSubstitution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BotSubstitution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BotSubstitution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BotSubstitution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BotSubstitution)
    MergeFrom(*source);
  }
}

void GameEvent_BotSubstitution::MergeFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_BotSubstitution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BotSubstitution::CopyFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotSubstitution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_BotSubstitution::InternalSwap(GameEvent_BotSubstitution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotSubstitution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_ExcessiveBotSubstitution::InitAsDefaultInstance() {
}
class GameEvent_ExcessiveBotSubstitution::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ExcessiveBotSubstitution>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_ExcessiveBotSubstitution::GameEvent_ExcessiveBotSubstitution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ExcessiveBotSubstitution)
}
GameEvent_ExcessiveBotSubstitution::GameEvent_ExcessiveBotSubstitution(const GameEvent_ExcessiveBotSubstitution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.ExcessiveBotSubstitution)
}

void GameEvent_ExcessiveBotSubstitution::SharedCtor() {
  by_team_ = 0;
}

GameEvent_ExcessiveBotSubstitution::~GameEvent_ExcessiveBotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.ExcessiveBotSubstitution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_ExcessiveBotSubstitution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_ExcessiveBotSubstitution::ArenaDtor(void* object) {
  GameEvent_ExcessiveBotSubstitution* _this = reinterpret_cast< GameEvent_ExcessiveBotSubstitution* >(object);
  (void)_this;
}
void GameEvent_ExcessiveBotSubstitution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_ExcessiveBotSubstitution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_ExcessiveBotSubstitution& GameEvent_ExcessiveBotSubstitution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ExcessiveBotSubstitution_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_ExcessiveBotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ExcessiveBotSubstitution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ExcessiveBotSubstitution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_ExcessiveBotSubstitution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ExcessiveBotSubstitution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ExcessiveBotSubstitution)
  return target;
}

size_t GameEvent_ExcessiveBotSubstitution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ExcessiveBotSubstitution)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_ExcessiveBotSubstitution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ExcessiveBotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ExcessiveBotSubstitution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_ExcessiveBotSubstitution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ExcessiveBotSubstitution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ExcessiveBotSubstitution)
    MergeFrom(*source);
  }
}

void GameEvent_ExcessiveBotSubstitution::MergeFrom(const GameEvent_ExcessiveBotSubstitution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ExcessiveBotSubstitution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_ExcessiveBotSubstitution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ExcessiveBotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ExcessiveBotSubstitution::CopyFrom(const GameEvent_ExcessiveBotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ExcessiveBotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ExcessiveBotSubstitution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_ExcessiveBotSubstitution::InternalSwap(GameEvent_ExcessiveBotSubstitution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ExcessiveBotSubstitution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_ChallengeFlag::InitAsDefaultInstance() {
}
class GameEvent_ChallengeFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ChallengeFlag>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChallengeFlag)
}
GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(const GameEvent_ChallengeFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChallengeFlag)
}

void GameEvent_ChallengeFlag::SharedCtor() {
  by_team_ = 0;
}

GameEvent_ChallengeFlag::~GameEvent_ChallengeFlag() {
  // @@protoc_insertion_point(destructor:GameEvent.ChallengeFlag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_ChallengeFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_ChallengeFlag::ArenaDtor(void* object) {
  GameEvent_ChallengeFlag* _this = reinterpret_cast< GameEvent_ChallengeFlag* >(object);
  (void)_this;
}
void GameEvent_ChallengeFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_ChallengeFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_ChallengeFlag& GameEvent_ChallengeFlag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ChallengeFlag_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_ChallengeFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChallengeFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ChallengeFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_ChallengeFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChallengeFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChallengeFlag)
  return target;
}

size_t GameEvent_ChallengeFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChallengeFlag)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_ChallengeFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ChallengeFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ChallengeFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_ChallengeFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ChallengeFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ChallengeFlag)
    MergeFrom(*source);
  }
}

void GameEvent_ChallengeFlag::MergeFrom(const GameEvent_ChallengeFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChallengeFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_ChallengeFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ChallengeFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ChallengeFlag::CopyFrom(const GameEvent_ChallengeFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChallengeFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChallengeFlag::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_ChallengeFlag::InternalSwap(GameEvent_ChallengeFlag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ChallengeFlag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_ChallengeFlagHandled::InitAsDefaultInstance() {
}
class GameEvent_ChallengeFlagHandled::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ChallengeFlagHandled>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_ChallengeFlagHandled::GameEvent_ChallengeFlagHandled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChallengeFlagHandled)
}
GameEvent_ChallengeFlagHandled::GameEvent_ChallengeFlagHandled(const GameEvent_ChallengeFlagHandled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(accepted_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChallengeFlagHandled)
}

void GameEvent_ChallengeFlagHandled::SharedCtor() {
  ::memset(&by_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accepted_) -
      reinterpret_cast<char*>(&by_team_)) + sizeof(accepted_));
}

GameEvent_ChallengeFlagHandled::~GameEvent_ChallengeFlagHandled() {
  // @@protoc_insertion_point(destructor:GameEvent.ChallengeFlagHandled)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_ChallengeFlagHandled::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_ChallengeFlagHandled::ArenaDtor(void* object) {
  GameEvent_ChallengeFlagHandled* _this = reinterpret_cast< GameEvent_ChallengeFlagHandled* >(object);
  (void)_this;
}
void GameEvent_ChallengeFlagHandled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_ChallengeFlagHandled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_ChallengeFlagHandled& GameEvent_ChallengeFlagHandled::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ChallengeFlagHandled_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_ChallengeFlagHandled::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChallengeFlagHandled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accepted_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(accepted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ChallengeFlagHandled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool accepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accepted(&has_bits);
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_ChallengeFlagHandled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChallengeFlagHandled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // required bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChallengeFlagHandled)
  return target;
}

size_t GameEvent_ChallengeFlagHandled::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.ChallengeFlagHandled)
  size_t total_size = 0;

  if (_internal_has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }

  if (_internal_has_accepted()) {
    // required bool accepted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GameEvent_ChallengeFlagHandled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChallengeFlagHandled)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Team by_team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());

    // required bool accepted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_ChallengeFlagHandled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.ChallengeFlagHandled)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_ChallengeFlagHandled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_ChallengeFlagHandled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.ChallengeFlagHandled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.ChallengeFlagHandled)
    MergeFrom(*source);
  }
}

void GameEvent_ChallengeFlagHandled::MergeFrom(const GameEvent_ChallengeFlagHandled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChallengeFlagHandled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      accepted_ = from.accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_ChallengeFlagHandled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.ChallengeFlagHandled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_ChallengeFlagHandled::CopyFrom(const GameEvent_ChallengeFlagHandled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChallengeFlagHandled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChallengeFlagHandled::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_ChallengeFlagHandled::InternalSwap(GameEvent_ChallengeFlagHandled* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, accepted_)
      + sizeof(GameEvent_ChallengeFlagHandled::accepted_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, by_team_)>(
          reinterpret_cast<char*>(&by_team_),
          reinterpret_cast<char*>(&other->by_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ChallengeFlagHandled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_EmergencyStop::InitAsDefaultInstance() {
}
class GameEvent_EmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_EmergencyStop>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_EmergencyStop::GameEvent_EmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.EmergencyStop)
}
GameEvent_EmergencyStop::GameEvent_EmergencyStop(const GameEvent_EmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.EmergencyStop)
}

void GameEvent_EmergencyStop::SharedCtor() {
  by_team_ = 0;
}

GameEvent_EmergencyStop::~GameEvent_EmergencyStop() {
  // @@protoc_insertion_point(destructor:GameEvent.EmergencyStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_EmergencyStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEvent_EmergencyStop::ArenaDtor(void* object) {
  GameEvent_EmergencyStop* _this = reinterpret_cast< GameEvent_EmergencyStop* >(object);
  (void)_this;
}
void GameEvent_EmergencyStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_EmergencyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_EmergencyStop& GameEvent_EmergencyStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_EmergencyStop_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_EmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.EmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_EmergencyStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_EmergencyStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.EmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.EmergencyStop)
  return target;
}

size_t GameEvent_EmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.EmergencyStop)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_EmergencyStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_EmergencyStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_EmergencyStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.EmergencyStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.EmergencyStop)
    MergeFrom(*source);
  }
}

void GameEvent_EmergencyStop::MergeFrom(const GameEvent_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _internal_set_by_team(from._internal_by_team());
  }
}

void GameEvent_EmergencyStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_EmergencyStop::CopyFrom(const GameEvent_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_EmergencyStop::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameEvent_EmergencyStop::InternalSwap(GameEvent_EmergencyStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(by_team_, other->by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_EmergencyStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_TooManyRobots::InitAsDefaultInstance() {
  ::_GameEvent_TooManyRobots_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_TooManyRobots::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_TooManyRobots>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_robots_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_robots_on_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& ball_location(const GameEvent_TooManyRobots* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_TooManyRobots::_Internal::ball_location(const GameEvent_TooManyRobots* msg) {
  return *msg->ball_location_;
}
void GameEvent_TooManyRobots::clear_ball_location() {
  if (ball_location_ != nullptr) ball_location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.TooManyRobots)
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vector2(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  ::memcpy(&by_team_, &from.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_robots_on_field_) -
    reinterpret_cast<char*>(&by_team_)) + sizeof(num_robots_on_field_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.TooManyRobots)
}

void GameEvent_TooManyRobots::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&ball_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_robots_on_field_) -
      reinterpret_cast<char*>(&ball_location_)) + sizeof(num_robots_on_field_));
}

GameEvent_TooManyRobots::~GameEvent_TooManyRobots() {
  // @@protoc_insertion_point(destructor:GameEvent.TooManyRobots)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_TooManyRobots::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_location_;
}

void GameEvent_TooManyRobots::ArenaDtor(void* object) {
  GameEvent_TooManyRobots* _this = reinterpret_cast< GameEvent_TooManyRobots* >(object);
  (void)_this;
}
void GameEvent_TooManyRobots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_TooManyRobots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_TooManyRobots& GameEvent_TooManyRobots::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_TooManyRobots_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_TooManyRobots::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.TooManyRobots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ball_location_ != nullptr);
    ball_location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_robots_on_field_) -
        reinterpret_cast<char*>(&by_team_)) + sizeof(num_robots_on_field_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_TooManyRobots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_robots_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_robots_allowed(&has_bits);
          num_robots_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_robots_on_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_robots_on_field(&has_bits);
          num_robots_on_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_TooManyRobots::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.TooManyRobots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional int32 num_robots_allowed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_robots_allowed(), target);
  }

  // optional int32 num_robots_on_field = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_robots_on_field(), target);
  }

  // optional .Vector2 ball_location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ball_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.TooManyRobots)
  return target;
}

size_t GameEvent_TooManyRobots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.TooManyRobots)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 ball_location = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional int32 num_robots_allowed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_robots_allowed());
    }

    // optional int32 num_robots_on_field = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_robots_on_field());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_TooManyRobots::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_TooManyRobots* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_TooManyRobots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.TooManyRobots)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.TooManyRobots)
    MergeFrom(*source);
  }
}

void GameEvent_TooManyRobots::MergeFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ball_location()->::Vector2::MergeFrom(from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_robots_allowed_ = from.num_robots_allowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_robots_on_field_ = from.num_robots_on_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_TooManyRobots::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_TooManyRobots::CopyFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_TooManyRobots::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ball_location()) {
    if (!ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_TooManyRobots::InternalSwap(GameEvent_TooManyRobots* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, num_robots_on_field_)
      + sizeof(GameEvent_TooManyRobots::num_robots_on_field_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, ball_location_)>(
          reinterpret_cast<char*>(&ball_location_),
          reinterpret_cast<char*>(&other->ball_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_TooManyRobots::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_BoundaryCrossing::InitAsDefaultInstance() {
  ::_GameEvent_BoundaryCrossing_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_BoundaryCrossing::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BoundaryCrossing>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_BoundaryCrossing* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BoundaryCrossing::_Internal::location(const GameEvent_BoundaryCrossing* msg) {
  return *msg->location_;
}
void GameEvent_BoundaryCrossing::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BoundaryCrossing)
}
GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(const GameEvent_BoundaryCrossing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BoundaryCrossing)
}

void GameEvent_BoundaryCrossing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_team_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_team_));
}

GameEvent_BoundaryCrossing::~GameEvent_BoundaryCrossing() {
  // @@protoc_insertion_point(destructor:GameEvent.BoundaryCrossing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_BoundaryCrossing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_BoundaryCrossing::ArenaDtor(void* object) {
  GameEvent_BoundaryCrossing* _this = reinterpret_cast< GameEvent_BoundaryCrossing* >(object);
  (void)_this;
}
void GameEvent_BoundaryCrossing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_BoundaryCrossing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_BoundaryCrossing& GameEvent_BoundaryCrossing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_BoundaryCrossing_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_BoundaryCrossing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BoundaryCrossing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BoundaryCrossing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_BoundaryCrossing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BoundaryCrossing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BoundaryCrossing)
  return target;
}

size_t GameEvent_BoundaryCrossing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BoundaryCrossing)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_BoundaryCrossing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.BoundaryCrossing)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_BoundaryCrossing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_BoundaryCrossing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.BoundaryCrossing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.BoundaryCrossing)
    MergeFrom(*source);
  }
}

void GameEvent_BoundaryCrossing::MergeFrom(const GameEvent_BoundaryCrossing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BoundaryCrossing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_BoundaryCrossing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.BoundaryCrossing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_BoundaryCrossing::CopyFrom(const GameEvent_BoundaryCrossing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BoundaryCrossing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BoundaryCrossing::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BoundaryCrossing::InternalSwap(GameEvent_BoundaryCrossing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, by_team_)
      + sizeof(GameEvent_BoundaryCrossing::by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BoundaryCrossing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent_PenaltyKickFailed::InitAsDefaultInstance() {
  ::_GameEvent_PenaltyKickFailed_default_instance_._instance.get_mutable()->location_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class GameEvent_PenaltyKickFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PenaltyKickFailed>()._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_PenaltyKickFailed* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_PenaltyKickFailed::_Internal::location(const GameEvent_PenaltyKickFailed* msg) {
  return *msg->location_;
}
void GameEvent_PenaltyKickFailed::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PenaltyKickFailed)
}
GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(const GameEvent_PenaltyKickFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::Vector2(*from.location_);
  } else {
    location_ = nullptr;
  }
  by_team_ = from.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.PenaltyKickFailed)
}

void GameEvent_PenaltyKickFailed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_team_) -
      reinterpret_cast<char*>(&location_)) + sizeof(by_team_));
}

GameEvent_PenaltyKickFailed::~GameEvent_PenaltyKickFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PenaltyKickFailed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent_PenaltyKickFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void GameEvent_PenaltyKickFailed::ArenaDtor(void* object) {
  GameEvent_PenaltyKickFailed* _this = reinterpret_cast< GameEvent_PenaltyKickFailed* >(object);
  (void)_this;
}
void GameEvent_PenaltyKickFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent_PenaltyKickFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent_PenaltyKickFailed& GameEvent_PenaltyKickFailed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_PenaltyKickFailed_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent_PenaltyKickFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PenaltyKickFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  by_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PenaltyKickFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.PenaltyKickFailed.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent_PenaltyKickFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PenaltyKickFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.PenaltyKickFailed.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PenaltyKickFailed)
  return target;
}

size_t GameEvent_PenaltyKickFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PenaltyKickFailed)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .Vector2 location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent_PenaltyKickFailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent.PenaltyKickFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent_PenaltyKickFailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent_PenaltyKickFailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent.PenaltyKickFailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent.PenaltyKickFailed)
    MergeFrom(*source);
  }
}

void GameEvent_PenaltyKickFailed::MergeFrom(const GameEvent_PenaltyKickFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PenaltyKickFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::Vector2::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      by_team_ = from.by_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent_PenaltyKickFailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent.PenaltyKickFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_PenaltyKickFailed::CopyFrom(const GameEvent_PenaltyKickFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PenaltyKickFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PenaltyKickFailed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_PenaltyKickFailed::InternalSwap(GameEvent_PenaltyKickFailed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, by_team_)
      + sizeof(GameEvent_PenaltyKickFailed::by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PenaltyKickFailed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent::InitAsDefaultInstance() {
  ::_GameEvent_default_instance_.ball_left_field_touch_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  ::_GameEvent_default_instance_.ball_left_field_goal_line_ = const_cast< ::GameEvent_BallLeftField*>(
      ::GameEvent_BallLeftField::internal_default_instance());
  ::_GameEvent_default_instance_.aimless_kick_ = const_cast< ::GameEvent_AimlessKick*>(
      ::GameEvent_AimlessKick::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_too_close_to_defense_area_ = const_cast< ::GameEvent_AttackerTooCloseToDefenseArea*>(
      ::GameEvent_AttackerTooCloseToDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.defender_in_defense_area_ = const_cast< ::GameEvent_DefenderInDefenseArea*>(
      ::GameEvent_DefenderInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.boundary_crossing_ = const_cast< ::GameEvent_BoundaryCrossing*>(
      ::GameEvent_BoundaryCrossing::internal_default_instance());
  ::_GameEvent_default_instance_.keeper_held_ball_ = const_cast< ::GameEvent_KeeperHeldBall*>(
      ::GameEvent_KeeperHeldBall::internal_default_instance());
  ::_GameEvent_default_instance_.bot_dribbled_ball_too_far_ = const_cast< ::GameEvent_BotDribbledBallTooFar*>(
      ::GameEvent_BotDribbledBallTooFar::internal_default_instance());
  ::_GameEvent_default_instance_.bot_pushed_bot_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  ::_GameEvent_default_instance_.bot_held_ball_deliberately_ = const_cast< ::GameEvent_BotHeldBallDeliberately*>(
      ::GameEvent_BotHeldBallDeliberately::internal_default_instance());
  ::_GameEvent_default_instance_.bot_tipped_over_ = const_cast< ::GameEvent_BotTippedOver*>(
      ::GameEvent_BotTippedOver::internal_default_instance());
  ::_GameEvent_default_instance_.bot_dropped_parts_ = const_cast< ::GameEvent_BotDroppedParts*>(
      ::GameEvent_BotDroppedParts::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_ball_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedBallInDefenseArea*>(
      ::GameEvent_AttackerTouchedBallInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.bot_kicked_ball_too_fast_ = const_cast< ::GameEvent_BotKickedBallTooFast*>(
      ::GameEvent_BotKickedBallTooFast::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_unique_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_drawn_ = const_cast< ::GameEvent_BotCrashDrawn*>(
      ::GameEvent_BotCrashDrawn::internal_default_instance());
  ::_GameEvent_default_instance_.defender_too_close_to_kick_point_ = const_cast< ::GameEvent_DefenderTooCloseToKickPoint*>(
      ::GameEvent_DefenderTooCloseToKickPoint::internal_default_instance());
  ::_GameEvent_default_instance_.bot_too_fast_in_stop_ = const_cast< ::GameEvent_BotTooFastInStop*>(
      ::GameEvent_BotTooFastInStop::internal_default_instance());
  ::_GameEvent_default_instance_.bot_interfered_placement_ = const_cast< ::GameEvent_BotInterferedPlacement*>(
      ::GameEvent_BotInterferedPlacement::internal_default_instance());
  ::_GameEvent_default_instance_.possible_goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  ::_GameEvent_default_instance_.goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  ::_GameEvent_default_instance_.invalid_goal_ = const_cast< ::GameEvent_Goal*>(
      ::GameEvent_Goal::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_double_touched_ball_ = const_cast< ::GameEvent_AttackerDoubleTouchedBall*>(
      ::GameEvent_AttackerDoubleTouchedBall::internal_default_instance());
  ::_GameEvent_default_instance_.placement_succeeded_ = const_cast< ::GameEvent_PlacementSucceeded*>(
      ::GameEvent_PlacementSucceeded::internal_default_instance());
  ::_GameEvent_default_instance_.penalty_kick_failed_ = const_cast< ::GameEvent_PenaltyKickFailed*>(
      ::GameEvent_PenaltyKickFailed::internal_default_instance());
  ::_GameEvent_default_instance_.no_progress_in_game_ = const_cast< ::GameEvent_NoProgressInGame*>(
      ::GameEvent_NoProgressInGame::internal_default_instance());
  ::_GameEvent_default_instance_.placement_failed_ = const_cast< ::GameEvent_PlacementFailed*>(
      ::GameEvent_PlacementFailed::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_cards_ = const_cast< ::GameEvent_MultipleCards*>(
      ::GameEvent_MultipleCards::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_fouls_ = const_cast< ::GameEvent_MultipleFouls*>(
      ::GameEvent_MultipleFouls::internal_default_instance());
  ::_GameEvent_default_instance_.bot_substitution_ = const_cast< ::GameEvent_BotSubstitution*>(
      ::GameEvent_BotSubstitution::internal_default_instance());
  ::_GameEvent_default_instance_.excessive_bot_substitution_ = const_cast< ::GameEvent_ExcessiveBotSubstitution*>(
      ::GameEvent_ExcessiveBotSubstitution::internal_default_instance());
  ::_GameEvent_default_instance_.too_many_robots_ = const_cast< ::GameEvent_TooManyRobots*>(
      ::GameEvent_TooManyRobots::internal_default_instance());
  ::_GameEvent_default_instance_.challenge_flag_ = const_cast< ::GameEvent_ChallengeFlag*>(
      ::GameEvent_ChallengeFlag::internal_default_instance());
  ::_GameEvent_default_instance_.challenge_flag_handled_ = const_cast< ::GameEvent_ChallengeFlagHandled*>(
      ::GameEvent_ChallengeFlagHandled::internal_default_instance());
  ::_GameEvent_default_instance_.emergency_stop_ = const_cast< ::GameEvent_EmergencyStop*>(
      ::GameEvent_EmergencyStop::internal_default_instance());
  ::_GameEvent_default_instance_.unsporting_behavior_minor_ = const_cast< ::GameEvent_UnsportingBehaviorMinor*>(
      ::GameEvent_UnsportingBehaviorMinor::internal_default_instance());
  ::_GameEvent_default_instance_.unsporting_behavior_major_ = const_cast< ::GameEvent_UnsportingBehaviorMajor*>(
      ::GameEvent_UnsportingBehaviorMajor::internal_default_instance());
  ::_GameEvent_default_instance_.prepared_ = const_cast< ::GameEvent_Prepared*>(
      ::GameEvent_Prepared::internal_default_instance());
  ::_GameEvent_default_instance_.indirect_goal_ = const_cast< ::GameEvent_IndirectGoal*>(
      ::GameEvent_IndirectGoal::internal_default_instance());
  ::_GameEvent_default_instance_.chipped_goal_ = const_cast< ::GameEvent_ChippedGoal*>(
      ::GameEvent_ChippedGoal::internal_default_instance());
  ::_GameEvent_default_instance_.kick_timeout_ = const_cast< ::GameEvent_KickTimeout*>(
      ::GameEvent_KickTimeout::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.attacker_touched_opponent_in_defense_area_skipped_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
  ::_GameEvent_default_instance_.bot_crash_unique_skipped_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  ::_GameEvent_default_instance_.bot_pushed_bot_skipped_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  ::_GameEvent_default_instance_.defender_in_defense_area_partially_ = const_cast< ::GameEvent_DefenderInDefenseAreaPartially*>(
      ::GameEvent_DefenderInDefenseAreaPartially::internal_default_instance());
  ::_GameEvent_default_instance_.multiple_placement_failures_ = const_cast< ::GameEvent_MultiplePlacementFailures*>(
      ::GameEvent_MultiplePlacementFailures::internal_default_instance());
}
class GameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_created_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameEvent_BallLeftField& ball_left_field_touch_line(const GameEvent* msg);
  static const ::GameEvent_BallLeftField& ball_left_field_goal_line(const GameEvent* msg);
  static const ::GameEvent_AimlessKick& aimless_kick(const GameEvent* msg);
  static const ::GameEvent_AttackerTooCloseToDefenseArea& attacker_too_close_to_defense_area(const GameEvent* msg);
  static const ::GameEvent_DefenderInDefenseArea& defender_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_BoundaryCrossing& boundary_crossing(const GameEvent* msg);
  static const ::GameEvent_KeeperHeldBall& keeper_held_ball(const GameEvent* msg);
  static const ::GameEvent_BotDribbledBallTooFar& bot_dribbled_ball_too_far(const GameEvent* msg);
  static const ::GameEvent_BotPushedBot& bot_pushed_bot(const GameEvent* msg);
  static const ::GameEvent_BotHeldBallDeliberately& bot_held_ball_deliberately(const GameEvent* msg);
  static const ::GameEvent_BotTippedOver& bot_tipped_over(const GameEvent* msg);
  static const ::GameEvent_BotDroppedParts& bot_dropped_parts(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedBallInDefenseArea& attacker_touched_ball_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_BotKickedBallTooFast& bot_kicked_ball_too_fast(const GameEvent* msg);
  static const ::GameEvent_BotCrashUnique& bot_crash_unique(const GameEvent* msg);
  static const ::GameEvent_BotCrashDrawn& bot_crash_drawn(const GameEvent* msg);
  static const ::GameEvent_DefenderTooCloseToKickPoint& defender_too_close_to_kick_point(const GameEvent* msg);
  static const ::GameEvent_BotTooFastInStop& bot_too_fast_in_stop(const GameEvent* msg);
  static const ::GameEvent_BotInterferedPlacement& bot_interfered_placement(const GameEvent* msg);
  static const ::GameEvent_Goal& possible_goal(const GameEvent* msg);
  static const ::GameEvent_Goal& goal(const GameEvent* msg);
  static const ::GameEvent_Goal& invalid_goal(const GameEvent* msg);
  static const ::GameEvent_AttackerDoubleTouchedBall& attacker_double_touched_ball(const GameEvent* msg);
  static const ::GameEvent_PlacementSucceeded& placement_succeeded(const GameEvent* msg);
  static const ::GameEvent_PenaltyKickFailed& penalty_kick_failed(const GameEvent* msg);
  static const ::GameEvent_NoProgressInGame& no_progress_in_game(const GameEvent* msg);
  static const ::GameEvent_PlacementFailed& placement_failed(const GameEvent* msg);
  static const ::GameEvent_MultipleCards& multiple_cards(const GameEvent* msg);
  static const ::GameEvent_MultipleFouls& multiple_fouls(const GameEvent* msg);
  static const ::GameEvent_BotSubstitution& bot_substitution(const GameEvent* msg);
  static const ::GameEvent_ExcessiveBotSubstitution& excessive_bot_substitution(const GameEvent* msg);
  static const ::GameEvent_TooManyRobots& too_many_robots(const GameEvent* msg);
  static const ::GameEvent_ChallengeFlag& challenge_flag(const GameEvent* msg);
  static const ::GameEvent_ChallengeFlagHandled& challenge_flag_handled(const GameEvent* msg);
  static const ::GameEvent_EmergencyStop& emergency_stop(const GameEvent* msg);
  static const ::GameEvent_UnsportingBehaviorMinor& unsporting_behavior_minor(const GameEvent* msg);
  static const ::GameEvent_UnsportingBehaviorMajor& unsporting_behavior_major(const GameEvent* msg);
  static const ::GameEvent_Prepared& prepared(const GameEvent* msg);
  static const ::GameEvent_IndirectGoal& indirect_goal(const GameEvent* msg);
  static const ::GameEvent_ChippedGoal& chipped_goal(const GameEvent* msg);
  static const ::GameEvent_KickTimeout& kick_timeout(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area_skipped(const GameEvent* msg);
  static const ::GameEvent_BotCrashUnique& bot_crash_unique_skipped(const GameEvent* msg);
  static const ::GameEvent_BotPushedBot& bot_pushed_bot_skipped(const GameEvent* msg);
  static const ::GameEvent_DefenderInDefenseAreaPartially& defender_in_defense_area_partially(const GameEvent* msg);
  static const ::GameEvent_MultiplePlacementFailures& multiple_placement_failures(const GameEvent* msg);
};

const ::GameEvent_BallLeftField&
GameEvent::_Internal::ball_left_field_touch_line(const GameEvent* msg) {
  return *msg->event_.ball_left_field_touch_line_;
}
const ::GameEvent_BallLeftField&
GameEvent::_Internal::ball_left_field_goal_line(const GameEvent* msg) {
  return *msg->event_.ball_left_field_goal_line_;
}
const ::GameEvent_AimlessKick&
GameEvent::_Internal::aimless_kick(const GameEvent* msg) {
  return *msg->event_.aimless_kick_;
}
const ::GameEvent_AttackerTooCloseToDefenseArea&
GameEvent::_Internal::attacker_too_close_to_defense_area(const GameEvent* msg) {
  return *msg->event_.attacker_too_close_to_defense_area_;
}
const ::GameEvent_DefenderInDefenseArea&
GameEvent::_Internal::defender_in_defense_area(const GameEvent* msg) {
  return *msg->event_.defender_in_defense_area_;
}
const ::GameEvent_BoundaryCrossing&
GameEvent::_Internal::boundary_crossing(const GameEvent* msg) {
  return *msg->event_.boundary_crossing_;
}
const ::GameEvent_KeeperHeldBall&
GameEvent::_Internal::keeper_held_ball(const GameEvent* msg) {
  return *msg->event_.keeper_held_ball_;
}
const ::GameEvent_BotDribbledBallTooFar&
GameEvent::_Internal::bot_dribbled_ball_too_far(const GameEvent* msg) {
  return *msg->event_.bot_dribbled_ball_too_far_;
}
const ::GameEvent_BotPushedBot&
GameEvent::_Internal::bot_pushed_bot(const GameEvent* msg) {
  return *msg->event_.bot_pushed_bot_;
}
const ::GameEvent_BotHeldBallDeliberately&
GameEvent::_Internal::bot_held_ball_deliberately(const GameEvent* msg) {
  return *msg->event_.bot_held_ball_deliberately_;
}
const ::GameEvent_BotTippedOver&
GameEvent::_Internal::bot_tipped_over(const GameEvent* msg) {
  return *msg->event_.bot_tipped_over_;
}
const ::GameEvent_BotDroppedParts&
GameEvent::_Internal::bot_dropped_parts(const GameEvent* msg) {
  return *msg->event_.bot_dropped_parts_;
}
const ::GameEvent_AttackerTouchedBallInDefenseArea&
GameEvent::_Internal::attacker_touched_ball_in_defense_area(const GameEvent* msg) {
  return *msg->event_.attacker_touched_ball_in_defense_area_;
}
const ::GameEvent_BotKickedBallTooFast&
GameEvent::_Internal::bot_kicked_ball_too_fast(const GameEvent* msg) {
  return *msg->event_.bot_kicked_ball_too_fast_;
}
const ::GameEvent_BotCrashUnique&
GameEvent::_Internal::bot_crash_unique(const GameEvent* msg) {
  return *msg->event_.bot_crash_unique_;
}
const ::GameEvent_BotCrashDrawn&
GameEvent::_Internal::bot_crash_drawn(const GameEvent* msg) {
  return *msg->event_.bot_crash_drawn_;
}
const ::GameEvent_DefenderTooCloseToKickPoint&
GameEvent::_Internal::defender_too_close_to_kick_point(const GameEvent* msg) {
  return *msg->event_.defender_too_close_to_kick_point_;
}
const ::GameEvent_BotTooFastInStop&
GameEvent::_Internal::bot_too_fast_in_stop(const GameEvent* msg) {
  return *msg->event_.bot_too_fast_in_stop_;
}
const ::GameEvent_BotInterferedPlacement&
GameEvent::_Internal::bot_interfered_placement(const GameEvent* msg) {
  return *msg->event_.bot_interfered_placement_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::possible_goal(const GameEvent* msg) {
  return *msg->event_.possible_goal_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::goal(const GameEvent* msg) {
  return *msg->event_.goal_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::invalid_goal(const GameEvent* msg) {
  return *msg->event_.invalid_goal_;
}
const ::GameEvent_AttackerDoubleTouchedBall&
GameEvent::_Internal::attacker_double_touched_ball(const GameEvent* msg) {
  return *msg->event_.attacker_double_touched_ball_;
}
const ::GameEvent_PlacementSucceeded&
GameEvent::_Internal::placement_succeeded(const GameEvent* msg) {
  return *msg->event_.placement_succeeded_;
}
const ::GameEvent_PenaltyKickFailed&
GameEvent::_Internal::penalty_kick_failed(const GameEvent* msg) {
  return *msg->event_.penalty_kick_failed_;
}
const ::GameEvent_NoProgressInGame&
GameEvent::_Internal::no_progress_in_game(const GameEvent* msg) {
  return *msg->event_.no_progress_in_game_;
}
const ::GameEvent_PlacementFailed&
GameEvent::_Internal::placement_failed(const GameEvent* msg) {
  return *msg->event_.placement_failed_;
}
const ::GameEvent_MultipleCards&
GameEvent::_Internal::multiple_cards(const GameEvent* msg) {
  return *msg->event_.multiple_cards_;
}
const ::GameEvent_MultipleFouls&
GameEvent::_Internal::multiple_fouls(const GameEvent* msg) {
  return *msg->event_.multiple_fouls_;
}
const ::GameEvent_BotSubstitution&
GameEvent::_Internal::bot_substitution(const GameEvent* msg) {
  return *msg->event_.bot_substitution_;
}
const ::GameEvent_ExcessiveBotSubstitution&
GameEvent::_Internal::excessive_bot_substitution(const GameEvent* msg) {
  return *msg->event_.excessive_bot_substitution_;
}
const ::GameEvent_TooManyRobots&
GameEvent::_Internal::too_many_robots(const GameEvent* msg) {
  return *msg->event_.too_many_robots_;
}
const ::GameEvent_ChallengeFlag&
GameEvent::_Internal::challenge_flag(const GameEvent* msg) {
  return *msg->event_.challenge_flag_;
}
const ::GameEvent_ChallengeFlagHandled&
GameEvent::_Internal::challenge_flag_handled(const GameEvent* msg) {
  return *msg->event_.challenge_flag_handled_;
}
const ::GameEvent_EmergencyStop&
GameEvent::_Internal::emergency_stop(const GameEvent* msg) {
  return *msg->event_.emergency_stop_;
}
const ::GameEvent_UnsportingBehaviorMinor&
GameEvent::_Internal::unsporting_behavior_minor(const GameEvent* msg) {
  return *msg->event_.unsporting_behavior_minor_;
}
const ::GameEvent_UnsportingBehaviorMajor&
GameEvent::_Internal::unsporting_behavior_major(const GameEvent* msg) {
  return *msg->event_.unsporting_behavior_major_;
}
const ::GameEvent_Prepared&
GameEvent::_Internal::prepared(const GameEvent* msg) {
  return *msg->event_.prepared_;
}
const ::GameEvent_IndirectGoal&
GameEvent::_Internal::indirect_goal(const GameEvent* msg) {
  return *msg->event_.indirect_goal_;
}
const ::GameEvent_ChippedGoal&
GameEvent::_Internal::chipped_goal(const GameEvent* msg) {
  return *msg->event_.chipped_goal_;
}
const ::GameEvent_KickTimeout&
GameEvent::_Internal::kick_timeout(const GameEvent* msg) {
  return *msg->event_.kick_timeout_;
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea&
GameEvent::_Internal::attacker_touched_opponent_in_defense_area(const GameEvent* msg) {
  return *msg->event_.attacker_touched_opponent_in_defense_area_;
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea&
GameEvent::_Internal::attacker_touched_opponent_in_defense_area_skipped(const GameEvent* msg) {
  return *msg->event_.attacker_touched_opponent_in_defense_area_skipped_;
}
const ::GameEvent_BotCrashUnique&
GameEvent::_Internal::bot_crash_unique_skipped(const GameEvent* msg) {
  return *msg->event_.bot_crash_unique_skipped_;
}
const ::GameEvent_BotPushedBot&
GameEvent::_Internal::bot_pushed_bot_skipped(const GameEvent* msg) {
  return *msg->event_.bot_pushed_bot_skipped_;
}
const ::GameEvent_DefenderInDefenseAreaPartially&
GameEvent::_Internal::defender_in_defense_area_partially(const GameEvent* msg) {
  return *msg->event_.defender_in_defense_area_partially_;
}
const ::GameEvent_MultiplePlacementFailures&
GameEvent::_Internal::multiple_placement_failures(const GameEvent* msg) {
  return *msg->event_.multiple_placement_failures_;
}
void GameEvent::set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* ball_left_field_touch_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (ball_left_field_touch_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_left_field_touch_line);
    if (message_arena != submessage_arena) {
      ball_left_field_touch_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_left_field_touch_line, submessage_arena);
    }
    set_has_ball_left_field_touch_line();
    event_.ball_left_field_touch_line_ = ball_left_field_touch_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_touch_line)
}
void GameEvent::set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* ball_left_field_goal_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (ball_left_field_goal_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_left_field_goal_line);
    if (message_arena != submessage_arena) {
      ball_left_field_goal_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_left_field_goal_line, submessage_arena);
    }
    set_has_ball_left_field_goal_line();
    event_.ball_left_field_goal_line_ = ball_left_field_goal_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_goal_line)
}
void GameEvent::set_allocated_aimless_kick(::GameEvent_AimlessKick* aimless_kick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (aimless_kick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aimless_kick);
    if (message_arena != submessage_arena) {
      aimless_kick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aimless_kick, submessage_arena);
    }
    set_has_aimless_kick();
    event_.aimless_kick_ = aimless_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.aimless_kick)
}
void GameEvent::set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_too_close_to_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacker_too_close_to_defense_area);
    if (message_arena != submessage_arena) {
      attacker_too_close_to_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_too_close_to_defense_area, submessage_arena);
    }
    set_has_attacker_too_close_to_defense_area();
    event_.attacker_too_close_to_defense_area_ = attacker_too_close_to_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}
void GameEvent::set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* defender_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (defender_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defender_in_defense_area);
    if (message_arena != submessage_arena) {
      defender_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area, submessage_arena);
    }
    set_has_defender_in_defense_area();
    event_.defender_in_defense_area_ = defender_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area)
}
void GameEvent::set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* boundary_crossing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (boundary_crossing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boundary_crossing);
    if (message_arena != submessage_arena) {
      boundary_crossing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundary_crossing, submessage_arena);
    }
    set_has_boundary_crossing();
    event_.boundary_crossing_ = boundary_crossing;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.boundary_crossing)
}
void GameEvent::set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* keeper_held_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (keeper_held_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(keeper_held_ball);
    if (message_arena != submessage_arena) {
      keeper_held_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keeper_held_ball, submessage_arena);
    }
    set_has_keeper_held_ball();
    event_.keeper_held_ball_ = keeper_held_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.keeper_held_ball)
}
void GameEvent::set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_dribbled_ball_too_far) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_dribbled_ball_too_far);
    if (message_arena != submessage_arena) {
      bot_dribbled_ball_too_far = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_dribbled_ball_too_far, submessage_arena);
    }
    set_has_bot_dribbled_ball_too_far();
    event_.bot_dribbled_ball_too_far_ = bot_dribbled_ball_too_far;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}
void GameEvent::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_pushed_bot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_pushed_bot);
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot, submessage_arena);
    }
    set_has_bot_pushed_bot();
    event_.bot_pushed_bot_ = bot_pushed_bot;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot)
}
void GameEvent::set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_held_ball_deliberately) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_held_ball_deliberately);
    if (message_arena != submessage_arena) {
      bot_held_ball_deliberately = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_held_ball_deliberately, submessage_arena);
    }
    set_has_bot_held_ball_deliberately();
    event_.bot_held_ball_deliberately_ = bot_held_ball_deliberately;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_held_ball_deliberately)
}
void GameEvent::set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* bot_tipped_over) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_tipped_over) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_tipped_over);
    if (message_arena != submessage_arena) {
      bot_tipped_over = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_tipped_over, submessage_arena);
    }
    set_has_bot_tipped_over();
    event_.bot_tipped_over_ = bot_tipped_over;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_tipped_over)
}
void GameEvent::set_allocated_bot_dropped_parts(::GameEvent_BotDroppedParts* bot_dropped_parts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_dropped_parts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_dropped_parts);
    if (message_arena != submessage_arena) {
      bot_dropped_parts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_dropped_parts, submessage_arena);
    }
    set_has_bot_dropped_parts();
    event_.bot_dropped_parts_ = bot_dropped_parts;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dropped_parts)
}
void GameEvent::set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_ball_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacker_touched_ball_in_defense_area);
    if (message_arena != submessage_arena) {
      attacker_touched_ball_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_ball_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_ball_in_defense_area();
    event_.attacker_touched_ball_in_defense_area_ = attacker_touched_ball_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}
void GameEvent::set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_kicked_ball_too_fast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_kicked_ball_too_fast);
    if (message_arena != submessage_arena) {
      bot_kicked_ball_too_fast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_kicked_ball_too_fast, submessage_arena);
    }
    set_has_bot_kicked_ball_too_fast();
    event_.bot_kicked_ball_too_fast_ = bot_kicked_ball_too_fast;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}
void GameEvent::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_unique) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_crash_unique);
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_unique, submessage_arena);
    }
    set_has_bot_crash_unique();
    event_.bot_crash_unique_ = bot_crash_unique;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique)
}
void GameEvent::set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* bot_crash_drawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_drawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_crash_drawn);
    if (message_arena != submessage_arena) {
      bot_crash_drawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_drawn, submessage_arena);
    }
    set_has_bot_crash_drawn();
    event_.bot_crash_drawn_ = bot_crash_drawn;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_drawn)
}
void GameEvent::set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (defender_too_close_to_kick_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defender_too_close_to_kick_point);
    if (message_arena != submessage_arena) {
      defender_too_close_to_kick_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_too_close_to_kick_point, submessage_arena);
    }
    set_has_defender_too_close_to_kick_point();
    event_.defender_too_close_to_kick_point_ = defender_too_close_to_kick_point;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_too_close_to_kick_point)
}
void GameEvent::set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* bot_too_fast_in_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_too_fast_in_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_too_fast_in_stop);
    if (message_arena != submessage_arena) {
      bot_too_fast_in_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_too_fast_in_stop, submessage_arena);
    }
    set_has_bot_too_fast_in_stop();
    event_.bot_too_fast_in_stop_ = bot_too_fast_in_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_too_fast_in_stop)
}
void GameEvent::set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* bot_interfered_placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_interfered_placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_interfered_placement);
    if (message_arena != submessage_arena) {
      bot_interfered_placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_interfered_placement, submessage_arena);
    }
    set_has_bot_interfered_placement();
    event_.bot_interfered_placement_ = bot_interfered_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_interfered_placement)
}
void GameEvent::set_allocated_possible_goal(::GameEvent_Goal* possible_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (possible_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(possible_goal);
    if (message_arena != submessage_arena) {
      possible_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, possible_goal, submessage_arena);
    }
    set_has_possible_goal();
    event_.possible_goal_ = possible_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.possible_goal)
}
void GameEvent::set_allocated_goal(::GameEvent_Goal* goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goal);
    if (message_arena != submessage_arena) {
      goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    set_has_goal();
    event_.goal_ = goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.goal)
}
void GameEvent::set_allocated_invalid_goal(::GameEvent_Goal* invalid_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (invalid_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(invalid_goal);
    if (message_arena != submessage_arena) {
      invalid_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invalid_goal, submessage_arena);
    }
    set_has_invalid_goal();
    event_.invalid_goal_ = invalid_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.invalid_goal)
}
void GameEvent::set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_double_touched_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacker_double_touched_ball);
    if (message_arena != submessage_arena) {
      attacker_double_touched_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_double_touched_ball, submessage_arena);
    }
    set_has_attacker_double_touched_ball();
    event_.attacker_double_touched_ball_ = attacker_double_touched_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_double_touched_ball)
}
void GameEvent::set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* placement_succeeded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (placement_succeeded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(placement_succeeded);
    if (message_arena != submessage_arena) {
      placement_succeeded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_succeeded, submessage_arena);
    }
    set_has_placement_succeeded();
    event_.placement_succeeded_ = placement_succeeded;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_succeeded)
}
void GameEvent::set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* penalty_kick_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (penalty_kick_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(penalty_kick_failed);
    if (message_arena != submessage_arena) {
      penalty_kick_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, penalty_kick_failed, submessage_arena);
    }
    set_has_penalty_kick_failed();
    event_.penalty_kick_failed_ = penalty_kick_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.penalty_kick_failed)
}
void GameEvent::set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* no_progress_in_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (no_progress_in_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(no_progress_in_game);
    if (message_arena != submessage_arena) {
      no_progress_in_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_progress_in_game, submessage_arena);
    }
    set_has_no_progress_in_game();
    event_.no_progress_in_game_ = no_progress_in_game;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.no_progress_in_game)
}
void GameEvent::set_allocated_placement_failed(::GameEvent_PlacementFailed* placement_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (placement_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(placement_failed);
    if (message_arena != submessage_arena) {
      placement_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_failed, submessage_arena);
    }
    set_has_placement_failed();
    event_.placement_failed_ = placement_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_failed)
}
void GameEvent::set_allocated_multiple_cards(::GameEvent_MultipleCards* multiple_cards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_cards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiple_cards);
    if (message_arena != submessage_arena) {
      multiple_cards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_cards, submessage_arena);
    }
    set_has_multiple_cards();
    event_.multiple_cards_ = multiple_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_cards)
}
void GameEvent::set_allocated_multiple_fouls(::GameEvent_MultipleFouls* multiple_fouls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_fouls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiple_fouls);
    if (message_arena != submessage_arena) {
      multiple_fouls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_fouls, submessage_arena);
    }
    set_has_multiple_fouls();
    event_.multiple_fouls_ = multiple_fouls;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_fouls)
}
void GameEvent::set_allocated_bot_substitution(::GameEvent_BotSubstitution* bot_substitution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_substitution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_substitution);
    if (message_arena != submessage_arena) {
      bot_substitution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_substitution, submessage_arena);
    }
    set_has_bot_substitution();
    event_.bot_substitution_ = bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_substitution)
}
void GameEvent::set_allocated_excessive_bot_substitution(::GameEvent_ExcessiveBotSubstitution* excessive_bot_substitution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (excessive_bot_substitution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(excessive_bot_substitution);
    if (message_arena != submessage_arena) {
      excessive_bot_substitution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excessive_bot_substitution, submessage_arena);
    }
    set_has_excessive_bot_substitution();
    event_.excessive_bot_substitution_ = excessive_bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.excessive_bot_substitution)
}
void GameEvent::set_allocated_too_many_robots(::GameEvent_TooManyRobots* too_many_robots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (too_many_robots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(too_many_robots);
    if (message_arena != submessage_arena) {
      too_many_robots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, too_many_robots, submessage_arena);
    }
    set_has_too_many_robots();
    event_.too_many_robots_ = too_many_robots;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.too_many_robots)
}
void GameEvent::set_allocated_challenge_flag(::GameEvent_ChallengeFlag* challenge_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (challenge_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(challenge_flag);
    if (message_arena != submessage_arena) {
      challenge_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_flag, submessage_arena);
    }
    set_has_challenge_flag();
    event_.challenge_flag_ = challenge_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.challenge_flag)
}
void GameEvent::set_allocated_challenge_flag_handled(::GameEvent_ChallengeFlagHandled* challenge_flag_handled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (challenge_flag_handled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(challenge_flag_handled);
    if (message_arena != submessage_arena) {
      challenge_flag_handled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_flag_handled, submessage_arena);
    }
    set_has_challenge_flag_handled();
    event_.challenge_flag_handled_ = challenge_flag_handled;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.challenge_flag_handled)
}
void GameEvent::set_allocated_emergency_stop(::GameEvent_EmergencyStop* emergency_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (emergency_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emergency_stop);
    if (message_arena != submessage_arena) {
      emergency_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_stop, submessage_arena);
    }
    set_has_emergency_stop();
    event_.emergency_stop_ = emergency_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.emergency_stop)
}
void GameEvent::set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (unsporting_behavior_minor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unsporting_behavior_minor);
    if (message_arena != submessage_arena) {
      unsporting_behavior_minor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_minor, submessage_arena);
    }
    set_has_unsporting_behavior_minor();
    event_.unsporting_behavior_minor_ = unsporting_behavior_minor;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_minor)
}
void GameEvent::set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (unsporting_behavior_major) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unsporting_behavior_major);
    if (message_arena != submessage_arena) {
      unsporting_behavior_major = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_major, submessage_arena);
    }
    set_has_unsporting_behavior_major();
    event_.unsporting_behavior_major_ = unsporting_behavior_major;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_major)
}
void GameEvent::set_allocated_prepared(::GameEvent_Prepared* prepared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (prepared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prepared);
    if (message_arena != submessage_arena) {
      prepared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepared, submessage_arena);
    }
    set_has_prepared();
    event_.prepared_ = prepared;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.prepared)
}
void GameEvent::set_allocated_indirect_goal(::GameEvent_IndirectGoal* indirect_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (indirect_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indirect_goal);
    if (message_arena != submessage_arena) {
      indirect_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indirect_goal, submessage_arena);
    }
    set_has_indirect_goal();
    event_.indirect_goal_ = indirect_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.indirect_goal)
}
void GameEvent::set_allocated_chipped_goal(::GameEvent_ChippedGoal* chipped_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (chipped_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chipped_goal);
    if (message_arena != submessage_arena) {
      chipped_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chipped_goal, submessage_arena);
    }
    set_has_chipped_goal();
    event_.chipped_goal_ = chipped_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.chipped_goal)
}
void GameEvent::set_allocated_kick_timeout(::GameEvent_KickTimeout* kick_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (kick_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kick_timeout);
    if (message_arena != submessage_arena) {
      kick_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kick_timeout, submessage_arena);
    }
    set_has_kick_timeout();
    event_.kick_timeout_ = kick_timeout;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.kick_timeout)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_opponent_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacker_touched_opponent_in_defense_area);
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area();
    event_.attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_opponent_in_defense_area_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacker_touched_opponent_in_defense_area_skipped);
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area_skipped, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    event_.attacker_touched_opponent_in_defense_area_skipped_ = attacker_touched_opponent_in_defense_area_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}
void GameEvent::set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* bot_crash_unique_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_unique_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_crash_unique_skipped);
    if (message_arena != submessage_arena) {
      bot_crash_unique_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_unique_skipped, submessage_arena);
    }
    set_has_bot_crash_unique_skipped();
    event_.bot_crash_unique_skipped_ = bot_crash_unique_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique_skipped)
}
void GameEvent::set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* bot_pushed_bot_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (bot_pushed_bot_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_pushed_bot_skipped);
    if (message_arena != submessage_arena) {
      bot_pushed_bot_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot_skipped, submessage_arena);
    }
    set_has_bot_pushed_bot_skipped();
    event_.bot_pushed_bot_skipped_ = bot_pushed_bot_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot_skipped)
}
void GameEvent::set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (defender_in_defense_area_partially) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defender_in_defense_area_partially);
    if (message_arena != submessage_arena) {
      defender_in_defense_area_partially = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area_partially, submessage_arena);
    }
    set_has_defender_in_defense_area_partially();
    event_.defender_in_defense_area_partially_ = defender_in_defense_area_partially;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area_partially)
}
void GameEvent::set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* multiple_placement_failures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_placement_failures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiple_placement_failures);
    if (message_arena != submessage_arena) {
      multiple_placement_failures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_placement_failures, submessage_arena);
    }
    set_has_multiple_placement_failures();
    event_.multiple_placement_failures_ = multiple_placement_failures;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_placement_failures)
}
GameEvent::GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  origin_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      origin_(from.origin_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(created_timestamp_));
  clear_has_event();
  switch (from.event_case()) {
    case kBallLeftFieldTouchLine: {
      _internal_mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from._internal_ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      _internal_mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from._internal_ball_left_field_goal_line());
      break;
    }
    case kAimlessKick: {
      _internal_mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from._internal_aimless_kick());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      _internal_mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from._internal_attacker_too_close_to_defense_area());
      break;
    }
    case kDefenderInDefenseArea: {
      _internal_mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from._internal_defender_in_defense_area());
      break;
    }
    case kBoundaryCrossing: {
      _internal_mutable_boundary_crossing()->::GameEvent_BoundaryCrossing::MergeFrom(from._internal_boundary_crossing());
      break;
    }
    case kKeeperHeldBall: {
      _internal_mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from._internal_keeper_held_ball());
      break;
    }
    case kBotDribbledBallTooFar: {
      _internal_mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from._internal_bot_dribbled_ball_too_far());
      break;
    }
    case kBotPushedBot: {
      _internal_mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from._internal_bot_pushed_bot());
      break;
    }
    case kBotHeldBallDeliberately: {
      _internal_mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from._internal_bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      _internal_mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from._internal_bot_tipped_over());
      break;
    }
    case kBotDroppedParts: {
      _internal_mutable_bot_dropped_parts()->::GameEvent_BotDroppedParts::MergeFrom(from._internal_bot_dropped_parts());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      _internal_mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from._internal_attacker_touched_ball_in_defense_area());
      break;
    }
    case kBotKickedBallTooFast: {
      _internal_mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from._internal_bot_kicked_ball_too_fast());
      break;
    }
    case kBotCrashUnique: {
      _internal_mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from._internal_bot_crash_unique());
      break;
    }
    case kBotCrashDrawn: {
      _internal_mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from._internal_bot_crash_drawn());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      _internal_mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from._internal_defender_too_close_to_kick_point());
      break;
    }
    case kBotTooFastInStop: {
      _internal_mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from._internal_bot_too_fast_in_stop());
      break;
    }
    case kBotInterferedPlacement: {
      _internal_mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from._internal_bot_interfered_placement());
      break;
    }
    case kPossibleGoal: {
      _internal_mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from._internal_possible_goal());
      break;
    }
    case kGoal: {
      _internal_mutable_goal()->::GameEvent_Goal::MergeFrom(from._internal_goal());
      break;
    }
    case kInvalidGoal: {
      _internal_mutable_invalid_goal()->::GameEvent_Goal::MergeFrom(from._internal_invalid_goal());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      _internal_mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from._internal_attacker_double_touched_ball());
      break;
    }
    case kPlacementSucceeded: {
      _internal_mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from._internal_placement_succeeded());
      break;
    }
    case kPenaltyKickFailed: {
      _internal_mutable_penalty_kick_failed()->::GameEvent_PenaltyKickFailed::MergeFrom(from._internal_penalty_kick_failed());
      break;
    }
    case kNoProgressInGame: {
      _internal_mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from._internal_no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      _internal_mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from._internal_placement_failed());
      break;
    }
    case kMultipleCards: {
      _internal_mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from._internal_multiple_cards());
      break;
    }
    case kMultipleFouls: {
      _internal_mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from._internal_multiple_fouls());
      break;
    }
    case kBotSubstitution: {
      _internal_mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from._internal_bot_substitution());
      break;
    }
    case kExcessiveBotSubstitution: {
      _internal_mutable_excessive_bot_substitution()->::GameEvent_ExcessiveBotSubstitution::MergeFrom(from._internal_excessive_bot_substitution());
      break;
    }
    case kTooManyRobots: {
      _internal_mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from._internal_too_many_robots());
      break;
    }
    case kChallengeFlag: {
      _internal_mutable_challenge_flag()->::GameEvent_ChallengeFlag::MergeFrom(from._internal_challenge_flag());
      break;
    }
    case kChallengeFlagHandled: {
      _internal_mutable_challenge_flag_handled()->::GameEvent_ChallengeFlagHandled::MergeFrom(from._internal_challenge_flag_handled());
      break;
    }
    case kEmergencyStop: {
      _internal_mutable_emergency_stop()->::GameEvent_EmergencyStop::MergeFrom(from._internal_emergency_stop());
      break;
    }
    case kUnsportingBehaviorMinor: {
      _internal_mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from._internal_unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      _internal_mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from._internal_unsporting_behavior_major());
      break;
    }
    case kPrepared: {
      _internal_mutable_prepared()->::GameEvent_Prepared::MergeFrom(from._internal_prepared());
      break;
    }
    case kIndirectGoal: {
      _internal_mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from._internal_indirect_goal());
      break;
    }
    case kChippedGoal: {
      _internal_mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from._internal_chipped_goal());
      break;
    }
    case kKickTimeout: {
      _internal_mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from._internal_kick_timeout());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      _internal_mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from._internal_attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      _internal_mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from._internal_attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotCrashUniqueSkipped: {
      _internal_mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from._internal_bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBotSkipped: {
      _internal_mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from._internal_bot_pushed_bot_skipped());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      _internal_mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from._internal_defender_in_defense_area_partially());
      break;
    }
    case kMultiplePlacementFailures: {
      _internal_mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from._internal_multiple_placement_failures());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameEvent)
}

void GameEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_timestamp_) -
      reinterpret_cast<char*>(&type_)) + sizeof(created_timestamp_));
  clear_has_event();
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:GameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void GameEvent::ArenaDtor(void* object) {
  GameEvent* _this = reinterpret_cast< GameEvent* >(object);
  (void)_this;
}
void GameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent& GameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GameEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:GameEvent)
  switch (event_case()) {
    case kBallLeftFieldTouchLine: {
      if (GetArena() == nullptr) {
        delete event_.ball_left_field_touch_line_;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (GetArena() == nullptr) {
        delete event_.ball_left_field_goal_line_;
      }
      break;
    }
    case kAimlessKick: {
      if (GetArena() == nullptr) {
        delete event_.aimless_kick_;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (GetArena() == nullptr) {
        delete event_.attacker_too_close_to_defense_area_;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (GetArena() == nullptr) {
        delete event_.defender_in_defense_area_;
      }
      break;
    }
    case kBoundaryCrossing: {
      if (GetArena() == nullptr) {
        delete event_.boundary_crossing_;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (GetArena() == nullptr) {
        delete event_.keeper_held_ball_;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (GetArena() == nullptr) {
        delete event_.bot_dribbled_ball_too_far_;
      }
      break;
    }
    case kBotPushedBot: {
      if (GetArena() == nullptr) {
        delete event_.bot_pushed_bot_;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (GetArena() == nullptr) {
        delete event_.bot_held_ball_deliberately_;
      }
      break;
    }
    case kBotTippedOver: {
      if (GetArena() == nullptr) {
        delete event_.bot_tipped_over_;
      }
      break;
    }
    case kBotDroppedParts: {
      if (GetArena() == nullptr) {
        delete event_.bot_dropped_parts_;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (GetArena() == nullptr) {
        delete event_.attacker_touched_ball_in_defense_area_;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (GetArena() == nullptr) {
        delete event_.bot_kicked_ball_too_fast_;
      }
      break;
    }
    case kBotCrashUnique: {
      if (GetArena() == nullptr) {
        delete event_.bot_crash_unique_;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (GetArena() == nullptr) {
        delete event_.bot_crash_drawn_;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (GetArena() == nullptr) {
        delete event_.defender_too_close_to_kick_point_;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (GetArena() == nullptr) {
        delete event_.bot_too_fast_in_stop_;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (GetArena() == nullptr) {
        delete event_.bot_interfered_placement_;
      }
      break;
    }
    case kPossibleGoal: {
      if (GetArena() == nullptr) {
        delete event_.possible_goal_;
      }
      break;
    }
    case kGoal: {
      if (GetArena() == nullptr) {
        delete event_.goal_;
      }
      break;
    }
    case kInvalidGoal: {
      if (GetArena() == nullptr) {
        delete event_.invalid_goal_;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (GetArena() == nullptr) {
        delete event_.attacker_double_touched_ball_;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (GetArena() == nullptr) {
        delete event_.placement_succeeded_;
      }
      break;
    }
    case kPenaltyKickFailed: {
      if (GetArena() == nullptr) {
        delete event_.penalty_kick_failed_;
      }
      break;
    }
    case kNoProgressInGame: {
      if (GetArena() == nullptr) {
        delete event_.no_progress_in_game_;
      }
      break;
    }
    case kPlacementFailed: {
      if (GetArena() == nullptr) {
        delete event_.placement_failed_;
      }
      break;
    }
    case kMultipleCards: {
      if (GetArena() == nullptr) {
        delete event_.multiple_cards_;
      }
      break;
    }
    case kMultipleFouls: {
      if (GetArena() == nullptr) {
        delete event_.multiple_fouls_;
      }
      break;
    }
    case kBotSubstitution: {
      if (GetArena() == nullptr) {
        delete event_.bot_substitution_;
      }
      break;
    }
    case kExcessiveBotSubstitution: {
      if (GetArena() == nullptr) {
        delete event_.excessive_bot_substitution_;
      }
      break;
    }
    case kTooManyRobots: {
      if (GetArena() == nullptr) {
        delete event_.too_many_robots_;
      }
      break;
    }
    case kChallengeFlag: {
      if (GetArena() == nullptr) {
        delete event_.challenge_flag_;
      }
      break;
    }
    case kChallengeFlagHandled: {
      if (GetArena() == nullptr) {
        delete event_.challenge_flag_handled_;
      }
      break;
    }
    case kEmergencyStop: {
      if (GetArena() == nullptr) {
        delete event_.emergency_stop_;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (GetArena() == nullptr) {
        delete event_.unsporting_behavior_minor_;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (GetArena() == nullptr) {
        delete event_.unsporting_behavior_major_;
      }
      break;
    }
    case kPrepared: {
      if (GetArena() == nullptr) {
        delete event_.prepared_;
      }
      break;
    }
    case kIndirectGoal: {
      if (GetArena() == nullptr) {
        delete event_.indirect_goal_;
      }
      break;
    }
    case kChippedGoal: {
      if (GetArena() == nullptr) {
        delete event_.chipped_goal_;
      }
      break;
    }
    case kKickTimeout: {
      if (GetArena() == nullptr) {
        delete event_.kick_timeout_;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (GetArena() == nullptr) {
        delete event_.attacker_touched_opponent_in_defense_area_;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (GetArena() == nullptr) {
        delete event_.attacker_touched_opponent_in_defense_area_skipped_;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (GetArena() == nullptr) {
        delete event_.bot_crash_unique_skipped_;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (GetArena() == nullptr) {
        delete event_.bot_pushed_bot_skipped_;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (GetArena() == nullptr) {
        delete event_.defender_in_defense_area_partially_;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (GetArena() == nullptr) {
        delete event_.multiple_placement_failures_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&created_timestamp_) -
        reinterpret_cast<char*>(&type_)) + sizeof(created_timestamp_));
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameEvent.Prepared prepared = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepared(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.NoProgressInGame no_progress_in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_progress_in_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.PlacementFailed placement_failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_failed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.PlacementSucceeded placement_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_succeeded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_left_field_touch_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_left_field_goal_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.Goal goal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_indirect_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chipped_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.AimlessKick aimless_kick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_aimless_kick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_keeper_held_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_double_touched_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_ball_in_defense_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_opponent_in_defense_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_dribbled_ball_too_far(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_kicked_ball_too_fast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_too_close_to_defense_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_interfered_placement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_drawn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotCrashUnique bot_crash_unique = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_unique(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_unique_skipped(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotPushedBot bot_pushed_bot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pushed_bot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pushed_bot_skipped(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_held_ball_deliberately(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotTippedOver bot_tipped_over = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_tipped_over(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_too_fast_in_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_too_close_to_kick_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_in_defense_area_partially(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_in_defense_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.MultipleCards multiple_cards = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_placement_failures(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.MultipleFouls multiple_fouls = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_fouls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsporting_behavior_minor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsporting_behavior_major(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotSubstitution bot_substitution = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_substitution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.TooManyRobots too_many_robots = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_too_many_robots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.Goal possible_goal = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_possible_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent.Type type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameEvent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::GameEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string origin = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_origin();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.origin");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_opponent_in_defense_area_skipped(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BoundaryCrossing boundary_crossing = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary_crossing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.Goal invalid_goal = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_invalid_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_penalty_kick_failed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.ChallengeFlag challenge_flag = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.EmergencyStop emergency_stop = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_emergency_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_flag_handled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 created_timestamp = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_created_timestamp(&has_bits);
          created_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEvent.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.BotDroppedParts bot_dropped_parts = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_dropped_parts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_excessive_bot_substitution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::prepared(this), target, stream);
      break;
    }
    case kNoProgressInGame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::no_progress_in_game(this), target, stream);
      break;
    }
    case kPlacementFailed: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::placement_failed(this), target, stream);
      break;
    }
    case kPlacementSucceeded: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::placement_succeeded(this), target, stream);
      break;
    }
    case kBallLeftFieldTouchLine: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::ball_left_field_touch_line(this), target, stream);
      break;
    }
    case kBallLeftFieldGoalLine: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::ball_left_field_goal_line(this), target, stream);
      break;
    }
    case kGoal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::goal(this), target, stream);
      break;
    }
    case kIndirectGoal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::indirect_goal(this), target, stream);
      break;
    }
    case kChippedGoal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::chipped_goal(this), target, stream);
      break;
    }
    case kAimlessKick: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::aimless_kick(this), target, stream);
      break;
    }
    case kKickTimeout: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::kick_timeout(this), target, stream);
      break;
    }
    case kKeeperHeldBall: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::keeper_held_ball(this), target, stream);
      break;
    }
    case kAttackerDoubleTouchedBall: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::attacker_double_touched_ball(this), target, stream);
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::attacker_touched_ball_in_defense_area(this), target, stream);
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::attacker_touched_opponent_in_defense_area(this), target, stream);
      break;
    }
    case kBotDribbledBallTooFar: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::bot_dribbled_ball_too_far(this), target, stream);
      break;
    }
    case kBotKickedBallTooFast: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::bot_kicked_ball_too_fast(this), target, stream);
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::attacker_too_close_to_defense_area(this), target, stream);
      break;
    }
    case kBotInterferedPlacement: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::bot_interfered_placement(this), target, stream);
      break;
    }
    case kBotCrashDrawn: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::bot_crash_drawn(this), target, stream);
      break;
    }
    case kBotCrashUnique: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::bot_crash_unique(this), target, stream);
      break;
    }
    case kBotCrashUniqueSkipped: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::bot_crash_unique_skipped(this), target, stream);
      break;
    }
    case kBotPushedBot: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::bot_pushed_bot(this), target, stream);
      break;
    }
    case kBotPushedBotSkipped: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::bot_pushed_bot_skipped(this), target, stream);
      break;
    }
    case kBotHeldBallDeliberately: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          26, _Internal::bot_held_ball_deliberately(this), target, stream);
      break;
    }
    case kBotTippedOver: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          27, _Internal::bot_tipped_over(this), target, stream);
      break;
    }
    case kBotTooFastInStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          28, _Internal::bot_too_fast_in_stop(this), target, stream);
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          29, _Internal::defender_too_close_to_kick_point(this), target, stream);
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          30, _Internal::defender_in_defense_area_partially(this), target, stream);
      break;
    }
    case kDefenderInDefenseArea: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          31, _Internal::defender_in_defense_area(this), target, stream);
      break;
    }
    case kMultipleCards: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          32, _Internal::multiple_cards(this), target, stream);
      break;
    }
    case kMultiplePlacementFailures: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          33, _Internal::multiple_placement_failures(this), target, stream);
      break;
    }
    case kMultipleFouls: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          34, _Internal::multiple_fouls(this), target, stream);
      break;
    }
    case kUnsportingBehaviorMinor: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          35, _Internal::unsporting_behavior_minor(this), target, stream);
      break;
    }
    case kUnsportingBehaviorMajor: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          36, _Internal::unsporting_behavior_major(this), target, stream);
      break;
    }
    case kBotSubstitution: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          37, _Internal::bot_substitution(this), target, stream);
      break;
    }
    case kTooManyRobots: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          38, _Internal::too_many_robots(this), target, stream);
      break;
    }
    case kPossibleGoal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          39, _Internal::possible_goal(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .GameEvent.Type type = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_type(), target);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->_internal_origin_size(); i < n; i++) {
    const auto& s = this->_internal_origin(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    target = stream->WriteString(41, s, target);
  }

  switch (event_case()) {
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          42, _Internal::attacker_touched_opponent_in_defense_area_skipped(this), target, stream);
      break;
    }
    case kBoundaryCrossing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          43, _Internal::boundary_crossing(this), target, stream);
      break;
    }
    case kInvalidGoal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          44, _Internal::invalid_goal(this), target, stream);
      break;
    }
    case kPenaltyKickFailed: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          45, _Internal::penalty_kick_failed(this), target, stream);
      break;
    }
    case kChallengeFlag: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          46, _Internal::challenge_flag(this), target, stream);
      break;
    }
    case kEmergencyStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          47, _Internal::emergency_stop(this), target, stream);
      break;
    }
    case kChallengeFlagHandled: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          48, _Internal::challenge_flag_handled(this), target, stream);
      break;
    }
    default: ;
  }
  // optional uint64 created_timestamp = 49;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(49, this->_internal_created_timestamp(), target);
  }

  // optional string id = 50;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.id");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_id(), target);
  }

  switch (event_case()) {
    case kBotDroppedParts: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          51, _Internal::bot_dropped_parts(this), target, stream);
      break;
    }
    case kExcessiveBotSubstitution: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          52, _Internal::excessive_bot_substitution(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent)
  return target;
}

size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origin = 41;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(origin_.size());
  for (int i = 0, n = origin_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      origin_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .GameEvent.Type type = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint64 created_timestamp = 49;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_created_timestamp());
    }

  }
  switch (event_case()) {
    // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
    case kBallLeftFieldTouchLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ball_left_field_touch_line_);
      break;
    }
    // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
    case kBallLeftFieldGoalLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ball_left_field_goal_line_);
      break;
    }
    // .GameEvent.AimlessKick aimless_kick = 11;
    case kAimlessKick: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.aimless_kick_);
      break;
    }
    // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
    case kAttackerTooCloseToDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.attacker_too_close_to_defense_area_);
      break;
    }
    // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
    case kDefenderInDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.defender_in_defense_area_);
      break;
    }
    // .GameEvent.BoundaryCrossing boundary_crossing = 43;
    case kBoundaryCrossing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.boundary_crossing_);
      break;
    }
    // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
    case kKeeperHeldBall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.keeper_held_ball_);
      break;
    }
    // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
    case kBotDribbledBallTooFar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_dribbled_ball_too_far_);
      break;
    }
    // .GameEvent.BotPushedBot bot_pushed_bot = 24;
    case kBotPushedBot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_pushed_bot_);
      break;
    }
    // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
    case kBotHeldBallDeliberately: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_held_ball_deliberately_);
      break;
    }
    // .GameEvent.BotTippedOver bot_tipped_over = 27;
    case kBotTippedOver: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_tipped_over_);
      break;
    }
    // .GameEvent.BotDroppedParts bot_dropped_parts = 51;
    case kBotDroppedParts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_dropped_parts_);
      break;
    }
    // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
    case kAttackerTouchedBallInDefenseArea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_ball_in_defense_area_);
      break;
    }
    // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
    case kBotKickedBallTooFast: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_kicked_ball_too_fast_);
      break;
    }
    // .GameEvent.BotCrashUnique bot_crash_unique = 22;
    case kBotCrashUnique: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_unique_);
      break;
    }
    // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
    case kBotCrashDrawn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_drawn_);
      break;
    }
    // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
    case kDefenderTooCloseToKickPoint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.defender_too_close_to_kick_point_);
      break;
    }
    // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
    case kBotTooFastInStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_too_fast_in_stop_);
      break;
    }
    // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
    case kBotInterferedPlacement: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_interfered_placement_);
      break;
    }
    // .GameEvent.Goal possible_goal = 39;
    case kPossibleGoal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.possible_goal_);
      break;
    }
    // .GameEvent.Goal goal = 8;
    case kGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.goal_);
      break;
    }
    // .GameEvent.Goal invalid_goal = 44;
    case kInvalidGoal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.invalid_goal_);
      break;
    }
    // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
    case kAttackerDoubleTouchedBall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.attacker_double_touched_ball_);
      break;
    }
    // .GameEvent.PlacementSucceeded placement_succeeded = 5;
    case kPlacementSucceeded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.placement_succeeded_);
      break;
    }
    // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
    case kPenaltyKickFailed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.penalty_kick_failed_);
      break;
    }
    // .GameEvent.NoProgressInGame no_progress_in_game = 2;
    case kNoProgressInGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.no_progress_in_game_);
      break;
    }
    // .GameEvent.PlacementFailed placement_failed = 3;
    case kPlacementFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.placement_failed_);
      break;
    }
    // .GameEvent.MultipleCards multiple_cards = 32;
    case kMultipleCards: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.multiple_cards_);
      break;
    }
    // .GameEvent.MultipleFouls multiple_fouls = 34;
    case kMultipleFouls: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.multiple_fouls_);
      break;
    }
    // .GameEvent.BotSubstitution bot_substitution = 37;
    case kBotSubstitution: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_substitution_);
      break;
    }
    // .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
    case kExcessiveBotSubstitution: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.excessive_bot_substitution_);
      break;
    }
    // .GameEvent.TooManyRobots too_many_robots = 38;
    case kTooManyRobots: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.too_many_robots_);
      break;
    }
    // .GameEvent.ChallengeFlag challenge_flag = 46;
    case kChallengeFlag: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.challenge_flag_);
      break;
    }
    // .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
    case kChallengeFlagHandled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.challenge_flag_handled_);
      break;
    }
    // .GameEvent.EmergencyStop emergency_stop = 47;
    case kEmergencyStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.emergency_stop_);
      break;
    }
    // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
    case kUnsportingBehaviorMinor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.unsporting_behavior_minor_);
      break;
    }
    // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
    case kUnsportingBehaviorMajor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.unsporting_behavior_major_);
      break;
    }
    // .GameEvent.Prepared prepared = 1 [deprecated = true];
    case kPrepared: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.prepared_);
      break;
    }
    // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
    case kIndirectGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.indirect_goal_);
      break;
    }
    // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
    case kChippedGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.chipped_goal_);
      break;
    }
    // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
    case kKickTimeout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.kick_timeout_);
      break;
    }
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
    case kAttackerTouchedOpponentInDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_opponent_in_defense_area_);
      break;
    }
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.attacker_touched_opponent_in_defense_area_skipped_);
      break;
    }
    // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
    case kBotCrashUniqueSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_crash_unique_skipped_);
      break;
    }
    // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
    case kBotPushedBotSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.bot_pushed_bot_skipped_);
      break;
    }
    // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
    case kDefenderInDefenseAreaPartially: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.defender_in_defense_area_partially_);
      break;
    }
    // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
    case kMultiplePlacementFailures: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.multiple_placement_failures_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEvent)
    MergeFrom(*source);
  }
}

void GameEvent::MergeFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_.MergeFrom(from.origin_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      created_timestamp_ = from.created_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kBallLeftFieldTouchLine: {
      _internal_mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(from._internal_ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      _internal_mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(from._internal_ball_left_field_goal_line());
      break;
    }
    case kAimlessKick: {
      _internal_mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(from._internal_aimless_kick());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      _internal_mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(from._internal_attacker_too_close_to_defense_area());
      break;
    }
    case kDefenderInDefenseArea: {
      _internal_mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(from._internal_defender_in_defense_area());
      break;
    }
    case kBoundaryCrossing: {
      _internal_mutable_boundary_crossing()->::GameEvent_BoundaryCrossing::MergeFrom(from._internal_boundary_crossing());
      break;
    }
    case kKeeperHeldBall: {
      _internal_mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(from._internal_keeper_held_ball());
      break;
    }
    case kBotDribbledBallTooFar: {
      _internal_mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(from._internal_bot_dribbled_ball_too_far());
      break;
    }
    case kBotPushedBot: {
      _internal_mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from._internal_bot_pushed_bot());
      break;
    }
    case kBotHeldBallDeliberately: {
      _internal_mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(from._internal_bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      _internal_mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(from._internal_bot_tipped_over());
      break;
    }
    case kBotDroppedParts: {
      _internal_mutable_bot_dropped_parts()->::GameEvent_BotDroppedParts::MergeFrom(from._internal_bot_dropped_parts());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      _internal_mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(from._internal_attacker_touched_ball_in_defense_area());
      break;
    }
    case kBotKickedBallTooFast: {
      _internal_mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(from._internal_bot_kicked_ball_too_fast());
      break;
    }
    case kBotCrashUnique: {
      _internal_mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from._internal_bot_crash_unique());
      break;
    }
    case kBotCrashDrawn: {
      _internal_mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(from._internal_bot_crash_drawn());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      _internal_mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(from._internal_defender_too_close_to_kick_point());
      break;
    }
    case kBotTooFastInStop: {
      _internal_mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(from._internal_bot_too_fast_in_stop());
      break;
    }
    case kBotInterferedPlacement: {
      _internal_mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(from._internal_bot_interfered_placement());
      break;
    }
    case kPossibleGoal: {
      _internal_mutable_possible_goal()->::GameEvent_Goal::MergeFrom(from._internal_possible_goal());
      break;
    }
    case kGoal: {
      _internal_mutable_goal()->::GameEvent_Goal::MergeFrom(from._internal_goal());
      break;
    }
    case kInvalidGoal: {
      _internal_mutable_invalid_goal()->::GameEvent_Goal::MergeFrom(from._internal_invalid_goal());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      _internal_mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(from._internal_attacker_double_touched_ball());
      break;
    }
    case kPlacementSucceeded: {
      _internal_mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(from._internal_placement_succeeded());
      break;
    }
    case kPenaltyKickFailed: {
      _internal_mutable_penalty_kick_failed()->::GameEvent_PenaltyKickFailed::MergeFrom(from._internal_penalty_kick_failed());
      break;
    }
    case kNoProgressInGame: {
      _internal_mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(from._internal_no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      _internal_mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(from._internal_placement_failed());
      break;
    }
    case kMultipleCards: {
      _internal_mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(from._internal_multiple_cards());
      break;
    }
    case kMultipleFouls: {
      _internal_mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(from._internal_multiple_fouls());
      break;
    }
    case kBotSubstitution: {
      _internal_mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(from._internal_bot_substitution());
      break;
    }
    case kExcessiveBotSubstitution: {
      _internal_mutable_excessive_bot_substitution()->::GameEvent_ExcessiveBotSubstitution::MergeFrom(from._internal_excessive_bot_substitution());
      break;
    }
    case kTooManyRobots: {
      _internal_mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(from._internal_too_many_robots());
      break;
    }
    case kChallengeFlag: {
      _internal_mutable_challenge_flag()->::GameEvent_ChallengeFlag::MergeFrom(from._internal_challenge_flag());
      break;
    }
    case kChallengeFlagHandled: {
      _internal_mutable_challenge_flag_handled()->::GameEvent_ChallengeFlagHandled::MergeFrom(from._internal_challenge_flag_handled());
      break;
    }
    case kEmergencyStop: {
      _internal_mutable_emergency_stop()->::GameEvent_EmergencyStop::MergeFrom(from._internal_emergency_stop());
      break;
    }
    case kUnsportingBehaviorMinor: {
      _internal_mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(from._internal_unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      _internal_mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(from._internal_unsporting_behavior_major());
      break;
    }
    case kPrepared: {
      _internal_mutable_prepared()->::GameEvent_Prepared::MergeFrom(from._internal_prepared());
      break;
    }
    case kIndirectGoal: {
      _internal_mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(from._internal_indirect_goal());
      break;
    }
    case kChippedGoal: {
      _internal_mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(from._internal_chipped_goal());
      break;
    }
    case kKickTimeout: {
      _internal_mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(from._internal_kick_timeout());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      _internal_mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from._internal_attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      _internal_mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from._internal_attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotCrashUniqueSkipped: {
      _internal_mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(from._internal_bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBotSkipped: {
      _internal_mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(from._internal_bot_pushed_bot_skipped());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      _internal_mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(from._internal_defender_in_defense_area_partially());
      break;
    }
    case kMultiplePlacementFailures: {
      _internal_mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(from._internal_multiple_placement_failures());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void GameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  switch (event_case()) {
    case kBallLeftFieldTouchLine: {
      if (has_ball_left_field_touch_line()) {
        if (!this->ball_left_field_touch_line().IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (has_ball_left_field_goal_line()) {
        if (!this->ball_left_field_goal_line().IsInitialized()) return false;
      }
      break;
    }
    case kAimlessKick: {
      if (has_aimless_kick()) {
        if (!this->aimless_kick().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (has_attacker_too_close_to_defense_area()) {
        if (!this->attacker_too_close_to_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (has_defender_in_defense_area()) {
        if (!this->defender_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kBoundaryCrossing: {
      if (has_boundary_crossing()) {
        if (!this->boundary_crossing().IsInitialized()) return false;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (has_keeper_held_ball()) {
        if (!this->keeper_held_ball().IsInitialized()) return false;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (has_bot_dribbled_ball_too_far()) {
        if (!this->bot_dribbled_ball_too_far().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBot: {
      if (has_bot_pushed_bot()) {
        if (!this->bot_pushed_bot().IsInitialized()) return false;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (has_bot_held_ball_deliberately()) {
        if (!this->bot_held_ball_deliberately().IsInitialized()) return false;
      }
      break;
    }
    case kBotTippedOver: {
      if (has_bot_tipped_over()) {
        if (!this->bot_tipped_over().IsInitialized()) return false;
      }
      break;
    }
    case kBotDroppedParts: {
      if (has_bot_dropped_parts()) {
        if (!this->bot_dropped_parts().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (has_attacker_touched_ball_in_defense_area()) {
        if (!this->attacker_touched_ball_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (has_bot_kicked_ball_too_fast()) {
        if (!this->bot_kicked_ball_too_fast().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUnique: {
      if (has_bot_crash_unique()) {
        if (!this->bot_crash_unique().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (has_bot_crash_drawn()) {
        if (!this->bot_crash_drawn().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (has_defender_too_close_to_kick_point()) {
        if (!this->defender_too_close_to_kick_point().IsInitialized()) return false;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (has_bot_too_fast_in_stop()) {
        if (!this->bot_too_fast_in_stop().IsInitialized()) return false;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (has_bot_interfered_placement()) {
        if (!this->bot_interfered_placement().IsInitialized()) return false;
      }
      break;
    }
    case kPossibleGoal: {
      if (has_possible_goal()) {
        if (!this->possible_goal().IsInitialized()) return false;
      }
      break;
    }
    case kGoal: {
      if (has_goal()) {
        if (!this->goal().IsInitialized()) return false;
      }
      break;
    }
    case kInvalidGoal: {
      if (has_invalid_goal()) {
        if (!this->invalid_goal().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (has_attacker_double_touched_ball()) {
        if (!this->attacker_double_touched_ball().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (has_placement_succeeded()) {
        if (!this->placement_succeeded().IsInitialized()) return false;
      }
      break;
    }
    case kPenaltyKickFailed: {
      if (has_penalty_kick_failed()) {
        if (!this->penalty_kick_failed().IsInitialized()) return false;
      }
      break;
    }
    case kNoProgressInGame: {
      if (has_no_progress_in_game()) {
        if (!this->no_progress_in_game().IsInitialized()) return false;
      }
      break;
    }
    case kPlacementFailed: {
      if (has_placement_failed()) {
        if (!this->placement_failed().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleCards: {
      if (has_multiple_cards()) {
        if (!this->multiple_cards().IsInitialized()) return false;
      }
      break;
    }
    case kMultipleFouls: {
      if (has_multiple_fouls()) {
        if (!this->multiple_fouls().IsInitialized()) return false;
      }
      break;
    }
    case kBotSubstitution: {
      if (has_bot_substitution()) {
        if (!this->bot_substitution().IsInitialized()) return false;
      }
      break;
    }
    case kExcessiveBotSubstitution: {
      if (has_excessive_bot_substitution()) {
        if (!this->excessive_bot_substitution().IsInitialized()) return false;
      }
      break;
    }
    case kTooManyRobots: {
      if (has_too_many_robots()) {
        if (!this->too_many_robots().IsInitialized()) return false;
      }
      break;
    }
    case kChallengeFlag: {
      if (has_challenge_flag()) {
        if (!this->challenge_flag().IsInitialized()) return false;
      }
      break;
    }
    case kChallengeFlagHandled: {
      if (has_challenge_flag_handled()) {
        if (!this->challenge_flag_handled().IsInitialized()) return false;
      }
      break;
    }
    case kEmergencyStop: {
      if (has_emergency_stop()) {
        if (!this->emergency_stop().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (has_unsporting_behavior_minor()) {
        if (!this->unsporting_behavior_minor().IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (has_unsporting_behavior_major()) {
        if (!this->unsporting_behavior_major().IsInitialized()) return false;
      }
      break;
    }
    case kPrepared: {
      break;
    }
    case kIndirectGoal: {
      if (has_indirect_goal()) {
        if (!this->indirect_goal().IsInitialized()) return false;
      }
      break;
    }
    case kChippedGoal: {
      if (has_chipped_goal()) {
        if (!this->chipped_goal().IsInitialized()) return false;
      }
      break;
    }
    case kKickTimeout: {
      if (has_kick_timeout()) {
        if (!this->kick_timeout().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (has_attacker_touched_opponent_in_defense_area()) {
        if (!this->attacker_touched_opponent_in_defense_area().IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (has_attacker_touched_opponent_in_defense_area_skipped()) {
        if (!this->attacker_touched_opponent_in_defense_area_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (has_bot_crash_unique_skipped()) {
        if (!this->bot_crash_unique_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (has_bot_pushed_bot_skipped()) {
        if (!this->bot_pushed_bot_skipped().IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (has_defender_in_defense_area_partially()) {
        if (!this->defender_in_defense_area_partially().IsInitialized()) return false;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (has_multiple_placement_failures()) {
        if (!this->multiple_placement_failures().IsInitialized()) return false;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameEvent::InternalSwap(GameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origin_.InternalSwap(&other->origin_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent, created_timestamp_)
      + sizeof(GameEvent::created_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GameEvent, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameEvent_BallLeftField* Arena::CreateMaybeMessage< ::GameEvent_BallLeftField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BallLeftField >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AimlessKick* Arena::CreateMaybeMessage< ::GameEvent_AimlessKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AimlessKick >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_Goal* Arena::CreateMaybeMessage< ::GameEvent_Goal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_Goal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_IndirectGoal* Arena::CreateMaybeMessage< ::GameEvent_IndirectGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_IndirectGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ChippedGoal* Arena::CreateMaybeMessage< ::GameEvent_ChippedGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ChippedGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotTooFastInStop* Arena::CreateMaybeMessage< ::GameEvent_BotTooFastInStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotTooFastInStop >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderTooCloseToKickPoint* Arena::CreateMaybeMessage< ::GameEvent_DefenderTooCloseToKickPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderTooCloseToKickPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotCrashDrawn* Arena::CreateMaybeMessage< ::GameEvent_BotCrashDrawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotCrashDrawn >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotCrashUnique* Arena::CreateMaybeMessage< ::GameEvent_BotCrashUnique >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotCrashUnique >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotPushedBot* Arena::CreateMaybeMessage< ::GameEvent_BotPushedBot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotPushedBot >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotTippedOver* Arena::CreateMaybeMessage< ::GameEvent_BotTippedOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotTippedOver >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotDroppedParts* Arena::CreateMaybeMessage< ::GameEvent_BotDroppedParts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotDroppedParts >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderInDefenseAreaPartially* Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseAreaPartially >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderInDefenseAreaPartially >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTouchedBallInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedBallInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTouchedBallInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotKickedBallTooFast* Arena::CreateMaybeMessage< ::GameEvent_BotKickedBallTooFast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotKickedBallTooFast >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotDribbledBallTooFar* Arena::CreateMaybeMessage< ::GameEvent_BotDribbledBallTooFar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotDribbledBallTooFar >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTouchedOpponentInDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerDoubleTouchedBall* Arena::CreateMaybeMessage< ::GameEvent_AttackerDoubleTouchedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerDoubleTouchedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTooCloseToDefenseArea* Arena::CreateMaybeMessage< ::GameEvent_AttackerTooCloseToDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTooCloseToDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotHeldBallDeliberately* Arena::CreateMaybeMessage< ::GameEvent_BotHeldBallDeliberately >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotHeldBallDeliberately >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotInterferedPlacement* Arena::CreateMaybeMessage< ::GameEvent_BotInterferedPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotInterferedPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultipleCards* Arena::CreateMaybeMessage< ::GameEvent_MultipleCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultipleCards >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultipleFouls* Arena::CreateMaybeMessage< ::GameEvent_MultipleFouls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultipleFouls >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultiplePlacementFailures* Arena::CreateMaybeMessage< ::GameEvent_MultiplePlacementFailures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultiplePlacementFailures >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_KickTimeout* Arena::CreateMaybeMessage< ::GameEvent_KickTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_KickTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_NoProgressInGame* Arena::CreateMaybeMessage< ::GameEvent_NoProgressInGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_NoProgressInGame >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PlacementFailed* Arena::CreateMaybeMessage< ::GameEvent_PlacementFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PlacementFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_UnsportingBehaviorMinor* Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMinor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_UnsportingBehaviorMinor >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_UnsportingBehaviorMajor* Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMajor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_UnsportingBehaviorMajor >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_KeeperHeldBall* Arena::CreateMaybeMessage< ::GameEvent_KeeperHeldBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_KeeperHeldBall >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PlacementSucceeded* Arena::CreateMaybeMessage< ::GameEvent_PlacementSucceeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PlacementSucceeded >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_Prepared* Arena::CreateMaybeMessage< ::GameEvent_Prepared >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_Prepared >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotSubstitution* Arena::CreateMaybeMessage< ::GameEvent_BotSubstitution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotSubstitution >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ExcessiveBotSubstitution* Arena::CreateMaybeMessage< ::GameEvent_ExcessiveBotSubstitution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ExcessiveBotSubstitution >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ChallengeFlag* Arena::CreateMaybeMessage< ::GameEvent_ChallengeFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ChallengeFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ChallengeFlagHandled* Arena::CreateMaybeMessage< ::GameEvent_ChallengeFlagHandled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ChallengeFlagHandled >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_EmergencyStop* Arena::CreateMaybeMessage< ::GameEvent_EmergencyStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_EmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_TooManyRobots* Arena::CreateMaybeMessage< ::GameEvent_TooManyRobots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_TooManyRobots >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BoundaryCrossing* Arena::CreateMaybeMessage< ::GameEvent_BoundaryCrossing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BoundaryCrossing >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PenaltyKickFailed* Arena::CreateMaybeMessage< ::GameEvent_PenaltyKickFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PenaltyKickFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent* Arena::CreateMaybeMessage< ::GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
