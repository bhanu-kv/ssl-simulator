// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_team.proto

#include "ssl_game_controller_team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto;
namespace gameController {
class TeamRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamRegistration> _instance;
} _TeamRegistration_default_instance_;
class TeamToControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamToController> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 desired_keeper_;
  int advantage_choice_;
  bool substitute_bot_;
  bool ping_;
} _TeamToController_default_instance_;
class ControllerToTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerToTeam> _instance;
  const ::gameController::ControllerReply* controller_reply_;
} _ControllerToTeam_default_instance_;
}  // namespace gameController
static void InitDefaultsscc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_ControllerToTeam_default_instance_;
    new (ptr) ::gameController::ControllerToTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::ControllerToTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_TeamRegistration_default_instance_;
    new (ptr) ::gameController::TeamRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::TeamRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_TeamToController_default_instance_;
    new (ptr) ::gameController::TeamToController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::TeamToController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgame_5fcontroller_5fteam_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gameController::TeamRegistration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameController::TeamRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameController::TeamRegistration, team_name_),
  PROTOBUF_FIELD_OFFSET(::gameController::TeamRegistration, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gameController::TeamToController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameController::TeamToController, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gameController::TeamToController, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameController::TeamToController, signature_),
  offsetof(::gameController::TeamToControllerDefaultTypeInternal, desired_keeper_),
  offsetof(::gameController::TeamToControllerDefaultTypeInternal, advantage_choice_),
  offsetof(::gameController::TeamToControllerDefaultTypeInternal, substitute_bot_),
  offsetof(::gameController::TeamToControllerDefaultTypeInternal, ping_),
  PROTOBUF_FIELD_OFFSET(::gameController::TeamToController, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToTeam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gameController::ControllerToTeamDefaultTypeInternal, controller_reply_),
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToTeam, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gameController::TeamRegistration)},
  { 9, 20, sizeof(::gameController::TeamToController)},
  { 25, -1, sizeof(::gameController::ControllerToTeam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_TeamRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_TeamToController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_ControllerToTeam_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgame_5fcontroller_5fteam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ssl_game_controller_team.proto\022\016gameCo"
  "ntroller\032 ssl_game_controller_common.pro"
  "to\"S\n\020TeamRegistration\022\021\n\tteam_name\030\001 \002("
  "\t\022,\n\tsignature\030\002 \001(\0132\031.gameController.Si"
  "gnature\"\310\001\n\020TeamToController\022,\n\tsignatur"
  "e\030\001 \001(\0132\031.gameController.Signature\022\030\n\016de"
  "sired_keeper\030\002 \001(\005H\000\022;\n\020advantage_choice"
  "\030\003 \001(\0162\037.gameController.AdvantageChoiceH"
  "\000\022\030\n\016substitute_bot\030\004 \001(\010H\000\022\016\n\004ping\030\005 \001("
  "\010H\000B\005\n\003msg\"\\\n\020ControllerToTeam\022;\n\020contro"
  "ller_reply\030\001 \001(\0132\037.gameController.Contro"
  "llerReplyH\000B\005\n\003msgJ\004\010\002\020\003*)\n\017AdvantageCho"
  "ice\022\010\n\004STOP\020\000\022\014\n\010CONTINUE\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_deps[1] = {
  &::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_sccs[3] = {
  &scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
  &scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
  &scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgame_5fcontroller_5fteam_2eproto, "ssl_game_controller_team.proto", 507,
  &descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_once, descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_sccs, descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto::offsets,
  file_level_metadata_ssl_5fgame_5fcontroller_5fteam_2eproto, 3, file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto, file_level_service_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgame_5fcontroller_5fteam_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto)), true);
namespace gameController {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdvantageChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto);
  return file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto[0];
}
bool AdvantageChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TeamRegistration::InitAsDefaultInstance() {
  ::gameController::_TeamRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::gameController::Signature*>(
      ::gameController::Signature::internal_default_instance());
}
class TeamRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamRegistration>()._has_bits_);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gameController::Signature& signature(const TeamRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::gameController::Signature&
TeamRegistration::_Internal::signature(const TeamRegistration* msg) {
  return *msg->signature_;
}
void TeamRegistration::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TeamRegistration::TeamRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.TeamRegistration)
}
TeamRegistration::TeamRegistration(const TeamRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_name(),
      GetArena());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::gameController::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gameController.TeamRegistration)
}

void TeamRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_ = nullptr;
}

TeamRegistration::~TeamRegistration() {
  // @@protoc_insertion_point(destructor:gameController.TeamRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void TeamRegistration::ArenaDtor(void* object) {
  TeamRegistration* _this = reinterpret_cast< TeamRegistration* >(object);
  (void)_this;
}
void TeamRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamRegistration& TeamRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void TeamRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.TeamRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string team_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameController.TeamRegistration.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gameController.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.TeamRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gameController.TeamRegistration.team_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_name(), target);
  }

  // optional .gameController.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.TeamRegistration)
  return target;
}

size_t TeamRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.TeamRegistration)
  size_t total_size = 0;

  // required string team_name = 1;
  if (_internal_has_team_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gameController.Signature signature = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.TeamRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.TeamRegistration)
    MergeFrom(*source);
  }
}

void TeamRegistration::MergeFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::gameController::Signature::MergeFrom(from._internal_signature());
    }
  }
}

void TeamRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRegistration::CopyFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamRegistration::InternalSwap(TeamRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamToController::InitAsDefaultInstance() {
  ::gameController::_TeamToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::gameController::Signature*>(
      ::gameController::Signature::internal_default_instance());
  ::gameController::_TeamToController_default_instance_.desired_keeper_ = 0;
  ::gameController::_TeamToController_default_instance_.advantage_choice_ = 0;
  ::gameController::_TeamToController_default_instance_.substitute_bot_ = false;
  ::gameController::_TeamToController_default_instance_.ping_ = false;
}
class TeamToController::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamToController>()._has_bits_);
  static const ::gameController::Signature& signature(const TeamToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::gameController::Signature&
TeamToController::_Internal::signature(const TeamToController* msg) {
  return *msg->signature_;
}
void TeamToController::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TeamToController::TeamToController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.TeamToController)
}
TeamToController::TeamToController(const TeamToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    signature_ = new ::gameController::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageChoice: {
      _internal_set_advantage_choice(from._internal_advantage_choice());
      break;
    }
    case kSubstituteBot: {
      _internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gameController.TeamToController)
}

void TeamToController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  signature_ = nullptr;
  clear_has_msg();
}

TeamToController::~TeamToController() {
  // @@protoc_insertion_point(destructor:gameController.TeamToController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamToController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void TeamToController::ArenaDtor(void* object) {
  TeamToController* _this = reinterpret_cast< TeamToController* >(object);
  (void)_this;
}
void TeamToController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamToController& TeamToController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void TeamToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:gameController.TeamToController)
  switch (msg_case()) {
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kAdvantageChoice: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void TeamToController::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.TeamToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != nullptr);
    signature_->Clear();
  }
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamToController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gameController.Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 desired_keeper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gameController.AdvantageChoice advantage_choice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gameController::AdvantageChoice_IsValid(val))) {
            _internal_set_advantage_choice(static_cast<::gameController::AdvantageChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // bool substitute_bot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_substitute_bot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_ping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamToController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.TeamToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gameController.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signature(this), target, stream);
  }

  switch (msg_case()) {
    case kDesiredKeeper: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_desired_keeper(), target);
      break;
    }
    case kAdvantageChoice: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_advantage_choice(), target);
      break;
    }
    case kSubstituteBot: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_substitute_bot(), target);
      break;
    }
    case kPing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ping(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.TeamToController)
  return target;
}

size_t TeamToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.TeamToController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gameController.Signature signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  switch (msg_case()) {
    // int32 desired_keeper = 2;
    case kDesiredKeeper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_desired_keeper());
      break;
    }
    // .gameController.AdvantageChoice advantage_choice = 3;
    case kAdvantageChoice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_advantage_choice());
      break;
    }
    // bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // bool ping = 5;
    case kPing: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamToController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamToController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamToController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.TeamToController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.TeamToController)
    MergeFrom(*source);
  }
}

void TeamToController::MergeFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _internal_mutable_signature()->::gameController::Signature::MergeFrom(from._internal_signature());
  }
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageChoice: {
      _internal_set_advantage_choice(from._internal_advantage_choice());
      break;
    }
    case kSubstituteBot: {
      _internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void TeamToController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamToController::CopyFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamToController::InternalSwap(TeamToController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(signature_, other->signature_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamToController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControllerToTeam::InitAsDefaultInstance() {
  ::gameController::_ControllerToTeam_default_instance_.controller_reply_ = const_cast< ::gameController::ControllerReply*>(
      ::gameController::ControllerReply::internal_default_instance());
}
class ControllerToTeam::_Internal {
 public:
  static const ::gameController::ControllerReply& controller_reply(const ControllerToTeam* msg);
};

const ::gameController::ControllerReply&
ControllerToTeam::_Internal::controller_reply(const ControllerToTeam* msg) {
  return *msg->msg_.controller_reply_;
}
void ControllerToTeam::set_allocated_controller_reply(::gameController::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply)->GetArena();
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:gameController.ControllerToTeam.controller_reply)
}
void ControllerToTeam::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArena() == nullptr) {
      delete msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
ControllerToTeam::ControllerToTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.ControllerToTeam)
}
ControllerToTeam::ControllerToTeam(const ControllerToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::gameController::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gameController.ControllerToTeam)
}

void ControllerToTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  clear_has_msg();
}

ControllerToTeam::~ControllerToTeam() {
  // @@protoc_insertion_point(destructor:gameController.ControllerToTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerToTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToTeam::ArenaDtor(void* object) {
  ControllerToTeam* _this = reinterpret_cast< ControllerToTeam* >(object);
  (void)_this;
}
void ControllerToTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerToTeam& ControllerToTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void ControllerToTeam::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:gameController.ControllerToTeam)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArena() == nullptr) {
        delete msg_.controller_reply_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.ControllerToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gameController.ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerToTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.ControllerToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gameController.ControllerReply controller_reply = 1;
  if (_internal_has_controller_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.ControllerToTeam)
  return target;
}

size_t ControllerToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.ControllerToTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .gameController.ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerToTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.ControllerToTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.ControllerToTeam)
    MergeFrom(*source);
  }
}

void ControllerToTeam::MergeFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::gameController::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToTeam::CopyFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToTeam::IsInitialized() const {
  return true;
}

void ControllerToTeam::InternalSwap(ControllerToTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameController
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameController::TeamRegistration* Arena::CreateMaybeMessage< ::gameController::TeamRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::TeamRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::gameController::TeamToController* Arena::CreateMaybeMessage< ::gameController::TeamToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::TeamToController >(arena);
}
template<> PROTOBUF_NOINLINE ::gameController::ControllerToTeam* Arena::CreateMaybeMessage< ::gameController::ControllerToTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::ControllerToTeam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
