// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinput.proto

#include "userinput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotMoveCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadioCommand_robot_2eproto;
namespace amun {
class UserInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInput> _instance;
} _UserInput_default_instance_;
}  // namespace amun
static void InitDefaultsscc_info_UserInput_userinput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_UserInput_default_instance_;
    new (ptr) ::amun::UserInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::UserInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserInput_userinput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserInput_userinput_2eproto}, {
      &scc_info_RadioCommand_robot_2eproto.base,
      &scc_info_RobotMoveCommand_command_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userinput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userinput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userinput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userinput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::UserInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::UserInput, radio_command_),
  PROTOBUF_FIELD_OFFSET(::amun::UserInput, move_command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::amun::UserInput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_UserInput_default_instance_),
};

const char descriptor_table_protodef_userinput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017userinput.proto\022\004amun\032\013robot.proto\032\rco"
  "mmand.proto\"e\n\tUserInput\022*\n\rradio_comman"
  "d\030\001 \003(\0132\023.robot.RadioCommand\022,\n\014move_com"
  "mand\030\002 \003(\0132\026.amun.RobotMoveCommandB\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userinput_2eproto_deps[2] = {
  &::descriptor_table_command_2eproto,
  &::descriptor_table_robot_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userinput_2eproto_sccs[1] = {
  &scc_info_UserInput_userinput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userinput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userinput_2eproto = {
  false, false, descriptor_table_protodef_userinput_2eproto, "userinput.proto", 159,
  &descriptor_table_userinput_2eproto_once, descriptor_table_userinput_2eproto_sccs, descriptor_table_userinput_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_userinput_2eproto::offsets,
  file_level_metadata_userinput_2eproto, 1, file_level_enum_descriptors_userinput_2eproto, file_level_service_descriptors_userinput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userinput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userinput_2eproto)), true);
namespace amun {

// ===================================================================

void UserInput::InitAsDefaultInstance() {
}
class UserInput::_Internal {
 public:
};

void UserInput::clear_radio_command() {
  radio_command_.Clear();
}
void UserInput::clear_move_command() {
  move_command_.Clear();
}
UserInput::UserInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  radio_command_(arena),
  move_command_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.UserInput)
}
UserInput::UserInput(const UserInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      radio_command_(from.radio_command_),
      move_command_(from.move_command_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.UserInput)
}

void UserInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInput_userinput_2eproto.base);
}

UserInput::~UserInput() {
  // @@protoc_insertion_point(destructor:amun.UserInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserInput::ArenaDtor(void* object) {
  UserInput* _this = reinterpret_cast< UserInput* >(object);
  (void)_this;
}
void UserInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInput& UserInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInput_userinput_2eproto.base);
  return *internal_default_instance();
}


void UserInput::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.UserInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radio_command_.Clear();
  move_command_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .robot.RadioCommand radio_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radio_command(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .amun.RobotMoveCommand move_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_move_command(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.UserInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robot.RadioCommand radio_command = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radio_command_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_radio_command(i), target, stream);
  }

  // repeated .amun.RobotMoveCommand move_command = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_move_command_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_move_command(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.UserInput)
  return target;
}

size_t UserInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.UserInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .robot.RadioCommand radio_command = 1;
  total_size += 1UL * this->_internal_radio_command_size();
  for (const auto& msg : this->radio_command_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .amun.RobotMoveCommand move_command = 2;
  total_size += 1UL * this->_internal_move_command_size();
  for (const auto& msg : this->move_command_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.UserInput)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.UserInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.UserInput)
    MergeFrom(*source);
  }
}

void UserInput::MergeFrom(const UserInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.UserInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radio_command_.MergeFrom(from.radio_command_);
  move_command_.MergeFrom(from.move_command_);
}

void UserInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.UserInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInput::CopyFrom(const UserInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.UserInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInput::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(radio_command_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(move_command_)) return false;
  return true;
}

void UserInput::InternalSwap(UserInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  radio_command_.InternalSwap(&other->radio_command_);
  move_command_.InternalSwap(&other->move_command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace amun
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amun::UserInput* Arena::CreateMaybeMessage< ::amun::UserInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::UserInput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
