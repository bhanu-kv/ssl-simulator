// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "logfile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_timeline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_timeline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_timeline_2eproto;
namespace timeline {
class EventWrapper;
class EventWrapperDefaultTypeInternal;
extern EventWrapperDefaultTypeInternal _EventWrapper_default_instance_;
class FrameDescriptor;
class FrameDescriptorDefaultTypeInternal;
extern FrameDescriptorDefaultTypeInternal _FrameDescriptor_default_instance_;
class FrameLookup;
class FrameLookupDefaultTypeInternal;
extern FrameLookupDefaultTypeInternal _FrameLookup_default_instance_;
class GameEvent;
class GameEventDefaultTypeInternal;
extern GameEventDefaultTypeInternal _GameEvent_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class TimelineInit;
class TimelineInitDefaultTypeInternal;
extern TimelineInitDefaultTypeInternal _TimelineInit_default_instance_;
}  // namespace timeline
PROTOBUF_NAMESPACE_OPEN
template<> ::timeline::EventWrapper* Arena::CreateMaybeMessage<::timeline::EventWrapper>(Arena*);
template<> ::timeline::FrameDescriptor* Arena::CreateMaybeMessage<::timeline::FrameDescriptor>(Arena*);
template<> ::timeline::FrameLookup* Arena::CreateMaybeMessage<::timeline::FrameLookup>(Arena*);
template<> ::timeline::GameEvent* Arena::CreateMaybeMessage<::timeline::GameEvent>(Arena*);
template<> ::timeline::Status* Arena::CreateMaybeMessage<::timeline::Status>(Arena*);
template<> ::timeline::TimelineInit* Arena::CreateMaybeMessage<::timeline::TimelineInit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace timeline {

enum GameEvent_Progress : int {
  GameEvent_Progress_Open = 1,
  GameEvent_Progress_Closed = 2,
  GameEvent_Progress_Postponed = 3,
  GameEvent_Progress_Resolved = 4,
  GameEvent_Progress_InProgress = 5,
  GameEvent_Progress_Info = 6,
  GameEvent_Progress_Merged = 7
};
bool GameEvent_Progress_IsValid(int value);
constexpr GameEvent_Progress GameEvent_Progress_Progress_MIN = GameEvent_Progress_Open;
constexpr GameEvent_Progress GameEvent_Progress_Progress_MAX = GameEvent_Progress_Merged;
constexpr int GameEvent_Progress_Progress_ARRAYSIZE = GameEvent_Progress_Progress_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEvent_Progress_descriptor();
template<typename T>
inline const std::string& GameEvent_Progress_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameEvent_Progress>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameEvent_Progress_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameEvent_Progress_descriptor(), enum_t_value);
}
inline bool GameEvent_Progress_Parse(
    const std::string& name, GameEvent_Progress* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameEvent_Progress>(
    GameEvent_Progress_descriptor(), name, value);
}
enum TimelineInit_Resolved : int {
  TimelineInit_Resolved_Solved = 1,
  TimelineInit_Resolved_Conflicting = 2
};
bool TimelineInit_Resolved_IsValid(int value);
constexpr TimelineInit_Resolved TimelineInit_Resolved_Resolved_MIN = TimelineInit_Resolved_Solved;
constexpr TimelineInit_Resolved TimelineInit_Resolved_Resolved_MAX = TimelineInit_Resolved_Conflicting;
constexpr int TimelineInit_Resolved_Resolved_ARRAYSIZE = TimelineInit_Resolved_Resolved_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimelineInit_Resolved_descriptor();
template<typename T>
inline const std::string& TimelineInit_Resolved_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimelineInit_Resolved>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimelineInit_Resolved_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimelineInit_Resolved_descriptor(), enum_t_value);
}
inline bool TimelineInit_Resolved_Parse(
    const std::string& name, TimelineInit_Resolved* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimelineInit_Resolved>(
    TimelineInit_Resolved_descriptor(), name, value);
}
// ===================================================================

class FrameLookup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.FrameLookup) */ {
 public:
  inline FrameLookup() : FrameLookup(nullptr) {};
  virtual ~FrameLookup();

  FrameLookup(const FrameLookup& from);
  FrameLookup(FrameLookup&& from) noexcept
    : FrameLookup() {
    *this = ::std::move(from);
  }

  inline FrameLookup& operator=(const FrameLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameLookup& operator=(FrameLookup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameLookup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameLookup* internal_default_instance() {
    return reinterpret_cast<const FrameLookup*>(
               &_FrameLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameLookup& a, FrameLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameLookup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameLookup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameLookup* New() const final {
    return CreateMaybeMessage<FrameLookup>(nullptr);
  }

  FrameLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameLookup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameLookup& from);
  void MergeFrom(const FrameLookup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameLookup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.FrameLookup";
  }
  protected:
  explicit FrameLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFrameNumberFieldNumber = 2,
  };
  // required .logfile.UidEntry uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const ::logfile::UidEntry& uid() const;
  ::logfile::UidEntry* release_uid();
  ::logfile::UidEntry* mutable_uid();
  void set_allocated_uid(::logfile::UidEntry* uid);
  private:
  const ::logfile::UidEntry& _internal_uid() const;
  ::logfile::UidEntry* _internal_mutable_uid();
  public:
  void unsafe_arena_set_allocated_uid(
      ::logfile::UidEntry* uid);
  ::logfile::UidEntry* unsafe_arena_release_uid();

  // required uint32 frame_number = 2;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_number() const;
  void _internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:timeline.FrameLookup)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::logfile::UidEntry* uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class FrameDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.FrameDescriptor) */ {
 public:
  inline FrameDescriptor() : FrameDescriptor(nullptr) {};
  virtual ~FrameDescriptor();

  FrameDescriptor(const FrameDescriptor& from);
  FrameDescriptor(FrameDescriptor&& from) noexcept
    : FrameDescriptor() {
    *this = ::std::move(from);
  }

  inline FrameDescriptor& operator=(const FrameDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameDescriptor& operator=(FrameDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameDescriptor* internal_default_instance() {
    return reinterpret_cast<const FrameDescriptor*>(
               &_FrameDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameDescriptor& a, FrameDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameDescriptor* New() const final {
    return CreateMaybeMessage<FrameDescriptor>(nullptr);
  }

  FrameDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameDescriptor& from);
  void MergeFrom(const FrameDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.FrameDescriptor";
  }
  protected:
  explicit FrameDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameInfosFieldNumber = 3,
    kBaseHashFieldNumber = 1,
    kBaseFrameNumberFieldNumber = 2,
  };
  // repeated .timeline.FrameLookup frame_infos = 3;
  int frame_infos_size() const;
  private:
  int _internal_frame_infos_size() const;
  public:
  void clear_frame_infos();
  ::timeline::FrameLookup* mutable_frame_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::FrameLookup >*
      mutable_frame_infos();
  private:
  const ::timeline::FrameLookup& _internal_frame_infos(int index) const;
  ::timeline::FrameLookup* _internal_add_frame_infos();
  public:
  const ::timeline::FrameLookup& frame_infos(int index) const;
  ::timeline::FrameLookup* add_frame_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::FrameLookup >&
      frame_infos() const;

  // required string base_hash = 1;
  bool has_base_hash() const;
  private:
  bool _internal_has_base_hash() const;
  public:
  void clear_base_hash();
  const std::string& base_hash() const;
  void set_base_hash(const std::string& value);
  void set_base_hash(std::string&& value);
  void set_base_hash(const char* value);
  void set_base_hash(const char* value, size_t size);
  std::string* mutable_base_hash();
  std::string* release_base_hash();
  void set_allocated_base_hash(std::string* base_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_base_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_hash(
      std::string* base_hash);
  private:
  const std::string& _internal_base_hash() const;
  void _internal_set_base_hash(const std::string& value);
  std::string* _internal_mutable_base_hash();
  public:

  // required uint32 base_frame_number = 2;
  bool has_base_frame_number() const;
  private:
  bool _internal_has_base_frame_number() const;
  public:
  void clear_base_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_frame_number() const;
  void set_base_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_frame_number() const;
  void _internal_set_base_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:timeline.FrameDescriptor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::FrameLookup > frame_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_frame_number_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class GameEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.GameEvent) */ {
 public:
  inline GameEvent() : GameEvent(nullptr) {};
  virtual ~GameEvent();

  GameEvent(const GameEvent& from);
  GameEvent(GameEvent&& from) noexcept
    : GameEvent() {
    *this = ::std::move(from);
  }

  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent& operator=(GameEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent* internal_default_instance() {
    return reinterpret_cast<const GameEvent*>(
               &_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameEvent& a, GameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameEvent* New() const final {
    return CreateMaybeMessage<GameEvent>(nullptr);
  }

  GameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameEvent& from);
  void MergeFrom(const GameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.GameEvent";
  }
  protected:
  explicit GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameEvent_Progress Progress;
  static constexpr Progress Open =
    GameEvent_Progress_Open;
  static constexpr Progress Closed =
    GameEvent_Progress_Closed;
  static constexpr Progress Postponed =
    GameEvent_Progress_Postponed;
  static constexpr Progress Resolved =
    GameEvent_Progress_Resolved;
  static constexpr Progress InProgress =
    GameEvent_Progress_InProgress;
  static constexpr Progress Info =
    GameEvent_Progress_Info;
  static constexpr Progress Merged =
    GameEvent_Progress_Merged;
  static inline bool Progress_IsValid(int value) {
    return GameEvent_Progress_IsValid(value);
  }
  static constexpr Progress Progress_MIN =
    GameEvent_Progress_Progress_MIN;
  static constexpr Progress Progress_MAX =
    GameEvent_Progress_Progress_MAX;
  static constexpr int Progress_ARRAYSIZE =
    GameEvent_Progress_Progress_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Progress_descriptor() {
    return GameEvent_Progress_descriptor();
  }
  template<typename T>
  static inline const std::string& Progress_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Progress>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Progress_Name.");
    return GameEvent_Progress_Name(enum_t_value);
  }
  static inline bool Progress_Parse(const std::string& name,
      Progress* value) {
    return GameEvent_Progress_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 4,
    kDescriptionFieldNumber = 3,
    kAssigneeFieldNumber = 5,
    kRandomIdFieldNumber = 6,
    kLocationFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // repeated string tag = 4;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  const std::string& tag(int index) const;
  std::string* mutable_tag(int index);
  void set_tag(int index, const std::string& value);
  void set_tag(int index, std::string&& value);
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  std::string* add_tag();
  void add_tag(const std::string& value);
  void add_tag(std::string&& value);
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag();
  private:
  const std::string& _internal_tag(int index) const;
  std::string* _internal_add_tag();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string assignee = 5;
  bool has_assignee() const;
  private:
  bool _internal_has_assignee() const;
  public:
  void clear_assignee();
  const std::string& assignee() const;
  void set_assignee(const std::string& value);
  void set_assignee(std::string&& value);
  void set_assignee(const char* value);
  void set_assignee(const char* value, size_t size);
  std::string* mutable_assignee();
  std::string* release_assignee();
  void set_allocated_assignee(std::string* assignee);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assignee();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assignee(
      std::string* assignee);
  private:
  const std::string& _internal_assignee() const;
  void _internal_set_assignee(const std::string& value);
  std::string* _internal_mutable_assignee();
  public:

  // required string random_id = 6;
  bool has_random_id() const;
  private:
  bool _internal_has_random_id() const;
  public:
  void clear_random_id();
  const std::string& random_id() const;
  void set_random_id(const std::string& value);
  void set_random_id(std::string&& value);
  void set_random_id(const char* value);
  void set_random_id(const char* value, size_t size);
  std::string* mutable_random_id();
  std::string* release_random_id();
  void set_allocated_random_id(std::string* random_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_random_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_id(
      std::string* random_id);
  private:
  const std::string& _internal_random_id() const;
  void _internal_set_random_id(const std::string& value);
  std::string* _internal_mutable_random_id();
  public:

  // required .timeline.FrameDescriptor location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::timeline::FrameDescriptor& location() const;
  ::timeline::FrameDescriptor* release_location();
  ::timeline::FrameDescriptor* mutable_location();
  void set_allocated_location(::timeline::FrameDescriptor* location);
  private:
  const ::timeline::FrameDescriptor& _internal_location() const;
  ::timeline::FrameDescriptor* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::timeline::FrameDescriptor* location);
  ::timeline::FrameDescriptor* unsafe_arena_release_location();

  // required .timeline.GameEvent.Progress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  ::timeline::GameEvent_Progress progress() const;
  void set_progress(::timeline::GameEvent_Progress value);
  private:
  ::timeline::GameEvent_Progress _internal_progress() const;
  void _internal_set_progress(::timeline::GameEvent_Progress value);
  public:

  // @@protoc_insertion_point(class_scope:timeline.GameEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_id_;
  ::timeline::FrameDescriptor* location_;
  int progress_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class TimelineInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.TimelineInit) */ {
 public:
  inline TimelineInit() : TimelineInit(nullptr) {};
  virtual ~TimelineInit();

  TimelineInit(const TimelineInit& from);
  TimelineInit(TimelineInit&& from) noexcept
    : TimelineInit() {
    *this = ::std::move(from);
  }

  inline TimelineInit& operator=(const TimelineInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimelineInit& operator=(TimelineInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimelineInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimelineInit* internal_default_instance() {
    return reinterpret_cast<const TimelineInit*>(
               &_TimelineInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimelineInit& a, TimelineInit& b) {
    a.Swap(&b);
  }
  inline void Swap(TimelineInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimelineInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimelineInit* New() const final {
    return CreateMaybeMessage<TimelineInit>(nullptr);
  }

  TimelineInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimelineInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimelineInit& from);
  void MergeFrom(const TimelineInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimelineInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.TimelineInit";
  }
  protected:
  explicit TimelineInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimelineInit_Resolved Resolved;
  static constexpr Resolved Solved =
    TimelineInit_Resolved_Solved;
  static constexpr Resolved Conflicting =
    TimelineInit_Resolved_Conflicting;
  static inline bool Resolved_IsValid(int value) {
    return TimelineInit_Resolved_IsValid(value);
  }
  static constexpr Resolved Resolved_MIN =
    TimelineInit_Resolved_Resolved_MIN;
  static constexpr Resolved Resolved_MAX =
    TimelineInit_Resolved_Resolved_MAX;
  static constexpr int Resolved_ARRAYSIZE =
    TimelineInit_Resolved_Resolved_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resolved_descriptor() {
    return TimelineInit_Resolved_descriptor();
  }
  template<typename T>
  static inline const std::string& Resolved_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resolved>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resolved_Name.");
    return TimelineInit_Resolved_Name(enum_t_value);
  }
  static inline bool Resolved_Parse(const std::string& name,
      Resolved* value) {
    return TimelineInit_Resolved_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSecondaryFieldNumber = 2,
    kPartiallyFieldNumber = 3,
    kPrimaryFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // repeated .logfile.UidEntry secondary = 2;
  int secondary_size() const;
  private:
  int _internal_secondary_size() const;
  public:
  void clear_secondary();
  ::logfile::UidEntry* mutable_secondary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
      mutable_secondary();
  private:
  const ::logfile::UidEntry& _internal_secondary(int index) const;
  ::logfile::UidEntry* _internal_add_secondary();
  public:
  const ::logfile::UidEntry& secondary(int index) const;
  ::logfile::UidEntry* add_secondary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
      secondary() const;

  // repeated .logfile.UidEntry partially = 3;
  int partially_size() const;
  private:
  int _internal_partially_size() const;
  public:
  void clear_partially();
  ::logfile::UidEntry* mutable_partially(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
      mutable_partially();
  private:
  const ::logfile::UidEntry& _internal_partially(int index) const;
  ::logfile::UidEntry* _internal_add_partially();
  public:
  const ::logfile::UidEntry& partially(int index) const;
  ::logfile::UidEntry* add_partially();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
      partially() const;

  // required .logfile.UidEntry primary = 1;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::logfile::UidEntry& primary() const;
  ::logfile::UidEntry* release_primary();
  ::logfile::UidEntry* mutable_primary();
  void set_allocated_primary(::logfile::UidEntry* primary);
  private:
  const ::logfile::UidEntry& _internal_primary() const;
  ::logfile::UidEntry* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::logfile::UidEntry* primary);
  ::logfile::UidEntry* unsafe_arena_release_primary();

  // required .timeline.TimelineInit.Resolved state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::timeline::TimelineInit_Resolved state() const;
  void set_state(::timeline::TimelineInit_Resolved value);
  private:
  ::timeline::TimelineInit_Resolved _internal_state() const;
  void _internal_set_state(::timeline::TimelineInit_Resolved value);
  public:

  // @@protoc_insertion_point(class_scope:timeline.TimelineInit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry > secondary_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry > partially_;
  ::logfile::UidEntry* primary_;
  int state_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class EventWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.EventWrapper) */ {
 public:
  inline EventWrapper() : EventWrapper(nullptr) {};
  virtual ~EventWrapper();

  EventWrapper(const EventWrapper& from);
  EventWrapper(EventWrapper&& from) noexcept
    : EventWrapper() {
    *this = ::std::move(from);
  }

  inline EventWrapper& operator=(const EventWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventWrapper& operator=(EventWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventWrapper* internal_default_instance() {
    return reinterpret_cast<const EventWrapper*>(
               &_EventWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventWrapper& a, EventWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(EventWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventWrapper* New() const final {
    return CreateMaybeMessage<EventWrapper>(nullptr);
  }

  EventWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventWrapper& from);
  void MergeFrom(const EventWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.EventWrapper";
  }
  protected:
  explicit EventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConflictingFieldNumber = 2,
    kTagFieldNumber = 1,
  };
  // repeated .timeline.GameEvent conflicting = 2;
  int conflicting_size() const;
  private:
  int _internal_conflicting_size() const;
  public:
  void clear_conflicting();
  ::timeline::GameEvent* mutable_conflicting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::GameEvent >*
      mutable_conflicting();
  private:
  const ::timeline::GameEvent& _internal_conflicting(int index) const;
  ::timeline::GameEvent* _internal_add_conflicting();
  public:
  const ::timeline::GameEvent& conflicting(int index) const;
  ::timeline::GameEvent* add_conflicting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::GameEvent >&
      conflicting() const;

  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:timeline.EventWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::GameEvent > conflicting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  enum LogfileEntryCase {
    kWrapper = 1,
    kGameEvent = 2,
    LOGFILEENTRY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrapperFieldNumber = 1,
    kGameEventFieldNumber = 2,
  };
  // .timeline.EventWrapper wrapper = 1;
  bool has_wrapper() const;
  private:
  bool _internal_has_wrapper() const;
  public:
  void clear_wrapper();
  const ::timeline::EventWrapper& wrapper() const;
  ::timeline::EventWrapper* release_wrapper();
  ::timeline::EventWrapper* mutable_wrapper();
  void set_allocated_wrapper(::timeline::EventWrapper* wrapper);
  private:
  const ::timeline::EventWrapper& _internal_wrapper() const;
  ::timeline::EventWrapper* _internal_mutable_wrapper();
  public:
  void unsafe_arena_set_allocated_wrapper(
      ::timeline::EventWrapper* wrapper);
  ::timeline::EventWrapper* unsafe_arena_release_wrapper();

  // .timeline.GameEvent game_event = 2;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::timeline::GameEvent& game_event() const;
  ::timeline::GameEvent* release_game_event();
  ::timeline::GameEvent* mutable_game_event();
  void set_allocated_game_event(::timeline::GameEvent* game_event);
  private:
  const ::timeline::GameEvent& _internal_game_event() const;
  ::timeline::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::timeline::GameEvent* game_event);
  ::timeline::GameEvent* unsafe_arena_release_game_event();

  void clear_logfileEntry();
  LogfileEntryCase logfileEntry_case() const;
  // @@protoc_insertion_point(class_scope:timeline.Status)
 private:
  class _Internal;
  void set_has_wrapper();
  void set_has_game_event();

  inline bool has_logfileEntry() const;
  inline void clear_has_logfileEntry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union LogfileEntryUnion {
    LogfileEntryUnion() {}
    ::timeline::EventWrapper* wrapper_;
    ::timeline::GameEvent* game_event_;
  } logfileEntry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_timeline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameLookup

// required .logfile.UidEntry uid = 1;
inline bool FrameLookup::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uid_ != nullptr);
  return value;
}
inline bool FrameLookup::has_uid() const {
  return _internal_has_uid();
}
inline const ::logfile::UidEntry& FrameLookup::_internal_uid() const {
  const ::logfile::UidEntry* p = uid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::logfile::UidEntry*>(
      &::logfile::_UidEntry_default_instance_);
}
inline const ::logfile::UidEntry& FrameLookup::uid() const {
  // @@protoc_insertion_point(field_get:timeline.FrameLookup.uid)
  return _internal_uid();
}
inline void FrameLookup::unsafe_arena_set_allocated_uid(
    ::logfile::UidEntry* uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  uid_ = uid;
  if (uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.FrameLookup.uid)
}
inline ::logfile::UidEntry* FrameLookup::release_uid() {
  auto temp = unsafe_arena_release_uid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::logfile::UidEntry* FrameLookup::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_release:timeline.FrameLookup.uid)
  _has_bits_[0] &= ~0x00000001u;
  ::logfile::UidEntry* temp = uid_;
  uid_ = nullptr;
  return temp;
}
inline ::logfile::UidEntry* FrameLookup::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::logfile::UidEntry>(GetArena());
    uid_ = p;
  }
  return uid_;
}
inline ::logfile::UidEntry* FrameLookup::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:timeline.FrameLookup.uid)
  return _internal_mutable_uid();
}
inline void FrameLookup::set_allocated_uid(::logfile::UidEntry* uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  if (uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid)->GetArena();
    if (message_arena != submessage_arena) {
      uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_ = uid;
  // @@protoc_insertion_point(field_set_allocated:timeline.FrameLookup.uid)
}

// required uint32 frame_number = 2;
inline bool FrameLookup::_internal_has_frame_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameLookup::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void FrameLookup::clear_frame_number() {
  frame_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameLookup::_internal_frame_number() const {
  return frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameLookup::frame_number() const {
  // @@protoc_insertion_point(field_get:timeline.FrameLookup.frame_number)
  return _internal_frame_number();
}
inline void FrameLookup::_internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_number_ = value;
}
inline void FrameLookup::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:timeline.FrameLookup.frame_number)
}

// -------------------------------------------------------------------

// FrameDescriptor

// required string base_hash = 1;
inline bool FrameDescriptor::_internal_has_base_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameDescriptor::has_base_hash() const {
  return _internal_has_base_hash();
}
inline void FrameDescriptor::clear_base_hash() {
  base_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameDescriptor::base_hash() const {
  // @@protoc_insertion_point(field_get:timeline.FrameDescriptor.base_hash)
  return _internal_base_hash();
}
inline void FrameDescriptor::set_base_hash(const std::string& value) {
  _internal_set_base_hash(value);
  // @@protoc_insertion_point(field_set:timeline.FrameDescriptor.base_hash)
}
inline std::string* FrameDescriptor::mutable_base_hash() {
  // @@protoc_insertion_point(field_mutable:timeline.FrameDescriptor.base_hash)
  return _internal_mutable_base_hash();
}
inline const std::string& FrameDescriptor::_internal_base_hash() const {
  return base_hash_.Get();
}
inline void FrameDescriptor::_internal_set_base_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FrameDescriptor::set_base_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:timeline.FrameDescriptor.base_hash)
}
inline void FrameDescriptor::set_base_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:timeline.FrameDescriptor.base_hash)
}
inline void FrameDescriptor::set_base_hash(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:timeline.FrameDescriptor.base_hash)
}
inline std::string* FrameDescriptor::_internal_mutable_base_hash() {
  _has_bits_[0] |= 0x00000001u;
  return base_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FrameDescriptor::release_base_hash() {
  // @@protoc_insertion_point(field_release:timeline.FrameDescriptor.base_hash)
  if (!_internal_has_base_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameDescriptor::set_allocated_base_hash(std::string* base_hash) {
  if (base_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:timeline.FrameDescriptor.base_hash)
}
inline std::string* FrameDescriptor::unsafe_arena_release_base_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.FrameDescriptor.base_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return base_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FrameDescriptor::unsafe_arena_set_allocated_base_hash(
    std::string* base_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (base_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      base_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.FrameDescriptor.base_hash)
}

// required uint32 base_frame_number = 2;
inline bool FrameDescriptor::_internal_has_base_frame_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameDescriptor::has_base_frame_number() const {
  return _internal_has_base_frame_number();
}
inline void FrameDescriptor::clear_base_frame_number() {
  base_frame_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameDescriptor::_internal_base_frame_number() const {
  return base_frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameDescriptor::base_frame_number() const {
  // @@protoc_insertion_point(field_get:timeline.FrameDescriptor.base_frame_number)
  return _internal_base_frame_number();
}
inline void FrameDescriptor::_internal_set_base_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  base_frame_number_ = value;
}
inline void FrameDescriptor::set_base_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_frame_number(value);
  // @@protoc_insertion_point(field_set:timeline.FrameDescriptor.base_frame_number)
}

// repeated .timeline.FrameLookup frame_infos = 3;
inline int FrameDescriptor::_internal_frame_infos_size() const {
  return frame_infos_.size();
}
inline int FrameDescriptor::frame_infos_size() const {
  return _internal_frame_infos_size();
}
inline void FrameDescriptor::clear_frame_infos() {
  frame_infos_.Clear();
}
inline ::timeline::FrameLookup* FrameDescriptor::mutable_frame_infos(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.FrameDescriptor.frame_infos)
  return frame_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::FrameLookup >*
FrameDescriptor::mutable_frame_infos() {
  // @@protoc_insertion_point(field_mutable_list:timeline.FrameDescriptor.frame_infos)
  return &frame_infos_;
}
inline const ::timeline::FrameLookup& FrameDescriptor::_internal_frame_infos(int index) const {
  return frame_infos_.Get(index);
}
inline const ::timeline::FrameLookup& FrameDescriptor::frame_infos(int index) const {
  // @@protoc_insertion_point(field_get:timeline.FrameDescriptor.frame_infos)
  return _internal_frame_infos(index);
}
inline ::timeline::FrameLookup* FrameDescriptor::_internal_add_frame_infos() {
  return frame_infos_.Add();
}
inline ::timeline::FrameLookup* FrameDescriptor::add_frame_infos() {
  // @@protoc_insertion_point(field_add:timeline.FrameDescriptor.frame_infos)
  return _internal_add_frame_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::FrameLookup >&
FrameDescriptor::frame_infos() const {
  // @@protoc_insertion_point(field_list:timeline.FrameDescriptor.frame_infos)
  return frame_infos_;
}

// -------------------------------------------------------------------

// GameEvent

// required .timeline.FrameDescriptor location = 1;
inline bool GameEvent::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool GameEvent::has_location() const {
  return _internal_has_location();
}
inline void GameEvent::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::timeline::FrameDescriptor& GameEvent::_internal_location() const {
  const ::timeline::FrameDescriptor* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::FrameDescriptor*>(
      &::timeline::_FrameDescriptor_default_instance_);
}
inline const ::timeline::FrameDescriptor& GameEvent::location() const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.location)
  return _internal_location();
}
inline void GameEvent::unsafe_arena_set_allocated_location(
    ::timeline::FrameDescriptor* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.GameEvent.location)
}
inline ::timeline::FrameDescriptor* GameEvent::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::timeline::FrameDescriptor* GameEvent::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:timeline.GameEvent.location)
  _has_bits_[0] &= ~0x00000008u;
  ::timeline::FrameDescriptor* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::timeline::FrameDescriptor* GameEvent::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000008u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::FrameDescriptor>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::timeline::FrameDescriptor* GameEvent::mutable_location() {
  // @@protoc_insertion_point(field_mutable:timeline.GameEvent.location)
  return _internal_mutable_location();
}
inline void GameEvent::set_allocated_location(::timeline::FrameDescriptor* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:timeline.GameEvent.location)
}

// required .timeline.GameEvent.Progress progress = 2;
inline bool GameEvent::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameEvent::has_progress() const {
  return _internal_has_progress();
}
inline void GameEvent::clear_progress() {
  progress_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::timeline::GameEvent_Progress GameEvent::_internal_progress() const {
  return static_cast< ::timeline::GameEvent_Progress >(progress_);
}
inline ::timeline::GameEvent_Progress GameEvent::progress() const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.progress)
  return _internal_progress();
}
inline void GameEvent::_internal_set_progress(::timeline::GameEvent_Progress value) {
  assert(::timeline::GameEvent_Progress_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  progress_ = value;
}
inline void GameEvent::set_progress(::timeline::GameEvent_Progress value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:timeline.GameEvent.progress)
}

// required string random_id = 6;
inline bool GameEvent::_internal_has_random_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameEvent::has_random_id() const {
  return _internal_has_random_id();
}
inline void GameEvent::clear_random_id() {
  random_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GameEvent::random_id() const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.random_id)
  return _internal_random_id();
}
inline void GameEvent::set_random_id(const std::string& value) {
  _internal_set_random_id(value);
  // @@protoc_insertion_point(field_set:timeline.GameEvent.random_id)
}
inline std::string* GameEvent::mutable_random_id() {
  // @@protoc_insertion_point(field_mutable:timeline.GameEvent.random_id)
  return _internal_mutable_random_id();
}
inline const std::string& GameEvent::_internal_random_id() const {
  return random_id_.Get();
}
inline void GameEvent::_internal_set_random_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  random_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameEvent::set_random_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  random_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:timeline.GameEvent.random_id)
}
inline void GameEvent::set_random_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  random_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:timeline.GameEvent.random_id)
}
inline void GameEvent::set_random_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  random_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:timeline.GameEvent.random_id)
}
inline std::string* GameEvent::_internal_mutable_random_id() {
  _has_bits_[0] |= 0x00000004u;
  return random_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameEvent::release_random_id() {
  // @@protoc_insertion_point(field_release:timeline.GameEvent.random_id)
  if (!_internal_has_random_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return random_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameEvent::set_allocated_random_id(std::string* random_id) {
  if (random_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  random_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:timeline.GameEvent.random_id)
}
inline std::string* GameEvent::unsafe_arena_release_random_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.GameEvent.random_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return random_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GameEvent::unsafe_arena_set_allocated_random_id(
    std::string* random_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (random_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  random_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      random_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.GameEvent.random_id)
}

// optional string description = 3;
inline bool GameEvent::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameEvent::has_description() const {
  return _internal_has_description();
}
inline void GameEvent::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent::description() const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.description)
  return _internal_description();
}
inline void GameEvent::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:timeline.GameEvent.description)
}
inline std::string* GameEvent::mutable_description() {
  // @@protoc_insertion_point(field_mutable:timeline.GameEvent.description)
  return _internal_mutable_description();
}
inline const std::string& GameEvent::_internal_description() const {
  return description_.Get();
}
inline void GameEvent::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameEvent::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:timeline.GameEvent.description)
}
inline void GameEvent::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:timeline.GameEvent.description)
}
inline void GameEvent::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:timeline.GameEvent.description)
}
inline std::string* GameEvent::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameEvent::release_description() {
  // @@protoc_insertion_point(field_release:timeline.GameEvent.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameEvent::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:timeline.GameEvent.description)
}
inline std::string* GameEvent::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.GameEvent.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GameEvent::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.GameEvent.description)
}

// repeated string tag = 4;
inline int GameEvent::_internal_tag_size() const {
  return tag_.size();
}
inline int GameEvent::tag_size() const {
  return _internal_tag_size();
}
inline void GameEvent::clear_tag() {
  tag_.Clear();
}
inline std::string* GameEvent::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:timeline.GameEvent.tag)
  return _internal_add_tag();
}
inline const std::string& GameEvent::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const std::string& GameEvent::tag(int index) const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.tag)
  return _internal_tag(index);
}
inline std::string* GameEvent::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.GameEvent.tag)
  return tag_.Mutable(index);
}
inline void GameEvent::set_tag(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:timeline.GameEvent.tag)
  tag_.Mutable(index)->assign(value);
}
inline void GameEvent::set_tag(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:timeline.GameEvent.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
inline void GameEvent::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:timeline.GameEvent.tag)
}
inline void GameEvent::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:timeline.GameEvent.tag)
}
inline std::string* GameEvent::_internal_add_tag() {
  return tag_.Add();
}
inline void GameEvent::add_tag(const std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:timeline.GameEvent.tag)
}
inline void GameEvent::add_tag(std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:timeline.GameEvent.tag)
}
inline void GameEvent::add_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:timeline.GameEvent.tag)
}
inline void GameEvent::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:timeline.GameEvent.tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameEvent::tag() const {
  // @@protoc_insertion_point(field_list:timeline.GameEvent.tag)
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameEvent::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:timeline.GameEvent.tag)
  return &tag_;
}

// optional string assignee = 5;
inline bool GameEvent::_internal_has_assignee() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameEvent::has_assignee() const {
  return _internal_has_assignee();
}
inline void GameEvent::clear_assignee() {
  assignee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameEvent::assignee() const {
  // @@protoc_insertion_point(field_get:timeline.GameEvent.assignee)
  return _internal_assignee();
}
inline void GameEvent::set_assignee(const std::string& value) {
  _internal_set_assignee(value);
  // @@protoc_insertion_point(field_set:timeline.GameEvent.assignee)
}
inline std::string* GameEvent::mutable_assignee() {
  // @@protoc_insertion_point(field_mutable:timeline.GameEvent.assignee)
  return _internal_mutable_assignee();
}
inline const std::string& GameEvent::_internal_assignee() const {
  return assignee_.Get();
}
inline void GameEvent::_internal_set_assignee(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  assignee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameEvent::set_assignee(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  assignee_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:timeline.GameEvent.assignee)
}
inline void GameEvent::set_assignee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  assignee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:timeline.GameEvent.assignee)
}
inline void GameEvent::set_assignee(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  assignee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:timeline.GameEvent.assignee)
}
inline std::string* GameEvent::_internal_mutable_assignee() {
  _has_bits_[0] |= 0x00000002u;
  return assignee_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameEvent::release_assignee() {
  // @@protoc_insertion_point(field_release:timeline.GameEvent.assignee)
  if (!_internal_has_assignee()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return assignee_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameEvent::set_allocated_assignee(std::string* assignee) {
  if (assignee != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assignee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:timeline.GameEvent.assignee)
}
inline std::string* GameEvent::unsafe_arena_release_assignee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.GameEvent.assignee)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return assignee_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GameEvent::unsafe_arena_set_allocated_assignee(
    std::string* assignee) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assignee != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignee_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assignee, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.GameEvent.assignee)
}

// -------------------------------------------------------------------

// TimelineInit

// required .logfile.UidEntry primary = 1;
inline bool TimelineInit::_internal_has_primary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || primary_ != nullptr);
  return value;
}
inline bool TimelineInit::has_primary() const {
  return _internal_has_primary();
}
inline const ::logfile::UidEntry& TimelineInit::_internal_primary() const {
  const ::logfile::UidEntry* p = primary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::logfile::UidEntry*>(
      &::logfile::_UidEntry_default_instance_);
}
inline const ::logfile::UidEntry& TimelineInit::primary() const {
  // @@protoc_insertion_point(field_get:timeline.TimelineInit.primary)
  return _internal_primary();
}
inline void TimelineInit::unsafe_arena_set_allocated_primary(
    ::logfile::UidEntry* primary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.TimelineInit.primary)
}
inline ::logfile::UidEntry* TimelineInit::release_primary() {
  auto temp = unsafe_arena_release_primary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::logfile::UidEntry* TimelineInit::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:timeline.TimelineInit.primary)
  _has_bits_[0] &= ~0x00000001u;
  ::logfile::UidEntry* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline ::logfile::UidEntry* TimelineInit::_internal_mutable_primary() {
  _has_bits_[0] |= 0x00000001u;
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::logfile::UidEntry>(GetArena());
    primary_ = p;
  }
  return primary_;
}
inline ::logfile::UidEntry* TimelineInit::mutable_primary() {
  // @@protoc_insertion_point(field_mutable:timeline.TimelineInit.primary)
  return _internal_mutable_primary();
}
inline void TimelineInit::set_allocated_primary(::logfile::UidEntry* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary)->GetArena();
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:timeline.TimelineInit.primary)
}

// repeated .logfile.UidEntry secondary = 2;
inline int TimelineInit::_internal_secondary_size() const {
  return secondary_.size();
}
inline int TimelineInit::secondary_size() const {
  return _internal_secondary_size();
}
inline ::logfile::UidEntry* TimelineInit::mutable_secondary(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.TimelineInit.secondary)
  return secondary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
TimelineInit::mutable_secondary() {
  // @@protoc_insertion_point(field_mutable_list:timeline.TimelineInit.secondary)
  return &secondary_;
}
inline const ::logfile::UidEntry& TimelineInit::_internal_secondary(int index) const {
  return secondary_.Get(index);
}
inline const ::logfile::UidEntry& TimelineInit::secondary(int index) const {
  // @@protoc_insertion_point(field_get:timeline.TimelineInit.secondary)
  return _internal_secondary(index);
}
inline ::logfile::UidEntry* TimelineInit::_internal_add_secondary() {
  return secondary_.Add();
}
inline ::logfile::UidEntry* TimelineInit::add_secondary() {
  // @@protoc_insertion_point(field_add:timeline.TimelineInit.secondary)
  return _internal_add_secondary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
TimelineInit::secondary() const {
  // @@protoc_insertion_point(field_list:timeline.TimelineInit.secondary)
  return secondary_;
}

// repeated .logfile.UidEntry partially = 3;
inline int TimelineInit::_internal_partially_size() const {
  return partially_.size();
}
inline int TimelineInit::partially_size() const {
  return _internal_partially_size();
}
inline ::logfile::UidEntry* TimelineInit::mutable_partially(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.TimelineInit.partially)
  return partially_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
TimelineInit::mutable_partially() {
  // @@protoc_insertion_point(field_mutable_list:timeline.TimelineInit.partially)
  return &partially_;
}
inline const ::logfile::UidEntry& TimelineInit::_internal_partially(int index) const {
  return partially_.Get(index);
}
inline const ::logfile::UidEntry& TimelineInit::partially(int index) const {
  // @@protoc_insertion_point(field_get:timeline.TimelineInit.partially)
  return _internal_partially(index);
}
inline ::logfile::UidEntry* TimelineInit::_internal_add_partially() {
  return partially_.Add();
}
inline ::logfile::UidEntry* TimelineInit::add_partially() {
  // @@protoc_insertion_point(field_add:timeline.TimelineInit.partially)
  return _internal_add_partially();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
TimelineInit::partially() const {
  // @@protoc_insertion_point(field_list:timeline.TimelineInit.partially)
  return partially_;
}

// required .timeline.TimelineInit.Resolved state = 4;
inline bool TimelineInit::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimelineInit::has_state() const {
  return _internal_has_state();
}
inline void TimelineInit::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::timeline::TimelineInit_Resolved TimelineInit::_internal_state() const {
  return static_cast< ::timeline::TimelineInit_Resolved >(state_);
}
inline ::timeline::TimelineInit_Resolved TimelineInit::state() const {
  // @@protoc_insertion_point(field_get:timeline.TimelineInit.state)
  return _internal_state();
}
inline void TimelineInit::_internal_set_state(::timeline::TimelineInit_Resolved value) {
  assert(::timeline::TimelineInit_Resolved_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void TimelineInit::set_state(::timeline::TimelineInit_Resolved value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:timeline.TimelineInit.state)
}

// -------------------------------------------------------------------

// EventWrapper

// required string tag = 1;
inline bool EventWrapper::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventWrapper::has_tag() const {
  return _internal_has_tag();
}
inline void EventWrapper::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventWrapper::tag() const {
  // @@protoc_insertion_point(field_get:timeline.EventWrapper.tag)
  return _internal_tag();
}
inline void EventWrapper::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:timeline.EventWrapper.tag)
}
inline std::string* EventWrapper::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:timeline.EventWrapper.tag)
  return _internal_mutable_tag();
}
inline const std::string& EventWrapper::_internal_tag() const {
  return tag_.Get();
}
inline void EventWrapper::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventWrapper::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:timeline.EventWrapper.tag)
}
inline void EventWrapper::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:timeline.EventWrapper.tag)
}
inline void EventWrapper::set_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:timeline.EventWrapper.tag)
}
inline std::string* EventWrapper::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventWrapper::release_tag() {
  // @@protoc_insertion_point(field_release:timeline.EventWrapper.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventWrapper::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:timeline.EventWrapper.tag)
}
inline std::string* EventWrapper::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.EventWrapper.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EventWrapper::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.EventWrapper.tag)
}

// repeated .timeline.GameEvent conflicting = 2;
inline int EventWrapper::_internal_conflicting_size() const {
  return conflicting_.size();
}
inline int EventWrapper::conflicting_size() const {
  return _internal_conflicting_size();
}
inline void EventWrapper::clear_conflicting() {
  conflicting_.Clear();
}
inline ::timeline::GameEvent* EventWrapper::mutable_conflicting(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.EventWrapper.conflicting)
  return conflicting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::GameEvent >*
EventWrapper::mutable_conflicting() {
  // @@protoc_insertion_point(field_mutable_list:timeline.EventWrapper.conflicting)
  return &conflicting_;
}
inline const ::timeline::GameEvent& EventWrapper::_internal_conflicting(int index) const {
  return conflicting_.Get(index);
}
inline const ::timeline::GameEvent& EventWrapper::conflicting(int index) const {
  // @@protoc_insertion_point(field_get:timeline.EventWrapper.conflicting)
  return _internal_conflicting(index);
}
inline ::timeline::GameEvent* EventWrapper::_internal_add_conflicting() {
  return conflicting_.Add();
}
inline ::timeline::GameEvent* EventWrapper::add_conflicting() {
  // @@protoc_insertion_point(field_add:timeline.EventWrapper.conflicting)
  return _internal_add_conflicting();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::timeline::GameEvent >&
EventWrapper::conflicting() const {
  // @@protoc_insertion_point(field_list:timeline.EventWrapper.conflicting)
  return conflicting_;
}

// -------------------------------------------------------------------

// Status

// .timeline.EventWrapper wrapper = 1;
inline bool Status::_internal_has_wrapper() const {
  return logfileEntry_case() == kWrapper;
}
inline bool Status::has_wrapper() const {
  return _internal_has_wrapper();
}
inline void Status::set_has_wrapper() {
  _oneof_case_[0] = kWrapper;
}
inline void Status::clear_wrapper() {
  if (_internal_has_wrapper()) {
    if (GetArena() == nullptr) {
      delete logfileEntry_.wrapper_;
    }
    clear_has_logfileEntry();
  }
}
inline ::timeline::EventWrapper* Status::release_wrapper() {
  // @@protoc_insertion_point(field_release:timeline.Status.wrapper)
  if (_internal_has_wrapper()) {
    clear_has_logfileEntry();
      ::timeline::EventWrapper* temp = logfileEntry_.wrapper_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    logfileEntry_.wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::timeline::EventWrapper& Status::_internal_wrapper() const {
  return _internal_has_wrapper()
      ? *logfileEntry_.wrapper_
      : *reinterpret_cast< ::timeline::EventWrapper*>(&::timeline::_EventWrapper_default_instance_);
}
inline const ::timeline::EventWrapper& Status::wrapper() const {
  // @@protoc_insertion_point(field_get:timeline.Status.wrapper)
  return _internal_wrapper();
}
inline ::timeline::EventWrapper* Status::unsafe_arena_release_wrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.Status.wrapper)
  if (_internal_has_wrapper()) {
    clear_has_logfileEntry();
    ::timeline::EventWrapper* temp = logfileEntry_.wrapper_;
    logfileEntry_.wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_wrapper(::timeline::EventWrapper* wrapper) {
  clear_logfileEntry();
  if (wrapper) {
    set_has_wrapper();
    logfileEntry_.wrapper_ = wrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.Status.wrapper)
}
inline ::timeline::EventWrapper* Status::_internal_mutable_wrapper() {
  if (!_internal_has_wrapper()) {
    clear_logfileEntry();
    set_has_wrapper();
    logfileEntry_.wrapper_ = CreateMaybeMessage< ::timeline::EventWrapper >(GetArena());
  }
  return logfileEntry_.wrapper_;
}
inline ::timeline::EventWrapper* Status::mutable_wrapper() {
  // @@protoc_insertion_point(field_mutable:timeline.Status.wrapper)
  return _internal_mutable_wrapper();
}

// .timeline.GameEvent game_event = 2;
inline bool Status::_internal_has_game_event() const {
  return logfileEntry_case() == kGameEvent;
}
inline bool Status::has_game_event() const {
  return _internal_has_game_event();
}
inline void Status::set_has_game_event() {
  _oneof_case_[0] = kGameEvent;
}
inline void Status::clear_game_event() {
  if (_internal_has_game_event()) {
    if (GetArena() == nullptr) {
      delete logfileEntry_.game_event_;
    }
    clear_has_logfileEntry();
  }
}
inline ::timeline::GameEvent* Status::release_game_event() {
  // @@protoc_insertion_point(field_release:timeline.Status.game_event)
  if (_internal_has_game_event()) {
    clear_has_logfileEntry();
      ::timeline::GameEvent* temp = logfileEntry_.game_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    logfileEntry_.game_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::timeline::GameEvent& Status::_internal_game_event() const {
  return _internal_has_game_event()
      ? *logfileEntry_.game_event_
      : *reinterpret_cast< ::timeline::GameEvent*>(&::timeline::_GameEvent_default_instance_);
}
inline const ::timeline::GameEvent& Status::game_event() const {
  // @@protoc_insertion_point(field_get:timeline.Status.game_event)
  return _internal_game_event();
}
inline ::timeline::GameEvent* Status::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:timeline.Status.game_event)
  if (_internal_has_game_event()) {
    clear_has_logfileEntry();
    ::timeline::GameEvent* temp = logfileEntry_.game_event_;
    logfileEntry_.game_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_game_event(::timeline::GameEvent* game_event) {
  clear_logfileEntry();
  if (game_event) {
    set_has_game_event();
    logfileEntry_.game_event_ = game_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:timeline.Status.game_event)
}
inline ::timeline::GameEvent* Status::_internal_mutable_game_event() {
  if (!_internal_has_game_event()) {
    clear_logfileEntry();
    set_has_game_event();
    logfileEntry_.game_event_ = CreateMaybeMessage< ::timeline::GameEvent >(GetArena());
  }
  return logfileEntry_.game_event_;
}
inline ::timeline::GameEvent* Status::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable:timeline.Status.game_event)
  return _internal_mutable_game_event();
}

inline bool Status::has_logfileEntry() const {
  return logfileEntry_case() != LOGFILEENTRY_NOT_SET;
}
inline void Status::clear_has_logfileEntry() {
  _oneof_case_[0] = LOGFILEENTRY_NOT_SET;
}
inline Status::LogfileEntryCase Status::logfileEntry_case() const {
  return Status::LogfileEntryCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace timeline

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::timeline::GameEvent_Progress> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::timeline::GameEvent_Progress>() {
  return ::timeline::GameEvent_Progress_descriptor();
}
template <> struct is_proto_enum< ::timeline::TimelineInit_Resolved> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::timeline::TimelineInit_Resolved>() {
  return ::timeline::TimelineInit_Resolved_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto
