// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeline.proto

#include "timeline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_logfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidEntry_logfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventWrapper_timeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameDescriptor_timeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameLookup_timeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_timeline_2eproto;
namespace timeline {
class FrameLookupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameLookup> _instance;
} _FrameLookup_default_instance_;
class FrameDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameDescriptor> _instance;
} _FrameDescriptor_default_instance_;
class GameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEvent> _instance;
} _GameEvent_default_instance_;
class TimelineInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimelineInit> _instance;
} _TimelineInit_default_instance_;
class EventWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventWrapper> _instance;
} _EventWrapper_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
  const ::timeline::EventWrapper* wrapper_;
  const ::timeline::GameEvent* game_event_;
} _Status_default_instance_;
}  // namespace timeline
static void InitDefaultsscc_info_EventWrapper_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_EventWrapper_default_instance_;
    new (ptr) ::timeline::EventWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::EventWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventWrapper_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventWrapper_timeline_2eproto}, {
      &scc_info_GameEvent_timeline_2eproto.base,}};

static void InitDefaultsscc_info_FrameDescriptor_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_FrameDescriptor_default_instance_;
    new (ptr) ::timeline::FrameDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::FrameDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameDescriptor_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameDescriptor_timeline_2eproto}, {
      &scc_info_FrameLookup_timeline_2eproto.base,}};

static void InitDefaultsscc_info_FrameLookup_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_FrameLookup_default_instance_;
    new (ptr) ::timeline::FrameLookup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::FrameLookup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameLookup_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameLookup_timeline_2eproto}, {
      &scc_info_UidEntry_logfile_2eproto.base,}};

static void InitDefaultsscc_info_GameEvent_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_GameEvent_default_instance_;
    new (ptr) ::timeline::GameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::GameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEvent_timeline_2eproto}, {
      &scc_info_FrameDescriptor_timeline_2eproto.base,}};

static void InitDefaultsscc_info_Status_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_Status_default_instance_;
    new (ptr) ::timeline::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Status_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Status_timeline_2eproto}, {
      &scc_info_EventWrapper_timeline_2eproto.base,
      &scc_info_GameEvent_timeline_2eproto.base,}};

static void InitDefaultsscc_info_TimelineInit_timeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timeline::_TimelineInit_default_instance_;
    new (ptr) ::timeline::TimelineInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timeline::TimelineInit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimelineInit_timeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimelineInit_timeline_2eproto}, {
      &scc_info_UidEntry_logfile_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_timeline_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_timeline_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_timeline_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_timeline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::timeline::FrameLookup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::timeline::FrameLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::timeline::FrameLookup, uid_),
  PROTOBUF_FIELD_OFFSET(::timeline::FrameLookup, frame_number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::timeline::FrameDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::timeline::FrameDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::timeline::FrameDescriptor, base_hash_),
  PROTOBUF_FIELD_OFFSET(::timeline::FrameDescriptor, base_frame_number_),
  PROTOBUF_FIELD_OFFSET(::timeline::FrameDescriptor, frame_infos_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, location_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, progress_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, random_id_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, description_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, tag_),
  PROTOBUF_FIELD_OFFSET(::timeline::GameEvent, assignee_),
  3,
  4,
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, primary_),
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, secondary_),
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, partially_),
  PROTOBUF_FIELD_OFFSET(::timeline::TimelineInit, state_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::timeline::EventWrapper, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::timeline::EventWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::timeline::EventWrapper, tag_),
  PROTOBUF_FIELD_OFFSET(::timeline::EventWrapper, conflicting_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::timeline::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::timeline::Status, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::timeline::StatusDefaultTypeInternal, wrapper_),
  offsetof(::timeline::StatusDefaultTypeInternal, game_event_),
  PROTOBUF_FIELD_OFFSET(::timeline::Status, logfileEntry_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::timeline::FrameLookup)},
  { 9, 17, sizeof(::timeline::FrameDescriptor)},
  { 20, 31, sizeof(::timeline::GameEvent)},
  { 37, 46, sizeof(::timeline::TimelineInit)},
  { 50, 57, sizeof(::timeline::EventWrapper)},
  { 59, -1, sizeof(::timeline::Status)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_FrameLookup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_FrameDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_GameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_TimelineInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_EventWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::timeline::_Status_default_instance_),
};

const char descriptor_table_protodef_timeline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016timeline.proto\022\010timeline\032\rlogfile.prot"
  "o\"C\n\013FrameLookup\022\036\n\003uid\030\001 \002(\0132\021.logfile."
  "UidEntry\022\024\n\014frame_number\030\002 \002(\r\"k\n\017FrameD"
  "escriptor\022\021\n\tbase_hash\030\001 \002(\t\022\031\n\021base_fra"
  "me_number\030\002 \002(\r\022*\n\013frame_infos\030\003 \003(\0132\025.t"
  "imeline.FrameLookup\"\224\002\n\tGameEvent\022+\n\010loc"
  "ation\030\001 \002(\0132\031.timeline.FrameDescriptor\022."
  "\n\010progress\030\002 \002(\0162\034.timeline.GameEvent.Pr"
  "ogress\022\021\n\trandom_id\030\006 \002(\t\022\023\n\013description"
  "\030\003 \001(\t\022\013\n\003tag\030\004 \003(\t\022\020\n\010assignee\030\005 \001(\t\"c\n"
  "\010Progress\022\010\n\004Open\020\001\022\n\n\006Closed\020\002\022\r\n\tPostp"
  "oned\020\003\022\014\n\010Resolved\020\004\022\016\n\nInProgress\020\005\022\010\n\004"
  "Info\020\006\022\n\n\006Merged\020\007\"\327\001\n\014TimelineInit\022\"\n\007p"
  "rimary\030\001 \002(\0132\021.logfile.UidEntry\022$\n\tsecon"
  "dary\030\002 \003(\0132\021.logfile.UidEntry\022$\n\tpartial"
  "ly\030\003 \003(\0132\021.logfile.UidEntry\022.\n\005state\030\004 \002"
  "(\0162\037.timeline.TimelineInit.Resolved\"\'\n\010R"
  "esolved\022\n\n\006Solved\020\001\022\017\n\013Conflicting\020\002\"E\n\014"
  "EventWrapper\022\013\n\003tag\030\001 \002(\t\022(\n\013conflicting"
  "\030\002 \003(\0132\023.timeline.GameEvent\"n\n\006Status\022)\n"
  "\007wrapper\030\001 \001(\0132\026.timeline.EventWrapperH\000"
  "\022)\n\ngame_event\030\002 \001(\0132\023.timeline.GameEven"
  "tH\000B\016\n\014logfileEntryB\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_timeline_2eproto_deps[1] = {
  &::descriptor_table_logfile_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_timeline_2eproto_sccs[6] = {
  &scc_info_EventWrapper_timeline_2eproto.base,
  &scc_info_FrameDescriptor_timeline_2eproto.base,
  &scc_info_FrameLookup_timeline_2eproto.base,
  &scc_info_GameEvent_timeline_2eproto.base,
  &scc_info_Status_timeline_2eproto.base,
  &scc_info_TimelineInit_timeline_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_timeline_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_timeline_2eproto = {
  false, false, descriptor_table_protodef_timeline_2eproto, "timeline.proto", 904,
  &descriptor_table_timeline_2eproto_once, descriptor_table_timeline_2eproto_sccs, descriptor_table_timeline_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_timeline_2eproto::offsets,
  file_level_metadata_timeline_2eproto, 6, file_level_enum_descriptors_timeline_2eproto, file_level_service_descriptors_timeline_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_timeline_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_timeline_2eproto)), true);
namespace timeline {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEvent_Progress_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_timeline_2eproto);
  return file_level_enum_descriptors_timeline_2eproto[0];
}
bool GameEvent_Progress_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameEvent_Progress GameEvent::Open;
constexpr GameEvent_Progress GameEvent::Closed;
constexpr GameEvent_Progress GameEvent::Postponed;
constexpr GameEvent_Progress GameEvent::Resolved;
constexpr GameEvent_Progress GameEvent::InProgress;
constexpr GameEvent_Progress GameEvent::Info;
constexpr GameEvent_Progress GameEvent::Merged;
constexpr GameEvent_Progress GameEvent::Progress_MIN;
constexpr GameEvent_Progress GameEvent::Progress_MAX;
constexpr int GameEvent::Progress_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimelineInit_Resolved_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_timeline_2eproto);
  return file_level_enum_descriptors_timeline_2eproto[1];
}
bool TimelineInit_Resolved_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimelineInit_Resolved TimelineInit::Solved;
constexpr TimelineInit_Resolved TimelineInit::Conflicting;
constexpr TimelineInit_Resolved TimelineInit::Resolved_MIN;
constexpr TimelineInit_Resolved TimelineInit::Resolved_MAX;
constexpr int TimelineInit::Resolved_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FrameLookup::InitAsDefaultInstance() {
  ::timeline::_FrameLookup_default_instance_._instance.get_mutable()->uid_ = const_cast< ::logfile::UidEntry*>(
      ::logfile::UidEntry::internal_default_instance());
}
class FrameLookup::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameLookup>()._has_bits_);
  static const ::logfile::UidEntry& uid(const FrameLookup* msg);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::logfile::UidEntry&
FrameLookup::_Internal::uid(const FrameLookup* msg) {
  return *msg->uid_;
}
void FrameLookup::clear_uid() {
  if (uid_ != nullptr) uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FrameLookup::FrameLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.FrameLookup)
}
FrameLookup::FrameLookup(const FrameLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uid()) {
    uid_ = new ::logfile::UidEntry(*from.uid_);
  } else {
    uid_ = nullptr;
  }
  frame_number_ = from.frame_number_;
  // @@protoc_insertion_point(copy_constructor:timeline.FrameLookup)
}

void FrameLookup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameLookup_timeline_2eproto.base);
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_number_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(frame_number_));
}

FrameLookup::~FrameLookup() {
  // @@protoc_insertion_point(destructor:timeline.FrameLookup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uid_;
}

void FrameLookup::ArenaDtor(void* object) {
  FrameLookup* _this = reinterpret_cast< FrameLookup* >(object);
  (void)_this;
}
void FrameLookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameLookup& FrameLookup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameLookup_timeline_2eproto.base);
  return *internal_default_instance();
}


void FrameLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.FrameLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uid_ != nullptr);
    uid_->Clear();
  }
  frame_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .logfile.UidEntry uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameLookup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.FrameLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .logfile.UidEntry uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uid(this), target, stream);
  }

  // required uint32 frame_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.FrameLookup)
  return target;
}

size_t FrameLookup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timeline.FrameLookup)
  size_t total_size = 0;

  if (_internal_has_uid()) {
    // required .logfile.UidEntry uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());
  }

  return total_size;
}
size_t FrameLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.FrameLookup)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .logfile.UidEntry uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);

    // required uint32 frame_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameLookup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.FrameLookup)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameLookup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameLookup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.FrameLookup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.FrameLookup)
    MergeFrom(*source);
  }
}

void FrameLookup::MergeFrom(const FrameLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.FrameLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uid()->::logfile::UidEntry::MergeFrom(from._internal_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_number_ = from.frame_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameLookup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.FrameLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameLookup::CopyFrom(const FrameLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.FrameLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLookup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uid()) {
    if (!uid_->IsInitialized()) return false;
  }
  return true;
}

void FrameLookup::InternalSwap(FrameLookup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameLookup, frame_number_)
      + sizeof(FrameLookup::frame_number_)
      - PROTOBUF_FIELD_OFFSET(FrameLookup, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameLookup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameDescriptor::InitAsDefaultInstance() {
}
class FrameDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameDescriptor>()._has_bits_);
  static void set_has_base_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FrameDescriptor::FrameDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frame_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.FrameDescriptor)
}
FrameDescriptor::FrameDescriptor(const FrameDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      frame_infos_(from.frame_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_hash()) {
    base_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_hash(),
      GetArena());
  }
  base_frame_number_ = from.base_frame_number_;
  // @@protoc_insertion_point(copy_constructor:timeline.FrameDescriptor)
}

void FrameDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameDescriptor_timeline_2eproto.base);
  base_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_frame_number_ = 0u;
}

FrameDescriptor::~FrameDescriptor() {
  // @@protoc_insertion_point(destructor:timeline.FrameDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameDescriptor::ArenaDtor(void* object) {
  FrameDescriptor* _this = reinterpret_cast< FrameDescriptor* >(object);
  (void)_this;
}
void FrameDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameDescriptor& FrameDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameDescriptor_timeline_2eproto.base);
  return *internal_default_instance();
}


void FrameDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.FrameDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    base_hash_.ClearNonDefaultToEmpty();
  }
  base_frame_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string base_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_base_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.FrameDescriptor.base_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 base_frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base_frame_number(&has_bits);
          base_frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .timeline.FrameLookup frame_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.FrameDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string base_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base_hash().data(), static_cast<int>(this->_internal_base_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.FrameDescriptor.base_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_hash(), target);
  }

  // required uint32 base_frame_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base_frame_number(), target);
  }

  // repeated .timeline.FrameLookup frame_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_frame_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.FrameDescriptor)
  return target;
}

size_t FrameDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timeline.FrameDescriptor)
  size_t total_size = 0;

  if (_internal_has_base_hash()) {
    // required string base_hash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_hash());
  }

  if (_internal_has_base_frame_number()) {
    // required uint32 base_frame_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_frame_number());
  }

  return total_size;
}
size_t FrameDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.FrameDescriptor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string base_hash = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_hash());

    // required uint32 base_frame_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .timeline.FrameLookup frame_infos = 3;
  total_size += 1UL * this->_internal_frame_infos_size();
  for (const auto& msg : this->frame_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.FrameDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.FrameDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.FrameDescriptor)
    MergeFrom(*source);
  }
}

void FrameDescriptor::MergeFrom(const FrameDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.FrameDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_infos_.MergeFrom(from.frame_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_base_hash(from._internal_base_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      base_frame_number_ = from.base_frame_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.FrameDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameDescriptor::CopyFrom(const FrameDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.FrameDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDescriptor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(frame_infos_)) return false;
  return true;
}

void FrameDescriptor::InternalSwap(FrameDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_infos_.InternalSwap(&other->frame_infos_);
  base_hash_.Swap(&other->base_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_frame_number_, other->base_frame_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEvent::InitAsDefaultInstance() {
  ::timeline::_GameEvent_default_instance_._instance.get_mutable()->location_ = const_cast< ::timeline::FrameDescriptor*>(
      ::timeline::FrameDescriptor::internal_default_instance());
}
class GameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent>()._has_bits_);
  static const ::timeline::FrameDescriptor& location(const GameEvent* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_random_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_assignee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::timeline::FrameDescriptor&
GameEvent::_Internal::location(const GameEvent* msg) {
  return *msg->location_;
}
GameEvent::GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tag_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  assignee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_assignee()) {
    assignee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assignee(),
      GetArena());
  }
  random_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_random_id()) {
    random_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_random_id(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::timeline::FrameDescriptor(*from.location_);
  } else {
    location_ = nullptr;
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:timeline.GameEvent)
}

void GameEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEvent_timeline_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assignee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
  progress_ = 1;
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:timeline.GameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assignee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  random_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void GameEvent::ArenaDtor(void* object) {
  GameEvent* _this = reinterpret_cast< GameEvent* >(object);
  (void)_this;
}
void GameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEvent& GameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEvent_timeline_2eproto.base);
  return *internal_default_instance();
}


void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      assignee_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      random_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    progress_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .timeline.FrameDescriptor location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .timeline.GameEvent.Progress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::timeline::GameEvent_Progress_IsValid(val))) {
            _internal_set_progress(static_cast<::timeline::GameEvent_Progress>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.GameEvent.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tag();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.GameEvent.tag");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string assignee = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_assignee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.GameEvent.assignee");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string random_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_random_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.GameEvent.random_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .timeline.FrameDescriptor location = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // required .timeline.GameEvent.Progress progress = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_progress(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.GameEvent.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated string tag = 4;
  for (int i = 0, n = this->_internal_tag_size(); i < n; i++) {
    const auto& s = this->_internal_tag(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.GameEvent.tag");
    target = stream->WriteString(4, s, target);
  }

  // optional string assignee = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assignee().data(), static_cast<int>(this->_internal_assignee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.GameEvent.assignee");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_assignee(), target);
  }

  // required string random_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_random_id().data(), static_cast<int>(this->_internal_random_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.GameEvent.random_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_random_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.GameEvent)
  return target;
}

size_t GameEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timeline.GameEvent)
  size_t total_size = 0;

  if (_internal_has_random_id()) {
    // required string random_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_random_id());
  }

  if (_internal_has_location()) {
    // required .timeline.FrameDescriptor location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_internal_has_progress()) {
    // required .timeline.GameEvent.Progress progress = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_progress());
  }

  return total_size;
}
size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.GameEvent)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required string random_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_random_id());

    // required .timeline.FrameDescriptor location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);

    // required .timeline.GameEvent.Progress progress = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_progress());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tag = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tag_.size());
  for (int i = 0, n = tag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tag_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string assignee = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_assignee());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.GameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.GameEvent)
    MergeFrom(*source);
  }
}

void GameEvent::MergeFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_assignee(from._internal_assignee());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_random_id(from._internal_random_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_location()->::timeline::FrameDescriptor::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000010u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_location()) {
    if (!location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent::InternalSwap(GameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.InternalSwap(&other->tag_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assignee_.Swap(&other->assignee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  random_id_.Swap(&other->random_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(location_, other->location_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimelineInit::InitAsDefaultInstance() {
  ::timeline::_TimelineInit_default_instance_._instance.get_mutable()->primary_ = const_cast< ::logfile::UidEntry*>(
      ::logfile::UidEntry::internal_default_instance());
}
class TimelineInit::_Internal {
 public:
  using HasBits = decltype(std::declval<TimelineInit>()._has_bits_);
  static const ::logfile::UidEntry& primary(const TimelineInit* msg);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::logfile::UidEntry&
TimelineInit::_Internal::primary(const TimelineInit* msg) {
  return *msg->primary_;
}
void TimelineInit::clear_primary() {
  if (primary_ != nullptr) primary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TimelineInit::clear_secondary() {
  secondary_.Clear();
}
void TimelineInit::clear_partially() {
  partially_.Clear();
}
TimelineInit::TimelineInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secondary_(arena),
  partially_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.TimelineInit)
}
TimelineInit::TimelineInit(const TimelineInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      secondary_(from.secondary_),
      partially_(from.partially_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary()) {
    primary_ = new ::logfile::UidEntry(*from.primary_);
  } else {
    primary_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:timeline.TimelineInit)
}

void TimelineInit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimelineInit_timeline_2eproto.base);
  primary_ = nullptr;
  state_ = 1;
}

TimelineInit::~TimelineInit() {
  // @@protoc_insertion_point(destructor:timeline.TimelineInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimelineInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete primary_;
}

void TimelineInit::ArenaDtor(void* object) {
  TimelineInit* _this = reinterpret_cast< TimelineInit* >(object);
  (void)_this;
}
void TimelineInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimelineInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimelineInit& TimelineInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimelineInit_timeline_2eproto.base);
  return *internal_default_instance();
}


void TimelineInit::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.TimelineInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_.Clear();
  partially_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(primary_ != nullptr);
      primary_->Clear();
    }
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimelineInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .logfile.UidEntry primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .logfile.UidEntry secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_secondary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .logfile.UidEntry partially = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partially(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .timeline.TimelineInit.Resolved state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::timeline::TimelineInit_Resolved_IsValid(val))) {
            _internal_set_state(static_cast<::timeline::TimelineInit_Resolved>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimelineInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.TimelineInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .logfile.UidEntry primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primary(this), target, stream);
  }

  // repeated .logfile.UidEntry secondary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_secondary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_secondary(i), target, stream);
  }

  // repeated .logfile.UidEntry partially = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partially_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_partially(i), target, stream);
  }

  // required .timeline.TimelineInit.Resolved state = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.TimelineInit)
  return target;
}

size_t TimelineInit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timeline.TimelineInit)
  size_t total_size = 0;

  if (_internal_has_primary()) {
    // required .logfile.UidEntry primary = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  if (_internal_has_state()) {
    // required .timeline.TimelineInit.Resolved state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return total_size;
}
size_t TimelineInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.TimelineInit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .logfile.UidEntry primary = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_);

    // required .timeline.TimelineInit.Resolved state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logfile.UidEntry secondary = 2;
  total_size += 1UL * this->_internal_secondary_size();
  for (const auto& msg : this->secondary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .logfile.UidEntry partially = 3;
  total_size += 1UL * this->_internal_partially_size();
  for (const auto& msg : this->partially_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimelineInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.TimelineInit)
  GOOGLE_DCHECK_NE(&from, this);
  const TimelineInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimelineInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.TimelineInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.TimelineInit)
    MergeFrom(*source);
  }
}

void TimelineInit::MergeFrom(const TimelineInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.TimelineInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_.MergeFrom(from.secondary_);
  partially_.MergeFrom(from.partially_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_primary()->::logfile::UidEntry::MergeFrom(from._internal_primary());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimelineInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.TimelineInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimelineInit::CopyFrom(const TimelineInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.TimelineInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineInit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(secondary_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(partially_)) return false;
  if (_internal_has_primary()) {
    if (!primary_->IsInitialized()) return false;
  }
  return true;
}

void TimelineInit::InternalSwap(TimelineInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.InternalSwap(&other->secondary_);
  partially_.InternalSwap(&other->partially_);
  swap(primary_, other->primary_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimelineInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventWrapper::InitAsDefaultInstance() {
}
class EventWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<EventWrapper>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EventWrapper::EventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conflicting_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.EventWrapper)
}
EventWrapper::EventWrapper(const EventWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conflicting_(from.conflicting_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:timeline.EventWrapper)
}

void EventWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventWrapper_timeline_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EventWrapper::~EventWrapper() {
  // @@protoc_insertion_point(destructor:timeline.EventWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventWrapper::ArenaDtor(void* object) {
  EventWrapper* _this = reinterpret_cast< EventWrapper* >(object);
  (void)_this;
}
void EventWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventWrapper& EventWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventWrapper_timeline_2eproto.base);
  return *internal_default_instance();
}


void EventWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.EventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conflicting_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "timeline.EventWrapper.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .timeline.GameEvent conflicting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conflicting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.EventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "timeline.EventWrapper.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // repeated .timeline.GameEvent conflicting = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conflicting_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_conflicting(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.EventWrapper)
  return target;
}

size_t EventWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.EventWrapper)
  size_t total_size = 0;

  // required string tag = 1;
  if (_internal_has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .timeline.GameEvent conflicting = 2;
  total_size += 1UL * this->_internal_conflicting_size();
  for (const auto& msg : this->conflicting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.EventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const EventWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.EventWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.EventWrapper)
    MergeFrom(*source);
  }
}

void EventWrapper::MergeFrom(const EventWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.EventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conflicting_.MergeFrom(from.conflicting_);
  if (from._internal_has_tag()) {
    _internal_set_tag(from._internal_tag());
  }
}

void EventWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.EventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventWrapper::CopyFrom(const EventWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.EventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventWrapper::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(conflicting_)) return false;
  return true;
}

void EventWrapper::InternalSwap(EventWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conflicting_.InternalSwap(&other->conflicting_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EventWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
  ::timeline::_Status_default_instance_.wrapper_ = const_cast< ::timeline::EventWrapper*>(
      ::timeline::EventWrapper::internal_default_instance());
  ::timeline::_Status_default_instance_.game_event_ = const_cast< ::timeline::GameEvent*>(
      ::timeline::GameEvent::internal_default_instance());
}
class Status::_Internal {
 public:
  static const ::timeline::EventWrapper& wrapper(const Status* msg);
  static const ::timeline::GameEvent& game_event(const Status* msg);
};

const ::timeline::EventWrapper&
Status::_Internal::wrapper(const Status* msg) {
  return *msg->logfileEntry_.wrapper_;
}
const ::timeline::GameEvent&
Status::_Internal::game_event(const Status* msg) {
  return *msg->logfileEntry_.game_event_;
}
void Status::set_allocated_wrapper(::timeline::EventWrapper* wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_logfileEntry();
  if (wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wrapper);
    if (message_arena != submessage_arena) {
      wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrapper, submessage_arena);
    }
    set_has_wrapper();
    logfileEntry_.wrapper_ = wrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:timeline.Status.wrapper)
}
void Status::set_allocated_game_event(::timeline::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_logfileEntry();
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_event);
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    set_has_game_event();
    logfileEntry_.game_event_ = game_event;
  }
  // @@protoc_insertion_point(field_set_allocated:timeline.Status.game_event)
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:timeline.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_logfileEntry();
  switch (from.logfileEntry_case()) {
    case kWrapper: {
      _internal_mutable_wrapper()->::timeline::EventWrapper::MergeFrom(from._internal_wrapper());
      break;
    }
    case kGameEvent: {
      _internal_mutable_game_event()->::timeline::GameEvent::MergeFrom(from._internal_game_event());
      break;
    }
    case LOGFILEENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:timeline.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_timeline_2eproto.base);
  clear_has_logfileEntry();
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:timeline.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_logfileEntry()) {
    clear_logfileEntry();
  }
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_timeline_2eproto.base);
  return *internal_default_instance();
}


void Status::clear_logfileEntry() {
// @@protoc_insertion_point(one_of_clear_start:timeline.Status)
  switch (logfileEntry_case()) {
    case kWrapper: {
      if (GetArena() == nullptr) {
        delete logfileEntry_.wrapper_;
      }
      break;
    }
    case kGameEvent: {
      if (GetArena() == nullptr) {
        delete logfileEntry_.game_event_;
      }
      break;
    }
    case LOGFILEENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOGFILEENTRY_NOT_SET;
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:timeline.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_logfileEntry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .timeline.EventWrapper wrapper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .timeline.GameEvent game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:timeline.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (logfileEntry_case()) {
    case kWrapper: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::wrapper(this), target, stream);
      break;
    }
    case kGameEvent: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::game_event(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timeline.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timeline.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (logfileEntry_case()) {
    // .timeline.EventWrapper wrapper = 1;
    case kWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logfileEntry_.wrapper_);
      break;
    }
    // .timeline.GameEvent game_event = 2;
    case kGameEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logfileEntry_.game_event_);
      break;
    }
    case LOGFILEENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timeline.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timeline.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timeline.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timeline.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.logfileEntry_case()) {
    case kWrapper: {
      _internal_mutable_wrapper()->::timeline::EventWrapper::MergeFrom(from._internal_wrapper());
      break;
    }
    case kGameEvent: {
      _internal_mutable_game_event()->::timeline::GameEvent::MergeFrom(from._internal_game_event());
      break;
    }
    case LOGFILEENTRY_NOT_SET: {
      break;
    }
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timeline.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timeline.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  switch (logfileEntry_case()) {
    case kWrapper: {
      if (has_wrapper()) {
        if (!this->wrapper().IsInitialized()) return false;
      }
      break;
    }
    case kGameEvent: {
      if (has_game_event()) {
        if (!this->game_event().IsInitialized()) return false;
      }
      break;
    }
    case LOGFILEENTRY_NOT_SET: {
      break;
    }
  }
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(logfileEntry_, other->logfileEntry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace timeline
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::timeline::FrameLookup* Arena::CreateMaybeMessage< ::timeline::FrameLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::FrameLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::timeline::FrameDescriptor* Arena::CreateMaybeMessage< ::timeline::FrameDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::FrameDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::timeline::GameEvent* Arena::CreateMaybeMessage< ::timeline::GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::GameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::timeline::TimelineInit* Arena::CreateMaybeMessage< ::timeline::TimelineInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::TimelineInit >(arena);
}
template<> PROTOBUF_NOINLINE ::timeline::EventWrapper* Arena::CreateMaybeMessage< ::timeline::EventWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::EventWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::timeline::Status* Arena::CreateMaybeMessage< ::timeline::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::timeline::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
