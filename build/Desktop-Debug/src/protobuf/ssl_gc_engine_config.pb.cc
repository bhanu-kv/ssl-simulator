// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_engine_config.proto

#include "ssl_gc_engine_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto;
class Config_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_GameEventBehaviorEntry_DoNotUse> _instance;
} _Config_GameEventBehaviorEntry_DoNotUse_default_instance_;
class Config_AutoRefConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_AutoRefConfigsEntry_DoNotUse> _instance;
} _Config_AutoRefConfigsEntry_DoNotUse_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class AutoRefConfig_GameEventBehaviorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoRefConfig_GameEventBehaviorEntry_DoNotUse> _instance;
} _AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_;
class AutoRefConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoRefConfig> _instance;
} _AutoRefConfig_default_instance_;
static void InitDefaultsscc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AutoRefConfig_default_instance_;
    new (ptr) ::AutoRefConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AutoRefConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto}, {
      &scc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_;
    new (ptr) ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse();
  }
  ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_default_instance_;
    new (ptr) ::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto}, {
      &scc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,
      &scc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_AutoRefConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::Config_AutoRefConfigsEntry_DoNotUse();
  }
  ::Config_AutoRefConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto}, {
      &scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_GameEventBehaviorEntry_DoNotUse_default_instance_;
    new (ptr) ::Config_GameEventBehaviorEntry_DoNotUse();
  }
  ::Config_GameEventBehaviorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fengine_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fengine_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Config_GameEventBehaviorEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Config_AutoRefConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config, game_event_behavior_),
  PROTOBUF_FIELD_OFFSET(::Config, auto_ref_configs_),
  PROTOBUF_FIELD_OFFSET(::Config, active_tracker_source_),
  PROTOBUF_FIELD_OFFSET(::Config, teams_),
  PROTOBUF_FIELD_OFFSET(::Config, auto_continue_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefConfig, game_event_behavior_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Config_GameEventBehaviorEntry_DoNotUse)},
  { 9, 16, sizeof(::Config_AutoRefConfigsEntry_DoNotUse)},
  { 18, 28, sizeof(::Config)},
  { 33, 40, sizeof(::AutoRefConfig_GameEventBehaviorEntry_DoNotUse)},
  { 42, -1, sizeof(::AutoRefConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_GameEventBehaviorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_AutoRefConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefConfig_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fengine_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ssl_gc_engine_config.proto\"\354\003\n\006Config\022"
  ";\n\023game_event_behavior\030\001 \003(\0132\036.Config.Ga"
  "meEventBehaviorEntry\0225\n\020auto_ref_configs"
  "\030\002 \003(\0132\033.Config.AutoRefConfigsEntry\022\035\n\025a"
  "ctive_tracker_source\030\003 \001(\t\022\r\n\005teams\030\004 \003("
  "\t\022\025\n\rauto_continue\030\005 \001(\010\032J\n\026GameEventBeh"
  "aviorEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0162\020"
  ".Config.Behavior:\0028\001\032E\n\023AutoRefConfigsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.AutoRe"
  "fConfig:\0028\001\"\225\001\n\010Behavior\022\024\n\020BEHAVIOR_UNK"
  "NOWN\020\000\022\023\n\017BEHAVIOR_ACCEPT\020\001\022\034\n\030BEHAVIOR_"
  "ACCEPT_MAJORITY\020\002\022\031\n\025BEHAVIOR_PROPOSE_ON"
  "LY\020\003\022\020\n\014BEHAVIOR_LOG\020\004\022\023\n\017BEHAVIOR_IGNOR"
  "E\020\005\"\204\002\n\rAutoRefConfig\022B\n\023game_event_beha"
  "vior\030\001 \003(\0132%.AutoRefConfig.GameEventBeha"
  "viorEntry\032Q\n\026GameEventBehaviorEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022&\n\005value\030\002 \001(\0162\027.AutoRefConfig."
  "Behavior:\0028\001\"\\\n\010Behavior\022\024\n\020BEHAVIOR_UNK"
  "NOWN\020\000\022\023\n\017BEHAVIOR_ACCEPT\020\001\022\020\n\014BEHAVIOR_"
  "LOG\020\002\022\023\n\017BEHAVIOR_IGNORE\020\003B@Z>github.com"
  "/RoboCup-SSL/ssl-game-controller/interna"
  "l/app/engine"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_sccs[5] = {
  &scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto.base,
  &scc_info_AutoRefConfig_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,
  &scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto.base,
  &scc_info_Config_AutoRefConfigsEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,
  &scc_info_Config_GameEventBehaviorEntry_DoNotUse_ssl_5fgc_5fengine_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fengine_5fconfig_2eproto, "ssl_gc_engine_config.proto", 852,
  &descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_once, descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_sccs, descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fengine_5fconfig_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fengine_5fconfig_2eproto, 5, file_level_enum_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto, file_level_service_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fengine_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_Behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto[0];
}
bool Config_Behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_Behavior Config::BEHAVIOR_UNKNOWN;
constexpr Config_Behavior Config::BEHAVIOR_ACCEPT;
constexpr Config_Behavior Config::BEHAVIOR_ACCEPT_MAJORITY;
constexpr Config_Behavior Config::BEHAVIOR_PROPOSE_ONLY;
constexpr Config_Behavior Config::BEHAVIOR_LOG;
constexpr Config_Behavior Config::BEHAVIOR_IGNORE;
constexpr Config_Behavior Config::Behavior_MIN;
constexpr Config_Behavior Config::Behavior_MAX;
constexpr int Config::Behavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoRefConfig_Behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fengine_5fconfig_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fengine_5fconfig_2eproto[1];
}
bool AutoRefConfig_Behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_UNKNOWN;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_ACCEPT;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_LOG;
constexpr AutoRefConfig_Behavior AutoRefConfig::BEHAVIOR_IGNORE;
constexpr AutoRefConfig_Behavior AutoRefConfig::Behavior_MIN;
constexpr AutoRefConfig_Behavior AutoRefConfig::Behavior_MAX;
constexpr int AutoRefConfig::Behavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

Config_GameEventBehaviorEntry_DoNotUse::Config_GameEventBehaviorEntry_DoNotUse() {}
Config_GameEventBehaviorEntry_DoNotUse::Config_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Config_GameEventBehaviorEntry_DoNotUse::MergeFrom(const Config_GameEventBehaviorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Config_GameEventBehaviorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Config_GameEventBehaviorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Config_AutoRefConfigsEntry_DoNotUse::Config_AutoRefConfigsEntry_DoNotUse() {}
Config_AutoRefConfigsEntry_DoNotUse::Config_AutoRefConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Config_AutoRefConfigsEntry_DoNotUse::MergeFrom(const Config_AutoRefConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Config_AutoRefConfigsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Config_AutoRefConfigsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Config::InitAsDefaultInstance() {
}
class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_active_tracker_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_continue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_event_behavior_(arena),
  auto_ref_configs_(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_event_behavior_.MergeFrom(from.game_event_behavior_);
  auto_ref_configs_.MergeFrom(from.auto_ref_configs_);
  active_tracker_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_active_tracker_source()) {
    active_tracker_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_active_tracker_source(),
      GetArena());
  }
  auto_continue_ = from.auto_continue_;
  // @@protoc_insertion_point(copy_constructor:Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto.base);
  active_tracker_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_continue_ = false;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  active_tracker_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_ssl_5fgc_5fengine_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_event_behavior_.Clear();
  auto_ref_configs_.Clear();
  teams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    active_tracker_source_.ClearNonDefaultToEmpty();
  }
  auto_continue_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .Config.Behavior> game_event_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&game_event_behavior_, ::Config_Behavior_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .AutoRefConfig> auto_ref_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&auto_ref_configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string active_tracker_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_active_tracker_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.active_tracker_source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_teams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.teams");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool auto_continue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_auto_continue(&has_bits);
          auto_continue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Config.Behavior> game_event_behavior = 1;
  if (!this->_internal_game_event_behavior().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "Config.GameEventBehaviorEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_game_event_behavior().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_game_event_behavior().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::const_iterator
          it = this->_internal_game_event_behavior().begin();
          it != this->_internal_game_event_behavior().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Config_GameEventBehaviorEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::const_iterator
          it = this->_internal_game_event_behavior().begin();
          it != this->_internal_game_event_behavior().end(); ++it) {
        target = Config_GameEventBehaviorEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .AutoRefConfig> auto_ref_configs = 2;
  if (!this->_internal_auto_ref_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "Config.AutoRefConfigsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_auto_ref_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_auto_ref_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::const_iterator
          it = this->_internal_auto_ref_configs().begin();
          it != this->_internal_auto_ref_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Config_AutoRefConfigsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::const_iterator
          it = this->_internal_auto_ref_configs().begin();
          it != this->_internal_auto_ref_configs().end(); ++it) {
        target = Config_AutoRefConfigsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional string active_tracker_source = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_active_tracker_source().data(), static_cast<int>(this->_internal_active_tracker_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.active_tracker_source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_active_tracker_source(), target);
  }

  // repeated string teams = 4;
  for (int i = 0, n = this->_internal_teams_size(); i < n; i++) {
    const auto& s = this->_internal_teams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Config.teams");
    target = stream->WriteString(4, s, target);
  }

  // optional bool auto_continue = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_continue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Config.Behavior> game_event_behavior = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_event_behavior_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Config_Behavior >::const_iterator
      it = this->_internal_game_event_behavior().begin();
      it != this->_internal_game_event_behavior().end(); ++it) {
    total_size += Config_GameEventBehaviorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .AutoRefConfig> auto_ref_configs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_auto_ref_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig >::const_iterator
      it = this->_internal_auto_ref_configs().begin();
      it != this->_internal_auto_ref_configs().end(); ++it) {
    total_size += Config_AutoRefConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string teams = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(teams_.size());
  for (int i = 0, n = teams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      teams_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string active_tracker_source = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_active_tracker_source());
    }

    // optional bool auto_continue = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_event_behavior_.MergeFrom(from.game_event_behavior_);
  auto_ref_configs_.MergeFrom(from.auto_ref_configs_);
  teams_.MergeFrom(from.teams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_active_tracker_source(from._internal_active_tracker_source());
    }
    if (cached_has_bits & 0x00000002u) {
      auto_continue_ = from.auto_continue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_event_behavior_.Swap(&other->game_event_behavior_);
  auto_ref_configs_.Swap(&other->auto_ref_configs_);
  teams_.InternalSwap(&other->teams_);
  active_tracker_source_.Swap(&other->active_tracker_source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(auto_continue_, other->auto_continue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AutoRefConfig_GameEventBehaviorEntry_DoNotUse::AutoRefConfig_GameEventBehaviorEntry_DoNotUse() {}
AutoRefConfig_GameEventBehaviorEntry_DoNotUse::AutoRefConfig_GameEventBehaviorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AutoRefConfig_GameEventBehaviorEntry_DoNotUse::MergeFrom(const AutoRefConfig_GameEventBehaviorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AutoRefConfig_GameEventBehaviorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AutoRefConfig_GameEventBehaviorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AutoRefConfig::InitAsDefaultInstance() {
}
class AutoRefConfig::_Internal {
 public:
};

AutoRefConfig::AutoRefConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_event_behavior_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefConfig)
}
AutoRefConfig::AutoRefConfig(const AutoRefConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_event_behavior_.MergeFrom(from.game_event_behavior_);
  // @@protoc_insertion_point(copy_constructor:AutoRefConfig)
}

void AutoRefConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto.base);
}

AutoRefConfig::~AutoRefConfig() {
  // @@protoc_insertion_point(destructor:AutoRefConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoRefConfig::ArenaDtor(void* object) {
  AutoRefConfig* _this = reinterpret_cast< AutoRefConfig* >(object);
  (void)_this;
}
void AutoRefConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoRefConfig& AutoRefConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoRefConfig_ssl_5fgc_5fengine_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AutoRefConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_event_behavior_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&game_event_behavior_, ::AutoRefConfig_Behavior_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
  if (!this->_internal_game_event_behavior().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "AutoRefConfig.GameEventBehaviorEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_game_event_behavior().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_game_event_behavior().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::const_iterator
          it = this->_internal_game_event_behavior().begin();
          it != this->_internal_game_event_behavior().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AutoRefConfig_GameEventBehaviorEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::const_iterator
          it = this->_internal_game_event_behavior().begin();
          it != this->_internal_game_event_behavior().end(); ++it) {
        target = AutoRefConfig_GameEventBehaviorEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefConfig)
  return target;
}

size_t AutoRefConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .AutoRefConfig.Behavior> game_event_behavior = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_event_behavior_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::AutoRefConfig_Behavior >::const_iterator
      it = this->_internal_game_event_behavior().begin();
      it != this->_internal_game_event_behavior().end(); ++it) {
    total_size += AutoRefConfig_GameEventBehaviorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefConfig)
    MergeFrom(*source);
  }
}

void AutoRefConfig::MergeFrom(const AutoRefConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_event_behavior_.MergeFrom(from.game_event_behavior_);
}

void AutoRefConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefConfig::CopyFrom(const AutoRefConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefConfig::IsInitialized() const {
  return true;
}

void AutoRefConfig::InternalSwap(AutoRefConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_event_behavior_.Swap(&other->game_event_behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config_GameEventBehaviorEntry_DoNotUse* Arena::CreateMaybeMessage< ::Config_GameEventBehaviorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config_GameEventBehaviorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Config_AutoRefConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Config_AutoRefConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config_AutoRefConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Config* Arena::CreateMaybeMessage< ::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse* Arena::CreateMaybeMessage< ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefConfig_GameEventBehaviorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefConfig* Arena::CreateMaybeMessage< ::AutoRefConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
