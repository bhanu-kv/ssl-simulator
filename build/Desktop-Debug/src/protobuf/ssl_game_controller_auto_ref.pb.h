// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_controller_common.pb.h"
#include "ssl_game_event_2019.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
namespace gameController {
class AutoRefRegistration;
class AutoRefRegistrationDefaultTypeInternal;
extern AutoRefRegistrationDefaultTypeInternal _AutoRefRegistration_default_instance_;
class AutoRefToController;
class AutoRefToControllerDefaultTypeInternal;
extern AutoRefToControllerDefaultTypeInternal _AutoRefToController_default_instance_;
class ControllerToAutoRef;
class ControllerToAutoRefDefaultTypeInternal;
extern ControllerToAutoRefDefaultTypeInternal _ControllerToAutoRef_default_instance_;
}  // namespace gameController
PROTOBUF_NAMESPACE_OPEN
template<> ::gameController::AutoRefRegistration* Arena::CreateMaybeMessage<::gameController::AutoRefRegistration>(Arena*);
template<> ::gameController::AutoRefToController* Arena::CreateMaybeMessage<::gameController::AutoRefToController>(Arena*);
template<> ::gameController::ControllerToAutoRef* Arena::CreateMaybeMessage<::gameController::ControllerToAutoRef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameController {

// ===================================================================

class AutoRefRegistration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameController.AutoRefRegistration) */ {
 public:
  inline AutoRefRegistration() : AutoRefRegistration(nullptr) {};
  virtual ~AutoRefRegistration();

  AutoRefRegistration(const AutoRefRegistration& from);
  AutoRefRegistration(AutoRefRegistration&& from) noexcept
    : AutoRefRegistration() {
    *this = ::std::move(from);
  }

  inline AutoRefRegistration& operator=(const AutoRefRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefRegistration& operator=(AutoRefRegistration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefRegistration* internal_default_instance() {
    return reinterpret_cast<const AutoRefRegistration*>(
               &_AutoRefRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutoRefRegistration& a, AutoRefRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefRegistration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefRegistration* New() const final {
    return CreateMaybeMessage<AutoRefRegistration>(nullptr);
  }

  AutoRefRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefRegistration& from);
  void MergeFrom(const AutoRefRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameController.AutoRefRegistration";
  }
  protected:
  explicit AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // required string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_identifier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_identifier(
      std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional .gameController.Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::gameController::Signature& signature() const;
  ::gameController::Signature* release_signature();
  ::gameController::Signature* mutable_signature();
  void set_allocated_signature(::gameController::Signature* signature);
  private:
  const ::gameController::Signature& _internal_signature() const;
  ::gameController::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::gameController::Signature* signature);
  ::gameController::Signature* unsafe_arena_release_signature();

  // @@protoc_insertion_point(class_scope:gameController.AutoRefRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::gameController::Signature* signature_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class AutoRefToController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameController.AutoRefToController) */ {
 public:
  inline AutoRefToController() : AutoRefToController(nullptr) {};
  virtual ~AutoRefToController();

  AutoRefToController(const AutoRefToController& from);
  AutoRefToController(AutoRefToController&& from) noexcept
    : AutoRefToController() {
    *this = ::std::move(from);
  }

  inline AutoRefToController& operator=(const AutoRefToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoRefToController& operator=(AutoRefToController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoRefToController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoRefToController* internal_default_instance() {
    return reinterpret_cast<const AutoRefToController*>(
               &_AutoRefToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutoRefToController& a, AutoRefToController& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoRefToController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoRefToController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoRefToController* New() const final {
    return CreateMaybeMessage<AutoRefToController>(nullptr);
  }

  AutoRefToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoRefToController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoRefToController& from);
  void MergeFrom(const AutoRefToController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoRefToController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameController.AutoRefToController";
  }
  protected:
  explicit AutoRefToController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kGameEventFieldNumber = 2,
  };
  // optional .gameController.Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::gameController::Signature& signature() const;
  ::gameController::Signature* release_signature();
  ::gameController::Signature* mutable_signature();
  void set_allocated_signature(::gameController::Signature* signature);
  private:
  const ::gameController::Signature& _internal_signature() const;
  ::gameController::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::gameController::Signature* signature);
  ::gameController::Signature* unsafe_arena_release_signature();

  // optional .gameController.GameEvent game_event = 2;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::gameController::GameEvent& game_event() const;
  ::gameController::GameEvent* release_game_event();
  ::gameController::GameEvent* mutable_game_event();
  void set_allocated_game_event(::gameController::GameEvent* game_event);
  private:
  const ::gameController::GameEvent& _internal_game_event() const;
  ::gameController::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::gameController::GameEvent* game_event);
  ::gameController::GameEvent* unsafe_arena_release_game_event();

  // @@protoc_insertion_point(class_scope:gameController.AutoRefToController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gameController::Signature* signature_;
  ::gameController::GameEvent* game_event_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// -------------------------------------------------------------------

class ControllerToAutoRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameController.ControllerToAutoRef) */ {
 public:
  inline ControllerToAutoRef() : ControllerToAutoRef(nullptr) {};
  virtual ~ControllerToAutoRef();

  ControllerToAutoRef(const ControllerToAutoRef& from);
  ControllerToAutoRef(ControllerToAutoRef&& from) noexcept
    : ControllerToAutoRef() {
    *this = ::std::move(from);
  }

  inline ControllerToAutoRef& operator=(const ControllerToAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToAutoRef& operator=(ControllerToAutoRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerToAutoRef& default_instance();

  enum MsgCase {
    kControllerReply = 1,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerToAutoRef* internal_default_instance() {
    return reinterpret_cast<const ControllerToAutoRef*>(
               &_ControllerToAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToAutoRef& a, ControllerToAutoRef& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToAutoRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerToAutoRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerToAutoRef* New() const final {
    return CreateMaybeMessage<ControllerToAutoRef>(nullptr);
  }

  ControllerToAutoRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToAutoRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerToAutoRef& from);
  void MergeFrom(const ControllerToAutoRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToAutoRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameController.ControllerToAutoRef";
  }
  protected:
  explicit ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
  };
  // .gameController.ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  private:
  bool _internal_has_controller_reply() const;
  public:
  void clear_controller_reply();
  const ::gameController::ControllerReply& controller_reply() const;
  ::gameController::ControllerReply* release_controller_reply();
  ::gameController::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::gameController::ControllerReply* controller_reply);
  private:
  const ::gameController::ControllerReply& _internal_controller_reply() const;
  ::gameController::ControllerReply* _internal_mutable_controller_reply();
  public:
  void unsafe_arena_set_allocated_controller_reply(
      ::gameController::ControllerReply* controller_reply);
  ::gameController::ControllerReply* unsafe_arena_release_controller_reply();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:gameController.ControllerToAutoRef)
 private:
  class _Internal;
  void set_has_controller_reply();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::gameController::ControllerReply* controller_reply_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutoRefRegistration

// required string identifier = 1;
inline bool AutoRefRegistration::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutoRefRegistration::has_identifier() const {
  return _internal_has_identifier();
}
inline void AutoRefRegistration::clear_identifier() {
  identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutoRefRegistration::identifier() const {
  // @@protoc_insertion_point(field_get:gameController.AutoRefRegistration.identifier)
  return _internal_identifier();
}
inline void AutoRefRegistration::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:gameController.AutoRefRegistration.identifier)
}
inline std::string* AutoRefRegistration::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:gameController.AutoRefRegistration.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& AutoRefRegistration::_internal_identifier() const {
  return identifier_.Get();
}
inline void AutoRefRegistration::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoRefRegistration::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gameController.AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gameController.AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gameController.AutoRefRegistration.identifier)
}
inline std::string* AutoRefRegistration::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoRefRegistration::release_identifier() {
  // @@protoc_insertion_point(field_release:gameController.AutoRefRegistration.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoRefRegistration::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gameController.AutoRefRegistration.identifier)
}
inline std::string* AutoRefRegistration::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gameController.AutoRefRegistration.identifier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoRefRegistration::unsafe_arena_set_allocated_identifier(
    std::string* identifier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      identifier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameController.AutoRefRegistration.identifier)
}

// optional .gameController.Signature signature = 2;
inline bool AutoRefRegistration::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool AutoRefRegistration::has_signature() const {
  return _internal_has_signature();
}
inline const ::gameController::Signature& AutoRefRegistration::_internal_signature() const {
  const ::gameController::Signature* p = signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gameController::Signature*>(
      &::gameController::_Signature_default_instance_);
}
inline const ::gameController::Signature& AutoRefRegistration::signature() const {
  // @@protoc_insertion_point(field_get:gameController.AutoRefRegistration.signature)
  return _internal_signature();
}
inline void AutoRefRegistration::unsafe_arena_set_allocated_signature(
    ::gameController::Signature* signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameController.AutoRefRegistration.signature)
}
inline ::gameController::Signature* AutoRefRegistration::release_signature() {
  auto temp = unsafe_arena_release_signature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gameController::Signature* AutoRefRegistration::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:gameController.AutoRefRegistration.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::gameController::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::gameController::Signature* AutoRefRegistration::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameController::Signature>(GetArena());
    signature_ = p;
  }
  return signature_;
}
inline ::gameController::Signature* AutoRefRegistration::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:gameController.AutoRefRegistration.signature)
  return _internal_mutable_signature();
}
inline void AutoRefRegistration::set_allocated_signature(::gameController::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature)->GetArena();
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:gameController.AutoRefRegistration.signature)
}

// -------------------------------------------------------------------

// AutoRefToController

// optional .gameController.Signature signature = 1;
inline bool AutoRefToController::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool AutoRefToController::has_signature() const {
  return _internal_has_signature();
}
inline const ::gameController::Signature& AutoRefToController::_internal_signature() const {
  const ::gameController::Signature* p = signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gameController::Signature*>(
      &::gameController::_Signature_default_instance_);
}
inline const ::gameController::Signature& AutoRefToController::signature() const {
  // @@protoc_insertion_point(field_get:gameController.AutoRefToController.signature)
  return _internal_signature();
}
inline void AutoRefToController::unsafe_arena_set_allocated_signature(
    ::gameController::Signature* signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameController.AutoRefToController.signature)
}
inline ::gameController::Signature* AutoRefToController::release_signature() {
  auto temp = unsafe_arena_release_signature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gameController::Signature* AutoRefToController::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:gameController.AutoRefToController.signature)
  _has_bits_[0] &= ~0x00000001u;
  ::gameController::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::gameController::Signature* AutoRefToController::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameController::Signature>(GetArena());
    signature_ = p;
  }
  return signature_;
}
inline ::gameController::Signature* AutoRefToController::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:gameController.AutoRefToController.signature)
  return _internal_mutable_signature();
}
inline void AutoRefToController::set_allocated_signature(::gameController::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature)->GetArena();
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:gameController.AutoRefToController.signature)
}

// optional .gameController.GameEvent game_event = 2;
inline bool AutoRefToController::_internal_has_game_event() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_event_ != nullptr);
  return value;
}
inline bool AutoRefToController::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::gameController::GameEvent& AutoRefToController::_internal_game_event() const {
  const ::gameController::GameEvent* p = game_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gameController::GameEvent*>(
      &::gameController::_GameEvent_default_instance_);
}
inline const ::gameController::GameEvent& AutoRefToController::game_event() const {
  // @@protoc_insertion_point(field_get:gameController.AutoRefToController.game_event)
  return _internal_game_event();
}
inline void AutoRefToController::unsafe_arena_set_allocated_game_event(
    ::gameController::GameEvent* game_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  game_event_ = game_event;
  if (game_event) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameController.AutoRefToController.game_event)
}
inline ::gameController::GameEvent* AutoRefToController::release_game_event() {
  auto temp = unsafe_arena_release_game_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gameController::GameEvent* AutoRefToController::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:gameController.AutoRefToController.game_event)
  _has_bits_[0] &= ~0x00000002u;
  ::gameController::GameEvent* temp = game_event_;
  game_event_ = nullptr;
  return temp;
}
inline ::gameController::GameEvent* AutoRefToController::_internal_mutable_game_event() {
  _has_bits_[0] |= 0x00000002u;
  if (game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameController::GameEvent>(GetArena());
    game_event_ = p;
  }
  return game_event_;
}
inline ::gameController::GameEvent* AutoRefToController::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable:gameController.AutoRefToController.game_event)
  return _internal_mutable_game_event();
}
inline void AutoRefToController::set_allocated_game_event(::gameController::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event)->GetArena();
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:gameController.AutoRefToController.game_event)
}

// -------------------------------------------------------------------

// ControllerToAutoRef

// .gameController.ControllerReply controller_reply = 1;
inline bool ControllerToAutoRef::_internal_has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline bool ControllerToAutoRef::has_controller_reply() const {
  return _internal_has_controller_reply();
}
inline void ControllerToAutoRef::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
inline ::gameController::ControllerReply* ControllerToAutoRef::release_controller_reply() {
  // @@protoc_insertion_point(field_release:gameController.ControllerToAutoRef.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
      ::gameController::ControllerReply* temp = msg_.controller_reply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gameController::ControllerReply& ControllerToAutoRef::_internal_controller_reply() const {
  return _internal_has_controller_reply()
      ? *msg_.controller_reply_
      : *reinterpret_cast< ::gameController::ControllerReply*>(&::gameController::_ControllerReply_default_instance_);
}
inline const ::gameController::ControllerReply& ControllerToAutoRef::controller_reply() const {
  // @@protoc_insertion_point(field_get:gameController.ControllerToAutoRef.controller_reply)
  return _internal_controller_reply();
}
inline ::gameController::ControllerReply* ControllerToAutoRef::unsafe_arena_release_controller_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gameController.ControllerToAutoRef.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::gameController::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerToAutoRef::unsafe_arena_set_allocated_controller_reply(::gameController::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameController.ControllerToAutoRef.controller_reply)
}
inline ::gameController::ControllerReply* ControllerToAutoRef::_internal_mutable_controller_reply() {
  if (!_internal_has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = CreateMaybeMessage< ::gameController::ControllerReply >(GetArena());
  }
  return msg_.controller_reply_;
}
inline ::gameController::ControllerReply* ControllerToAutoRef::mutable_controller_reply() {
  // @@protoc_insertion_point(field_mutable:gameController.ControllerToAutoRef.controller_reply)
  return _internal_mutable_controller_reply();
}

inline bool ControllerToAutoRef::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToAutoRef::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToAutoRef::MsgCase ControllerToAutoRef::msg_case() const {
  return ControllerToAutoRef::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameController

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto
