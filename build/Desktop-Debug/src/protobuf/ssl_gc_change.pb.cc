// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_change.proto

#include "ssl_gc_change.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Change_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_Revert_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fchange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Foul_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<40> scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Proposal_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedCard_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_State_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_YellowCard_ssl_5fgc_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
class StateChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateChange> _instance;
} _StateChange_default_instance_;
class Change_NewCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_NewCommand> _instance;
} _Change_NewCommand_default_instance_;
class Change_ChangeStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_ChangeStage> _instance;
} _Change_ChangeStage_default_instance_;
class Change_SetBallPlacementPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_SetBallPlacementPos> _instance;
} _Change_SetBallPlacementPos_default_instance_;
class Change_AddYellowCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AddYellowCard> _instance;
} _Change_AddYellowCard_default_instance_;
class Change_AddRedCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AddRedCard> _instance;
} _Change_AddRedCard_default_instance_;
class Change_YellowCardOverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_YellowCardOver> _instance;
} _Change_YellowCardOver_default_instance_;
class Change_AddGameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AddGameEvent> _instance;
} _Change_AddGameEvent_default_instance_;
class Change_AddPassiveGameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AddPassiveGameEvent> _instance;
} _Change_AddPassiveGameEvent_default_instance_;
class Change_AddProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AddProposal> _instance;
} _Change_AddProposal_default_instance_;
class Change_AcceptProposalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_AcceptProposalGroup> _instance;
} _Change_AcceptProposalGroup_default_instance_;
class Change_UpdateConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_UpdateConfig> _instance;
} _Change_UpdateConfig_default_instance_;
class Change_UpdateTeamStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_UpdateTeamState> _instance;
} _Change_UpdateTeamState_default_instance_;
class Change_SwitchColorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_SwitchColors> _instance;
} _Change_SwitchColors_default_instance_;
class Change_RevertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_Revert> _instance;
} _Change_Revert_default_instance_;
class Change_NewGameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_NewGameState> _instance;
} _Change_NewGameState_default_instance_;
class Change_SetStatusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change_SetStatusMessage> _instance;
} _Change_SetStatusMessage_default_instance_;
class ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change> _instance;
  const ::Change_NewCommand* new_command_change_;
  const ::Change_ChangeStage* change_stage_change_;
  const ::Change_SetBallPlacementPos* set_ball_placement_pos_change_;
  const ::Change_AddYellowCard* add_yellow_card_change_;
  const ::Change_AddRedCard* add_red_card_change_;
  const ::Change_YellowCardOver* yellow_card_over_change_;
  const ::Change_AddGameEvent* add_game_event_change_;
  const ::Change_AddPassiveGameEvent* add_passive_game_event_change_;
  const ::Change_AddProposal* add_proposal_change_;
  const ::Change_UpdateConfig* update_config_change_;
  const ::Change_UpdateTeamState* update_team_state_change_;
  const ::Change_SwitchColors* switch_colors_change_;
  const ::Change_Revert* revert_change_;
  const ::Change_NewGameState* new_game_state_change_;
  const ::Change_AcceptProposalGroup* accept_proposal_group_change_;
  const ::Change_SetStatusMessage* set_status_message_change_;
} _Change_default_instance_;
static void InitDefaultsscc_info_Change_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_default_instance_;
    new (ptr) ::Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Change_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_Change_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_Revert_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto.base,}};

static void InitDefaultsscc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AcceptProposalGroup_default_instance_;
    new (ptr) ::Change_AcceptProposalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AcceptProposalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddGameEvent_default_instance_;
    new (ptr) ::Change_AddGameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddGameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddPassiveGameEvent_default_instance_;
    new (ptr) ::Change_AddPassiveGameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddPassiveGameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddProposal_default_instance_;
    new (ptr) ::Change_AddProposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddProposal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_Proposal_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddRedCard_default_instance_;
    new (ptr) ::Change_AddRedCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddRedCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddYellowCard_default_instance_;
    new (ptr) ::Change_AddYellowCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddYellowCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_ChangeStage_default_instance_;
    new (ptr) ::Change_ChangeStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_ChangeStage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_NewCommand_default_instance_;
    new (ptr) ::Change_NewCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_NewCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_Command_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_NewGameState_default_instance_;
    new (ptr) ::Change_NewGameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_NewGameState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_GameState_ssl_5fgc_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Change_Revert_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_Revert_default_instance_;
    new (ptr) ::Change_Revert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_Revert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_Revert_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_Revert_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SetBallPlacementPos_default_instance_;
    new (ptr) ::Change_SetBallPlacementPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SetBallPlacementPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SetStatusMessage_default_instance_;
    new (ptr) ::Change_SetStatusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SetStatusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SwitchColors_default_instance_;
    new (ptr) ::Change_SwitchColors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SwitchColors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_UpdateConfig_default_instance_;
    new (ptr) ::Change_UpdateConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_UpdateConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_UpdateTeamState_default_instance_;
    new (ptr) ::Change_UpdateTeamState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_UpdateTeamState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_YellowCard_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_RedCard_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Foul_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_YellowCardOver_default_instance_;
    new (ptr) ::Change_YellowCardOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_YellowCardOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto}, {}};

static void InitDefaultsscc_info_StateChange_ssl_5fgc_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StateChange_default_instance_;
    new (ptr) ::StateChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StateChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StateChange_ssl_5fgc_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StateChange_ssl_5fgc_5fchange_2eproto}, {
      &scc_info_State_ssl_5fgc_5fstate_2eproto.base,
      &scc_info_Change_ssl_5fgc_5fchange_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fchange_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fgc_5fchange_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::StateChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StateChange, id_),
  PROTOBUF_FIELD_OFFSET(::StateChange, state_pre_),
  PROTOBUF_FIELD_OFFSET(::StateChange, state_),
  PROTOBUF_FIELD_OFFSET(::StateChange, change_),
  PROTOBUF_FIELD_OFFSET(::StateChange, timestamp_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_NewCommand, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_ChangeStage, new_stage_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_SetBallPlacementPos, pos_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_AddYellowCard, caused_by_game_event_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_AddRedCard, caused_by_game_event_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_YellowCardOver, for_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AddGameEvent, game_event_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AddPassiveGameEvent, game_event_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AddProposal, proposal_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, group_id_),
  PROTOBUF_FIELD_OFFSET(::Change_AcceptProposalGroup, accepted_by_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, division_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, first_kickoff_team_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, match_type_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateConfig, max_robots_per_team_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, for_team_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, team_name_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, goals_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, goalkeeper_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, timeouts_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, timeout_time_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, on_positive_half_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, ball_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, can_place_ball_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, challenge_flags_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, bot_substitutions_left_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, requests_bot_substitution_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, requests_timeout_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, requests_challenge_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, requests_emergency_stop_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, yellow_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, red_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, foul_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, remove_yellow_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, remove_red_card_),
  PROTOBUF_FIELD_OFFSET(::Change_UpdateTeamState, remove_foul_),
  20,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  18,
  19,
  8,
  14,
  15,
  16,
  17,
  9,
  10,
  11,
  12,
  13,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Change_SwitchColors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_Revert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_Revert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_Revert, change_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_NewGameState, game_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change_SetStatusMessage, status_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::Change, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Change, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Change, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Change, origin_),
  PROTOBUF_FIELD_OFFSET(::Change, revertible_),
  offsetof(::ChangeDefaultTypeInternal, new_command_change_),
  offsetof(::ChangeDefaultTypeInternal, change_stage_change_),
  offsetof(::ChangeDefaultTypeInternal, set_ball_placement_pos_change_),
  offsetof(::ChangeDefaultTypeInternal, add_yellow_card_change_),
  offsetof(::ChangeDefaultTypeInternal, add_red_card_change_),
  offsetof(::ChangeDefaultTypeInternal, yellow_card_over_change_),
  offsetof(::ChangeDefaultTypeInternal, add_game_event_change_),
  offsetof(::ChangeDefaultTypeInternal, add_passive_game_event_change_),
  offsetof(::ChangeDefaultTypeInternal, add_proposal_change_),
  offsetof(::ChangeDefaultTypeInternal, update_config_change_),
  offsetof(::ChangeDefaultTypeInternal, update_team_state_change_),
  offsetof(::ChangeDefaultTypeInternal, switch_colors_change_),
  offsetof(::ChangeDefaultTypeInternal, revert_change_),
  offsetof(::ChangeDefaultTypeInternal, new_game_state_change_),
  offsetof(::ChangeDefaultTypeInternal, accept_proposal_group_change_),
  offsetof(::ChangeDefaultTypeInternal, set_status_message_change_),
  PROTOBUF_FIELD_OFFSET(::Change, change_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::StateChange)},
  { 15, 21, sizeof(::Change_NewCommand)},
  { 22, 28, sizeof(::Change_ChangeStage)},
  { 29, 35, sizeof(::Change_SetBallPlacementPos)},
  { 36, 43, sizeof(::Change_AddYellowCard)},
  { 45, 52, sizeof(::Change_AddRedCard)},
  { 54, 60, sizeof(::Change_YellowCardOver)},
  { 61, 67, sizeof(::Change_AddGameEvent)},
  { 68, 74, sizeof(::Change_AddPassiveGameEvent)},
  { 75, 81, sizeof(::Change_AddProposal)},
  { 82, 89, sizeof(::Change_AcceptProposalGroup)},
  { 91, 100, sizeof(::Change_UpdateConfig)},
  { 104, 130, sizeof(::Change_UpdateTeamState)},
  { 151, -1, sizeof(::Change_SwitchColors)},
  { 156, 162, sizeof(::Change_Revert)},
  { 163, 169, sizeof(::Change_NewGameState)},
  { 170, 176, sizeof(::Change_SetStatusMessage)},
  { 177, 201, sizeof(::Change)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StateChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_NewCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_ChangeStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_SetBallPlacementPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AddYellowCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AddRedCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_YellowCardOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AddGameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AddPassiveGameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AddProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_AcceptProposalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_UpdateConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_UpdateTeamState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_SwitchColors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_Revert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_NewGameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_SetStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Change_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ssl_gc_change.proto\032\022ssl_gc_state.prot"
  "o\032\023ssl_gc_common.proto\032\025ssl_gc_geometry."
  "proto\032\027ssl_gc_game_event.proto\032\034ssl_gc_r"
  "eferee_message.proto\032\037google/protobuf/ti"
  "mestamp.proto\032\036google/protobuf/wrappers."
  "proto\"\223\001\n\013StateChange\022\n\n\002id\030\001 \001(\005\022\031\n\tsta"
  "te_pre\030\002 \001(\0132\006.State\022\025\n\005state\030\003 \001(\0132\006.St"
  "ate\022\027\n\006change\030\004 \001(\0132\007.Change\022-\n\ttimestam"
  "p\030\005 \001(\0132\032.google.protobuf.Timestamp\"\324\026\n\006"
  "Change\022\016\n\006origin\030\001 \001(\t\022\022\n\nrevertible\030\020 \001"
  "(\010\0220\n\022new_command_change\030\002 \001(\0132\022.Change."
  "NewCommandH\000\0222\n\023change_stage_change\030\003 \001("
  "\0132\023.Change.ChangeStageH\000\022D\n\035set_ball_pla"
  "cement_pos_change\030\004 \001(\0132\033.Change.SetBall"
  "PlacementPosH\000\0227\n\026add_yellow_card_change"
  "\030\005 \001(\0132\025.Change.AddYellowCardH\000\0221\n\023add_r"
  "ed_card_change\030\006 \001(\0132\022.Change.AddRedCard"
  "H\000\0229\n\027yellow_card_over_change\030\007 \001(\0132\026.Ch"
  "ange.YellowCardOverH\000\0225\n\025add_game_event_"
  "change\030\010 \001(\0132\024.Change.AddGameEventH\000\022D\n\035"
  "add_passive_game_event_change\030\023 \001(\0132\033.Ch"
  "ange.AddPassiveGameEventH\000\0222\n\023add_propos"
  "al_change\030\t \001(\0132\023.Change.AddProposalH\000\0224"
  "\n\024update_config_change\030\014 \001(\0132\024.Change.Up"
  "dateConfigH\000\022;\n\030update_team_state_change"
  "\030\r \001(\0132\027.Change.UpdateTeamStateH\000\0224\n\024swi"
  "tch_colors_change\030\016 \001(\0132\024.Change.SwitchC"
  "olorsH\000\022\'\n\rrevert_change\030\017 \001(\0132\016.Change."
  "RevertH\000\0225\n\025new_game_state_change\030\021 \001(\0132"
  "\024.Change.NewGameStateH\000\022C\n\034accept_propos"
  "al_group_change\030\022 \001(\0132\033.Change.AcceptPro"
  "posalGroupH\000\022=\n\031set_status_message_chang"
  "e\030\024 \001(\0132\030.Change.SetStatusMessageH\000\032\'\n\nN"
  "ewCommand\022\031\n\007command\030\001 \001(\0132\010.Command\0320\n\013"
  "ChangeStage\022!\n\tnew_stage\030\001 \001(\0162\016.Referee"
  ".Stage\032,\n\023SetBallPlacementPos\022\025\n\003pos\030\001 \001"
  "(\0132\010.Vector2\032R\n\rAddYellowCard\022\027\n\010for_tea"
  "m\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_event\030\002"
  " \001(\0132\n.GameEvent\032O\n\nAddRedCard\022\027\n\010for_te"
  "am\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_event\030"
  "\002 \001(\0132\n.GameEvent\032)\n\016YellowCardOver\022\027\n\010f"
  "or_team\030\001 \001(\0162\005.Team\032.\n\014AddGameEvent\022\036\n\n"
  "game_event\030\001 \001(\0132\n.GameEvent\0325\n\023AddPassi"
  "veGameEvent\022\036\n\ngame_event\030\001 \001(\0132\n.GameEv"
  "ent\032*\n\013AddProposal\022\033\n\010proposal\030\001 \001(\0132\t.P"
  "roposal\032<\n\023AcceptProposalGroup\022\020\n\010group_"
  "id\030\003 \001(\t\022\023\n\013accepted_by\030\002 \001(\t\032\256\001\n\014Update"
  "Config\022\033\n\010division\030\001 \001(\0162\t.Division\022!\n\022f"
  "irst_kickoff_team\030\002 \001(\0162\005.Team\022\036\n\nmatch_"
  "type\030\004 \001(\0162\n.MatchType\0228\n\023max_robots_per"
  "_team\030\005 \001(\0132\033.google.protobuf.Int32Value"
  "J\004\010\003\020\004\032\246\010\n\017UpdateTeamState\022\027\n\010for_team\030\001"
  " \001(\0162\005.Team\022/\n\tteam_name\030\002 \001(\0132\034.google."
  "protobuf.StringValue\022*\n\005goals\030\003 \001(\0132\033.go"
  "ogle.protobuf.Int32Value\022/\n\ngoalkeeper\030\004"
  " \001(\0132\033.google.protobuf.Int32Value\0222\n\rtim"
  "eouts_left\030\005 \001(\0132\033.google.protobuf.Int32"
  "Value\0227\n\021timeout_time_left\030\006 \001(\0132\034.googl"
  "e.protobuf.StringValue\0224\n\020on_positive_ha"
  "lf\030\007 \001(\0132\032.google.protobuf.BoolValue\022<\n\027"
  "ball_placement_failures\030\010 \001(\0132\033.google.p"
  "rotobuf.Int32Value\0222\n\016can_place_ball\030\t \001"
  "(\0132\032.google.protobuf.BoolValue\0229\n\024challe"
  "nge_flags_left\030\025 \001(\0132\033.google.protobuf.I"
  "nt32Value\022;\n\026bot_substitutions_left\030\026 \001("
  "\0132\033.google.protobuf.Int32Value\022=\n\031reques"
  "ts_bot_substitution\030\n \001(\0132\032.google.proto"
  "buf.BoolValue\0224\n\020requests_timeout\030\021 \001(\0132"
  "\032.google.protobuf.BoolValue\0226\n\022requests_"
  "challenge\030\022 \001(\0132\032.google.protobuf.BoolVa"
  "lue\022;\n\027requests_emergency_stop\030\023 \001(\0132\032.g"
  "oogle.protobuf.BoolValue\022 \n\013yellow_card\030"
  "\024 \001(\0132\013.YellowCard\022\032\n\010red_card\030\014 \001(\0132\010.R"
  "edCard\022\023\n\004foul\030\r \001(\0132\005.Foul\0228\n\022remove_ye"
  "llow_card\030\016 \001(\0132\034.google.protobuf.UInt32"
  "Value\0225\n\017remove_red_card\030\017 \001(\0132\034.google."
  "protobuf.UInt32Value\0221\n\013remove_foul\030\020 \001("
  "\0132\034.google.protobuf.UInt32Value\032\016\n\014Switc"
  "hColors\032\033\n\006Revert\022\021\n\tchange_id\030\001 \001(\005\032.\n\014"
  "NewGameState\022\036\n\ngame_state\030\001 \001(\0132\n.GameS"
  "tate\032*\n\020SetStatusMessage\022\026\n\016status_messa"
  "ge\030\001 \001(\tB\010\n\006changeBFZDgithub.com/RoboCup"
  "-SSL/ssl-game-controller/internal/app/st"
  "atemachine"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fchange_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
  &::descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
  &::descriptor_table_ssl_5fgc_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fchange_2eproto_sccs[18] = {
  &scc_info_Change_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_Revert_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto.base,
  &scc_info_StateChange_ssl_5fgc_5fchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fchange_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fchange_2eproto, "ssl_gc_change.proto", 3330,
  &descriptor_table_ssl_5fgc_5fchange_2eproto_once, descriptor_table_ssl_5fgc_5fchange_2eproto_sccs, descriptor_table_ssl_5fgc_5fchange_2eproto_deps, 18, 7,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fchange_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fchange_2eproto, 18, file_level_enum_descriptors_ssl_5fgc_5fchange_2eproto, file_level_service_descriptors_ssl_5fgc_5fchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fchange_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fchange_2eproto)), true);

// ===================================================================

void StateChange::InitAsDefaultInstance() {
  ::_StateChange_default_instance_._instance.get_mutable()->state_pre_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->state_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->change_ = const_cast< ::Change*>(
      ::Change::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class StateChange::_Internal {
 public:
  using HasBits = decltype(std::declval<StateChange>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::State& state_pre(const StateChange* msg);
  static void set_has_state_pre(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::State& state(const StateChange* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Change& change(const StateChange* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const StateChange* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::State&
StateChange::_Internal::state_pre(const StateChange* msg) {
  return *msg->state_pre_;
}
const ::State&
StateChange::_Internal::state(const StateChange* msg) {
  return *msg->state_;
}
const ::Change&
StateChange::_Internal::change(const StateChange* msg) {
  return *msg->change_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StateChange::_Internal::timestamp(const StateChange* msg) {
  return *msg->timestamp_;
}
void StateChange::clear_state_pre() {
  if (state_pre_ != nullptr) state_pre_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StateChange::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StateChange::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StateChange::StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state_pre()) {
    state_pre_ = new ::State(*from.state_pre_);
  } else {
    state_pre_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_change()) {
    change_ = new ::Change(*from.change_);
  } else {
    change_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:StateChange)
}

void StateChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateChange_ssl_5fgc_5fchange_2eproto.base);
  ::memset(&state_pre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&state_pre_)) + sizeof(id_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:StateChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_pre_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete timestamp_;
}

void StateChange::ArenaDtor(void* object) {
  StateChange* _this = reinterpret_cast< StateChange* >(object);
  (void)_this;
}
void StateChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChange& StateChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateChange_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:StateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_pre_ != nullptr);
      state_pre_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .State state_pre = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_pre(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Change change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state_pre(this), target, stream);
  }

  // optional .State state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // optional .Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::change(this), target, stream);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StateChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .State state_pre = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_pre_);
    }

    // optional .State state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .Change change = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_);
    }

    // optional .google.protobuf.Timestamp timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateChange)
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state_pre()->::State::MergeFrom(from._internal_state_pre());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::State::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_change()->::Change::MergeFrom(from._internal_change());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  if (_internal_has_state_pre()) {
    if (!state_pre_->IsInitialized()) return false;
  }
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  return true;
}

void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChange, id_)
      + sizeof(StateChange::id_)
      - PROTOBUF_FIELD_OFFSET(StateChange, state_pre_)>(
          reinterpret_cast<char*>(&state_pre_),
          reinterpret_cast<char*>(&other->state_pre_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_NewCommand::InitAsDefaultInstance() {
  ::_Change_NewCommand_default_instance_._instance.get_mutable()->command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
}
class Change_NewCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_NewCommand>()._has_bits_);
  static const ::Command& command(const Change_NewCommand* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Command&
Change_NewCommand::_Internal::command(const Change_NewCommand* msg) {
  return *msg->command_;
}
void Change_NewCommand::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_NewCommand::Change_NewCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.NewCommand)
}
Change_NewCommand::Change_NewCommand(const Change_NewCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewCommand)
}

void Change_NewCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto.base);
  command_ = nullptr;
}

Change_NewCommand::~Change_NewCommand() {
  // @@protoc_insertion_point(destructor:Change.NewCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_NewCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete command_;
}

void Change_NewCommand::ArenaDtor(void* object) {
  Change_NewCommand* _this = reinterpret_cast< Change_NewCommand* >(object);
  (void)_this;
}
void Change_NewCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_NewCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_NewCommand& Change_NewCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_NewCommand_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_NewCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_ != nullptr);
    command_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_NewCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_NewCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewCommand)
  return target;
}

size_t Change_NewCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Command command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_NewCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_NewCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_NewCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.NewCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.NewCommand)
    MergeFrom(*source);
  }
}

void Change_NewCommand::MergeFrom(const Change_NewCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_mutable_command()->::Command::MergeFrom(from._internal_command());
  }
}

void Change_NewCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_NewCommand::CopyFrom(const Change_NewCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewCommand::IsInitialized() const {
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewCommand::InternalSwap(Change_NewCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_NewCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_ChangeStage::InitAsDefaultInstance() {
}
class Change_ChangeStage::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_ChangeStage>()._has_bits_);
  static void set_has_new_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_ChangeStage::Change_ChangeStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.ChangeStage)
}
Change_ChangeStage::Change_ChangeStage(const Change_ChangeStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_stage_ = from.new_stage_;
  // @@protoc_insertion_point(copy_constructor:Change.ChangeStage)
}

void Change_ChangeStage::SharedCtor() {
  new_stage_ = 0;
}

Change_ChangeStage::~Change_ChangeStage() {
  // @@protoc_insertion_point(destructor:Change.ChangeStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_ChangeStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Change_ChangeStage::ArenaDtor(void* object) {
  Change_ChangeStage* _this = reinterpret_cast< Change_ChangeStage* >(object);
  (void)_this;
}
void Change_ChangeStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_ChangeStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_ChangeStage& Change_ChangeStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_ChangeStage_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_ChangeStage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.ChangeStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_stage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_ChangeStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Referee.Stage new_stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Stage_IsValid(val))) {
            _internal_set_new_stage(static_cast<::Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_ChangeStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.ChangeStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_new_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.ChangeStage)
  return target;
}

size_t Change_ChangeStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.ChangeStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Referee.Stage new_stage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_ChangeStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_ChangeStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_ChangeStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.ChangeStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.ChangeStage)
    MergeFrom(*source);
  }
}

void Change_ChangeStage::MergeFrom(const Change_ChangeStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_stage()) {
    _internal_set_new_stage(from._internal_new_stage());
  }
}

void Change_ChangeStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_ChangeStage::CopyFrom(const Change_ChangeStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_ChangeStage::IsInitialized() const {
  return true;
}

void Change_ChangeStage::InternalSwap(Change_ChangeStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_stage_, other->new_stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_ChangeStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_SetBallPlacementPos::InitAsDefaultInstance() {
  ::_Change_SetBallPlacementPos_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class Change_SetBallPlacementPos::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_SetBallPlacementPos>()._has_bits_);
  static const ::Vector2& pos(const Change_SetBallPlacementPos* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Vector2&
Change_SetBallPlacementPos::_Internal::pos(const Change_SetBallPlacementPos* msg) {
  return *msg->pos_;
}
void Change_SetBallPlacementPos::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_SetBallPlacementPos::Change_SetBallPlacementPos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.SetBallPlacementPos)
}
Change_SetBallPlacementPos::Change_SetBallPlacementPos(const Change_SetBallPlacementPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetBallPlacementPos)
}

void Change_SetBallPlacementPos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto.base);
  pos_ = nullptr;
}

Change_SetBallPlacementPos::~Change_SetBallPlacementPos() {
  // @@protoc_insertion_point(destructor:Change.SetBallPlacementPos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_SetBallPlacementPos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void Change_SetBallPlacementPos::ArenaDtor(void* object) {
  Change_SetBallPlacementPos* _this = reinterpret_cast< Change_SetBallPlacementPos* >(object);
  (void)_this;
}
void Change_SetBallPlacementPos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_SetBallPlacementPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_SetBallPlacementPos& Change_SetBallPlacementPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_SetBallPlacementPos_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_SetBallPlacementPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetBallPlacementPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_SetBallPlacementPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Vector2 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_SetBallPlacementPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetBallPlacementPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetBallPlacementPos)
  return target;
}

size_t Change_SetBallPlacementPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetBallPlacementPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 pos = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SetBallPlacementPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SetBallPlacementPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_SetBallPlacementPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SetBallPlacementPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SetBallPlacementPos)
    MergeFrom(*source);
  }
}

void Change_SetBallPlacementPos::MergeFrom(const Change_SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Vector2::MergeFrom(from._internal_pos());
  }
}

void Change_SetBallPlacementPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SetBallPlacementPos::CopyFrom(const Change_SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetBallPlacementPos::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Change_SetBallPlacementPos::InternalSwap(Change_SetBallPlacementPos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_SetBallPlacementPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AddYellowCard::InitAsDefaultInstance() {
  ::_Change_AddYellowCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class Change_AddYellowCard::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddYellowCard>()._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent& caused_by_game_event(const Change_AddYellowCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddYellowCard::_Internal::caused_by_game_event(const Change_AddYellowCard* msg) {
  return *msg->caused_by_game_event_;
}
void Change_AddYellowCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != nullptr) caused_by_game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_AddYellowCard::Change_AddYellowCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AddYellowCard)
}
Change_AddYellowCard::Change_AddYellowCard(const Change_AddYellowCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = nullptr;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddYellowCard)
}

void Change_AddYellowCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto.base);
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

Change_AddYellowCard::~Change_AddYellowCard() {
  // @@protoc_insertion_point(destructor:Change.AddYellowCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AddYellowCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void Change_AddYellowCard::ArenaDtor(void* object) {
  Change_AddYellowCard* _this = reinterpret_cast< Change_AddYellowCard* >(object);
  (void)_this;
}
void Change_AddYellowCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AddYellowCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AddYellowCard& Change_AddYellowCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AddYellowCard_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AddYellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddYellowCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != nullptr);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddYellowCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AddYellowCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddYellowCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caused_by_game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddYellowCard)
  return target;
}

size_t Change_AddYellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddYellowCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddYellowCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddYellowCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AddYellowCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddYellowCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddYellowCard)
    MergeFrom(*source);
  }
}

void Change_AddYellowCard::MergeFrom(const Change_AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_AddYellowCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddYellowCard::CopyFrom(const Change_AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddYellowCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddYellowCard::InternalSwap(Change_AddYellowCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_AddYellowCard, for_team_)
      + sizeof(Change_AddYellowCard::for_team_)
      - PROTOBUF_FIELD_OFFSET(Change_AddYellowCard, caused_by_game_event_)>(
          reinterpret_cast<char*>(&caused_by_game_event_),
          reinterpret_cast<char*>(&other->caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddYellowCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AddRedCard::InitAsDefaultInstance() {
  ::_Change_AddRedCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class Change_AddRedCard::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddRedCard>()._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent& caused_by_game_event(const Change_AddRedCard* msg);
  static void set_has_caused_by_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddRedCard::_Internal::caused_by_game_event(const Change_AddRedCard* msg) {
  return *msg->caused_by_game_event_;
}
void Change_AddRedCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != nullptr) caused_by_game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_AddRedCard::Change_AddRedCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AddRedCard)
}
Change_AddRedCard::Change_AddRedCard(const Change_AddRedCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = nullptr;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddRedCard)
}

void Change_AddRedCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto.base);
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

Change_AddRedCard::~Change_AddRedCard() {
  // @@protoc_insertion_point(destructor:Change.AddRedCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AddRedCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void Change_AddRedCard::ArenaDtor(void* object) {
  Change_AddRedCard* _this = reinterpret_cast< Change_AddRedCard* >(object);
  (void)_this;
}
void Change_AddRedCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AddRedCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AddRedCard& Change_AddRedCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AddRedCard_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AddRedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddRedCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != nullptr);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddRedCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .GameEvent caused_by_game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caused_by_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AddRedCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddRedCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caused_by_game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddRedCard)
  return target;
}

size_t Change_AddRedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddRedCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddRedCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddRedCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AddRedCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddRedCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddRedCard)
    MergeFrom(*source);
  }
}

void Change_AddRedCard::MergeFrom(const Change_AddRedCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caused_by_game_event()->::GameEvent::MergeFrom(from._internal_caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_AddRedCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddRedCard::CopyFrom(const Change_AddRedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddRedCard::IsInitialized() const {
  if (_internal_has_caused_by_game_event()) {
    if (!caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddRedCard::InternalSwap(Change_AddRedCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_AddRedCard, for_team_)
      + sizeof(Change_AddRedCard::for_team_)
      - PROTOBUF_FIELD_OFFSET(Change_AddRedCard, caused_by_game_event_)>(
          reinterpret_cast<char*>(&caused_by_game_event_),
          reinterpret_cast<char*>(&other->caused_by_game_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddRedCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_YellowCardOver::InitAsDefaultInstance() {
}
class Change_YellowCardOver::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_YellowCardOver>()._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_YellowCardOver::Change_YellowCardOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.YellowCardOver)
}
Change_YellowCardOver::Change_YellowCardOver(const Change_YellowCardOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.YellowCardOver)
}

void Change_YellowCardOver::SharedCtor() {
  for_team_ = 0;
}

Change_YellowCardOver::~Change_YellowCardOver() {
  // @@protoc_insertion_point(destructor:Change.YellowCardOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_YellowCardOver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Change_YellowCardOver::ArenaDtor(void* object) {
  Change_YellowCardOver* _this = reinterpret_cast< Change_YellowCardOver* >(object);
  (void)_this;
}
void Change_YellowCardOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_YellowCardOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_YellowCardOver& Change_YellowCardOver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_YellowCardOver_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_YellowCardOver::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.YellowCardOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_YellowCardOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_YellowCardOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.YellowCardOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.YellowCardOver)
  return target;
}

size_t Change_YellowCardOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.YellowCardOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Team for_team = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_YellowCardOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_YellowCardOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_YellowCardOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.YellowCardOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.YellowCardOver)
    MergeFrom(*source);
  }
}

void Change_YellowCardOver::MergeFrom(const Change_YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_for_team()) {
    _internal_set_for_team(from._internal_for_team());
  }
}

void Change_YellowCardOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_YellowCardOver::CopyFrom(const Change_YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_YellowCardOver::IsInitialized() const {
  return true;
}

void Change_YellowCardOver::InternalSwap(Change_YellowCardOver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(for_team_, other->for_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_YellowCardOver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AddGameEvent::InitAsDefaultInstance() {
  ::_Change_AddGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class Change_AddGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddGameEvent>()._has_bits_);
  static const ::GameEvent& game_event(const Change_AddGameEvent* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddGameEvent::_Internal::game_event(const Change_AddGameEvent* msg) {
  return *msg->game_event_;
}
void Change_AddGameEvent::clear_game_event() {
  if (game_event_ != nullptr) game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_AddGameEvent::Change_AddGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AddGameEvent)
}
Change_AddGameEvent::Change_AddGameEvent(const Change_AddGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddGameEvent)
}

void Change_AddGameEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto.base);
  game_event_ = nullptr;
}

Change_AddGameEvent::~Change_AddGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddGameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AddGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_event_;
}

void Change_AddGameEvent::ArenaDtor(void* object) {
  Change_AddGameEvent* _this = reinterpret_cast< Change_AddGameEvent* >(object);
  (void)_this;
}
void Change_AddGameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AddGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AddGameEvent& Change_AddGameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AddGameEvent_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AddGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != nullptr);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddGameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GameEvent game_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AddGameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddGameEvent)
  return target;
}

size_t Change_AddGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddGameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameEvent game_event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddGameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddGameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AddGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddGameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddGameEvent)
    MergeFrom(*source);
  }
}

void Change_AddGameEvent::MergeFrom(const Change_AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_event()) {
    _internal_mutable_game_event()->::GameEvent::MergeFrom(from._internal_game_event());
  }
}

void Change_AddGameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddGameEvent::CopyFrom(const Change_AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddGameEvent::IsInitialized() const {
  if (_internal_has_game_event()) {
    if (!game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddGameEvent::InternalSwap(Change_AddGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_event_, other->game_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddGameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AddPassiveGameEvent::InitAsDefaultInstance() {
  ::_Change_AddPassiveGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
class Change_AddPassiveGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddPassiveGameEvent>()._has_bits_);
  static const ::GameEvent& game_event(const Change_AddPassiveGameEvent* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameEvent&
Change_AddPassiveGameEvent::_Internal::game_event(const Change_AddPassiveGameEvent* msg) {
  return *msg->game_event_;
}
void Change_AddPassiveGameEvent::clear_game_event() {
  if (game_event_ != nullptr) game_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AddPassiveGameEvent)
}
Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(const Change_AddPassiveGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddPassiveGameEvent)
}

void Change_AddPassiveGameEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto.base);
  game_event_ = nullptr;
}

Change_AddPassiveGameEvent::~Change_AddPassiveGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddPassiveGameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AddPassiveGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_event_;
}

void Change_AddPassiveGameEvent::ArenaDtor(void* object) {
  Change_AddPassiveGameEvent* _this = reinterpret_cast< Change_AddPassiveGameEvent* >(object);
  (void)_this;
}
void Change_AddPassiveGameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AddPassiveGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AddPassiveGameEvent& Change_AddPassiveGameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AddPassiveGameEvent_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AddPassiveGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddPassiveGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != nullptr);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddPassiveGameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GameEvent game_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AddPassiveGameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddPassiveGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddPassiveGameEvent)
  return target;
}

size_t Change_AddPassiveGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddPassiveGameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameEvent game_event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddPassiveGameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddPassiveGameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AddPassiveGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddPassiveGameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddPassiveGameEvent)
    MergeFrom(*source);
  }
}

void Change_AddPassiveGameEvent::MergeFrom(const Change_AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_event()) {
    _internal_mutable_game_event()->::GameEvent::MergeFrom(from._internal_game_event());
  }
}

void Change_AddPassiveGameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddPassiveGameEvent::CopyFrom(const Change_AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddPassiveGameEvent::IsInitialized() const {
  if (_internal_has_game_event()) {
    if (!game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddPassiveGameEvent::InternalSwap(Change_AddPassiveGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_event_, other->game_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddPassiveGameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AddProposal::InitAsDefaultInstance() {
  ::_Change_AddProposal_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::Proposal*>(
      ::Proposal::internal_default_instance());
}
class Change_AddProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AddProposal>()._has_bits_);
  static const ::Proposal& proposal(const Change_AddProposal* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Proposal&
Change_AddProposal::_Internal::proposal(const Change_AddProposal* msg) {
  return *msg->proposal_;
}
void Change_AddProposal::clear_proposal() {
  if (proposal_ != nullptr) proposal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_AddProposal::Change_AddProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AddProposal)
}
Change_AddProposal::Change_AddProposal(const Change_AddProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddProposal)
}

void Change_AddProposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto.base);
  proposal_ = nullptr;
}

Change_AddProposal::~Change_AddProposal() {
  // @@protoc_insertion_point(destructor:Change.AddProposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AddProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void Change_AddProposal::ArenaDtor(void* object) {
  Change_AddProposal* _this = reinterpret_cast< Change_AddProposal* >(object);
  (void)_this;
}
void Change_AddProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AddProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AddProposal& Change_AddProposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AddProposal_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AddProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proposal_ != nullptr);
    proposal_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AddProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proposal proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AddProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddProposal)
  return target;
}

size_t Change_AddProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddProposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Proposal proposal = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddProposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddProposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AddProposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddProposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddProposal)
    MergeFrom(*source);
  }
}

void Change_AddProposal::MergeFrom(const Change_AddProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::Proposal::MergeFrom(from._internal_proposal());
  }
}

void Change_AddProposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddProposal::CopyFrom(const Change_AddProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddProposal::IsInitialized() const {
  if (_internal_has_proposal()) {
    if (!proposal_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddProposal::InternalSwap(Change_AddProposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AddProposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_AcceptProposalGroup::InitAsDefaultInstance() {
}
class Change_AcceptProposalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_AcceptProposalGroup>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accepted_by(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_AcceptProposalGroup::Change_AcceptProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.AcceptProposalGroup)
}
Change_AcceptProposalGroup::Change_AcceptProposalGroup(const Change_AcceptProposalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accepted_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accepted_by()) {
    accepted_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accepted_by(),
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group_id()) {
    group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Change.AcceptProposalGroup)
}

void Change_AcceptProposalGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto.base);
  accepted_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Change_AcceptProposalGroup::~Change_AcceptProposalGroup() {
  // @@protoc_insertion_point(destructor:Change.AcceptProposalGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_AcceptProposalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accepted_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Change_AcceptProposalGroup::ArenaDtor(void* object) {
  Change_AcceptProposalGroup* _this = reinterpret_cast< Change_AcceptProposalGroup* >(object);
  (void)_this;
}
void Change_AcceptProposalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_AcceptProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_AcceptProposalGroup& Change_AcceptProposalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_AcceptProposalGroup_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_AcceptProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AcceptProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accepted_by_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_AcceptProposalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string accepted_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accepted_by();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Change.AcceptProposalGroup.accepted_by");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Change.AcceptProposalGroup.group_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_AcceptProposalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.AcceptProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accepted_by().data(), static_cast<int>(this->_internal_accepted_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.accepted_by");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accepted_by(), target);
  }

  // optional string group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.group_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AcceptProposalGroup)
  return target;
}

size_t Change_AcceptProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AcceptProposalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accepted_by = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accepted_by());
    }

    // optional string group_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AcceptProposalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AcceptProposalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_AcceptProposalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AcceptProposalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AcceptProposalGroup)
    MergeFrom(*source);
  }
}

void Change_AcceptProposalGroup::MergeFrom(const Change_AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_accepted_by(from._internal_accepted_by());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group_id(from._internal_group_id());
    }
  }
}

void Change_AcceptProposalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AcceptProposalGroup::CopyFrom(const Change_AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AcceptProposalGroup::IsInitialized() const {
  return true;
}

void Change_AcceptProposalGroup::InternalSwap(Change_AcceptProposalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accepted_by_.Swap(&other->accepted_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_AcceptProposalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_UpdateConfig::InitAsDefaultInstance() {
  ::_Change_UpdateConfig_default_instance_._instance.get_mutable()->max_robots_per_team_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
}
class Change_UpdateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_UpdateConfig>()._has_bits_);
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_kickoff_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& max_robots_per_team(const Change_UpdateConfig* msg);
  static void set_has_max_robots_per_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateConfig::_Internal::max_robots_per_team(const Change_UpdateConfig* msg) {
  return *msg->max_robots_per_team_;
}
void Change_UpdateConfig::clear_max_robots_per_team() {
  if (max_robots_per_team_ != nullptr) max_robots_per_team_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_UpdateConfig::Change_UpdateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.UpdateConfig)
}
Change_UpdateConfig::Change_UpdateConfig(const Change_UpdateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_robots_per_team()) {
    max_robots_per_team_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.max_robots_per_team_);
  } else {
    max_robots_per_team_ = nullptr;
  }
  ::memcpy(&division_, &from.division_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&division_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:Change.UpdateConfig)
}

void Change_UpdateConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto.base);
  ::memset(&max_robots_per_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&max_robots_per_team_)) + sizeof(match_type_));
}

Change_UpdateConfig::~Change_UpdateConfig() {
  // @@protoc_insertion_point(destructor:Change.UpdateConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_UpdateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete max_robots_per_team_;
}

void Change_UpdateConfig::ArenaDtor(void* object) {
  Change_UpdateConfig* _this = reinterpret_cast< Change_UpdateConfig* >(object);
  (void)_this;
}
void Change_UpdateConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_UpdateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_UpdateConfig& Change_UpdateConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_UpdateConfig_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_UpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(max_robots_per_team_ != nullptr);
    max_robots_per_team_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_type_) -
        reinterpret_cast<char*>(&division_)) + sizeof(match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_UpdateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Division division = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Division_IsValid(val))) {
            _internal_set_division(static_cast<::Division>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Team first_kickoff_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_first_kickoff_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value max_robots_per_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_robots_per_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_UpdateConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Division division = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_division(), target);
  }

  // optional .Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_first_kickoff_team(), target);
  }

  // optional .MatchType match_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  // optional .google.protobuf.Int32Value max_robots_per_team = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::max_robots_per_team(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateConfig)
  return target;
}

size_t Change_UpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Int32Value max_robots_per_team = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_robots_per_team_);
    }

    // optional .Division division = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_division());
    }

    // optional .Team first_kickoff_team = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_first_kickoff_team());
    }

    // optional .MatchType match_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_UpdateConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_UpdateConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_UpdateConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.UpdateConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.UpdateConfig)
    MergeFrom(*source);
  }
}

void Change_UpdateConfig::MergeFrom(const Change_UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_max_robots_per_team()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_max_robots_per_team());
    }
    if (cached_has_bits & 0x00000002u) {
      division_ = from.division_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_kickoff_team_ = from.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_UpdateConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_UpdateConfig::CopyFrom(const Change_UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateConfig::IsInitialized() const {
  return true;
}

void Change_UpdateConfig::InternalSwap(Change_UpdateConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_UpdateConfig, match_type_)
      + sizeof(Change_UpdateConfig::match_type_)
      - PROTOBUF_FIELD_OFFSET(Change_UpdateConfig, max_robots_per_team_)>(
          reinterpret_cast<char*>(&max_robots_per_team_),
          reinterpret_cast<char*>(&other->max_robots_per_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_UpdateConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_UpdateTeamState::InitAsDefaultInstance() {
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->team_name_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->goals_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->goalkeeper_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->timeouts_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->timeout_time_left_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->on_positive_half_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->ball_placement_failures_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->can_place_ball_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->challenge_flags_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->bot_substitutions_left_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_bot_substitution_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_challenge_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_emergency_stop_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->yellow_card_ = const_cast< ::YellowCard*>(
      ::YellowCard::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->red_card_ = const_cast< ::RedCard*>(
      ::RedCard::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->foul_ = const_cast< ::Foul*>(
      ::Foul::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_yellow_card_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_red_card_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_foul_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
}
class Change_UpdateTeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_UpdateTeamState>()._has_bits_);
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const PROTOBUF_NAMESPACE_ID::StringValue& team_name(const Change_UpdateTeamState* msg);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& goals(const Change_UpdateTeamState* msg);
  static void set_has_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& goalkeeper(const Change_UpdateTeamState* msg);
  static void set_has_goalkeeper(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& timeouts_left(const Change_UpdateTeamState* msg);
  static void set_has_timeouts_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::StringValue& timeout_time_left(const Change_UpdateTeamState* msg);
  static void set_has_timeout_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& on_positive_half(const Change_UpdateTeamState* msg);
  static void set_has_on_positive_half(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& ball_placement_failures(const Change_UpdateTeamState* msg);
  static void set_has_ball_placement_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& can_place_ball(const Change_UpdateTeamState* msg);
  static void set_has_can_place_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& challenge_flags_left(const Change_UpdateTeamState* msg);
  static void set_has_challenge_flags_left(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const PROTOBUF_NAMESPACE_ID::Int32Value& bot_substitutions_left(const Change_UpdateTeamState* msg);
  static void set_has_bot_substitutions_left(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& requests_bot_substitution(const Change_UpdateTeamState* msg);
  static void set_has_requests_bot_substitution(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& requests_timeout(const Change_UpdateTeamState* msg);
  static void set_has_requests_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& requests_challenge(const Change_UpdateTeamState* msg);
  static void set_has_requests_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const PROTOBUF_NAMESPACE_ID::BoolValue& requests_emergency_stop(const Change_UpdateTeamState* msg);
  static void set_has_requests_emergency_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::YellowCard& yellow_card(const Change_UpdateTeamState* msg);
  static void set_has_yellow_card(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::RedCard& red_card(const Change_UpdateTeamState* msg);
  static void set_has_red_card(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Foul& foul(const Change_UpdateTeamState* msg);
  static void set_has_foul(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& remove_yellow_card(const Change_UpdateTeamState* msg);
  static void set_has_remove_yellow_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& remove_red_card(const Change_UpdateTeamState* msg);
  static void set_has_remove_red_card(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& remove_foul(const Change_UpdateTeamState* msg);
  static void set_has_remove_foul(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const PROTOBUF_NAMESPACE_ID::StringValue&
Change_UpdateTeamState::_Internal::team_name(const Change_UpdateTeamState* msg) {
  return *msg->team_name_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::goals(const Change_UpdateTeamState* msg) {
  return *msg->goals_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::goalkeeper(const Change_UpdateTeamState* msg) {
  return *msg->goalkeeper_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::timeouts_left(const Change_UpdateTeamState* msg) {
  return *msg->timeouts_left_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
Change_UpdateTeamState::_Internal::timeout_time_left(const Change_UpdateTeamState* msg) {
  return *msg->timeout_time_left_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::on_positive_half(const Change_UpdateTeamState* msg) {
  return *msg->on_positive_half_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::ball_placement_failures(const Change_UpdateTeamState* msg) {
  return *msg->ball_placement_failures_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::can_place_ball(const Change_UpdateTeamState* msg) {
  return *msg->can_place_ball_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::challenge_flags_left(const Change_UpdateTeamState* msg) {
  return *msg->challenge_flags_left_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Change_UpdateTeamState::_Internal::bot_substitutions_left(const Change_UpdateTeamState* msg) {
  return *msg->bot_substitutions_left_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_bot_substitution(const Change_UpdateTeamState* msg) {
  return *msg->requests_bot_substitution_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_timeout(const Change_UpdateTeamState* msg) {
  return *msg->requests_timeout_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_challenge(const Change_UpdateTeamState* msg) {
  return *msg->requests_challenge_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Change_UpdateTeamState::_Internal::requests_emergency_stop(const Change_UpdateTeamState* msg) {
  return *msg->requests_emergency_stop_;
}
const ::YellowCard&
Change_UpdateTeamState::_Internal::yellow_card(const Change_UpdateTeamState* msg) {
  return *msg->yellow_card_;
}
const ::RedCard&
Change_UpdateTeamState::_Internal::red_card(const Change_UpdateTeamState* msg) {
  return *msg->red_card_;
}
const ::Foul&
Change_UpdateTeamState::_Internal::foul(const Change_UpdateTeamState* msg) {
  return *msg->foul_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_yellow_card(const Change_UpdateTeamState* msg) {
  return *msg->remove_yellow_card_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_red_card(const Change_UpdateTeamState* msg) {
  return *msg->remove_red_card_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
Change_UpdateTeamState::_Internal::remove_foul(const Change_UpdateTeamState* msg) {
  return *msg->remove_foul_;
}
void Change_UpdateTeamState::clear_team_name() {
  if (team_name_ != nullptr) team_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Change_UpdateTeamState::clear_goals() {
  if (goals_ != nullptr) goals_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Change_UpdateTeamState::clear_goalkeeper() {
  if (goalkeeper_ != nullptr) goalkeeper_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Change_UpdateTeamState::clear_timeouts_left() {
  if (timeouts_left_ != nullptr) timeouts_left_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Change_UpdateTeamState::clear_timeout_time_left() {
  if (timeout_time_left_ != nullptr) timeout_time_left_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Change_UpdateTeamState::clear_on_positive_half() {
  if (on_positive_half_ != nullptr) on_positive_half_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Change_UpdateTeamState::clear_ball_placement_failures() {
  if (ball_placement_failures_ != nullptr) ball_placement_failures_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Change_UpdateTeamState::clear_can_place_ball() {
  if (can_place_ball_ != nullptr) can_place_ball_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Change_UpdateTeamState::clear_challenge_flags_left() {
  if (challenge_flags_left_ != nullptr) challenge_flags_left_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void Change_UpdateTeamState::clear_bot_substitutions_left() {
  if (bot_substitutions_left_ != nullptr) bot_substitutions_left_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void Change_UpdateTeamState::clear_requests_bot_substitution() {
  if (requests_bot_substitution_ != nullptr) requests_bot_substitution_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Change_UpdateTeamState::clear_requests_timeout() {
  if (requests_timeout_ != nullptr) requests_timeout_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void Change_UpdateTeamState::clear_requests_challenge() {
  if (requests_challenge_ != nullptr) requests_challenge_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void Change_UpdateTeamState::clear_requests_emergency_stop() {
  if (requests_emergency_stop_ != nullptr) requests_emergency_stop_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void Change_UpdateTeamState::clear_yellow_card() {
  if (yellow_card_ != nullptr) yellow_card_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void Change_UpdateTeamState::clear_red_card() {
  if (red_card_ != nullptr) red_card_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Change_UpdateTeamState::clear_foul() {
  if (foul_ != nullptr) foul_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void Change_UpdateTeamState::clear_remove_yellow_card() {
  if (remove_yellow_card_ != nullptr) remove_yellow_card_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void Change_UpdateTeamState::clear_remove_red_card() {
  if (remove_red_card_ != nullptr) remove_red_card_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void Change_UpdateTeamState::clear_remove_foul() {
  if (remove_foul_ != nullptr) remove_foul_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
Change_UpdateTeamState::Change_UpdateTeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.UpdateTeamState)
}
Change_UpdateTeamState::Change_UpdateTeamState(const Change_UpdateTeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_name()) {
    team_name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.team_name_);
  } else {
    team_name_ = nullptr;
  }
  if (from._internal_has_goals()) {
    goals_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.goals_);
  } else {
    goals_ = nullptr;
  }
  if (from._internal_has_goalkeeper()) {
    goalkeeper_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.goalkeeper_);
  } else {
    goalkeeper_ = nullptr;
  }
  if (from._internal_has_timeouts_left()) {
    timeouts_left_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.timeouts_left_);
  } else {
    timeouts_left_ = nullptr;
  }
  if (from._internal_has_timeout_time_left()) {
    timeout_time_left_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.timeout_time_left_);
  } else {
    timeout_time_left_ = nullptr;
  }
  if (from._internal_has_on_positive_half()) {
    on_positive_half_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.on_positive_half_);
  } else {
    on_positive_half_ = nullptr;
  }
  if (from._internal_has_ball_placement_failures()) {
    ball_placement_failures_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.ball_placement_failures_);
  } else {
    ball_placement_failures_ = nullptr;
  }
  if (from._internal_has_can_place_ball()) {
    can_place_ball_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.can_place_ball_);
  } else {
    can_place_ball_ = nullptr;
  }
  if (from._internal_has_requests_bot_substitution()) {
    requests_bot_substitution_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.requests_bot_substitution_);
  } else {
    requests_bot_substitution_ = nullptr;
  }
  if (from._internal_has_red_card()) {
    red_card_ = new ::RedCard(*from.red_card_);
  } else {
    red_card_ = nullptr;
  }
  if (from._internal_has_foul()) {
    foul_ = new ::Foul(*from.foul_);
  } else {
    foul_ = nullptr;
  }
  if (from._internal_has_remove_yellow_card()) {
    remove_yellow_card_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.remove_yellow_card_);
  } else {
    remove_yellow_card_ = nullptr;
  }
  if (from._internal_has_remove_red_card()) {
    remove_red_card_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.remove_red_card_);
  } else {
    remove_red_card_ = nullptr;
  }
  if (from._internal_has_remove_foul()) {
    remove_foul_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.remove_foul_);
  } else {
    remove_foul_ = nullptr;
  }
  if (from._internal_has_requests_timeout()) {
    requests_timeout_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.requests_timeout_);
  } else {
    requests_timeout_ = nullptr;
  }
  if (from._internal_has_requests_challenge()) {
    requests_challenge_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.requests_challenge_);
  } else {
    requests_challenge_ = nullptr;
  }
  if (from._internal_has_requests_emergency_stop()) {
    requests_emergency_stop_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.requests_emergency_stop_);
  } else {
    requests_emergency_stop_ = nullptr;
  }
  if (from._internal_has_yellow_card()) {
    yellow_card_ = new ::YellowCard(*from.yellow_card_);
  } else {
    yellow_card_ = nullptr;
  }
  if (from._internal_has_challenge_flags_left()) {
    challenge_flags_left_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.challenge_flags_left_);
  } else {
    challenge_flags_left_ = nullptr;
  }
  if (from._internal_has_bot_substitutions_left()) {
    bot_substitutions_left_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.bot_substitutions_left_);
  } else {
    bot_substitutions_left_ = nullptr;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.UpdateTeamState)
}

void Change_UpdateTeamState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto.base);
  ::memset(&team_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&team_name_)) + sizeof(for_team_));
}

Change_UpdateTeamState::~Change_UpdateTeamState() {
  // @@protoc_insertion_point(destructor:Change.UpdateTeamState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_UpdateTeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete team_name_;
  if (this != internal_default_instance()) delete goals_;
  if (this != internal_default_instance()) delete goalkeeper_;
  if (this != internal_default_instance()) delete timeouts_left_;
  if (this != internal_default_instance()) delete timeout_time_left_;
  if (this != internal_default_instance()) delete on_positive_half_;
  if (this != internal_default_instance()) delete ball_placement_failures_;
  if (this != internal_default_instance()) delete can_place_ball_;
  if (this != internal_default_instance()) delete requests_bot_substitution_;
  if (this != internal_default_instance()) delete red_card_;
  if (this != internal_default_instance()) delete foul_;
  if (this != internal_default_instance()) delete remove_yellow_card_;
  if (this != internal_default_instance()) delete remove_red_card_;
  if (this != internal_default_instance()) delete remove_foul_;
  if (this != internal_default_instance()) delete requests_timeout_;
  if (this != internal_default_instance()) delete requests_challenge_;
  if (this != internal_default_instance()) delete requests_emergency_stop_;
  if (this != internal_default_instance()) delete yellow_card_;
  if (this != internal_default_instance()) delete challenge_flags_left_;
  if (this != internal_default_instance()) delete bot_substitutions_left_;
}

void Change_UpdateTeamState::ArenaDtor(void* object) {
  Change_UpdateTeamState* _this = reinterpret_cast< Change_UpdateTeamState* >(object);
  (void)_this;
}
void Change_UpdateTeamState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_UpdateTeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_UpdateTeamState& Change_UpdateTeamState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_UpdateTeamState_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_UpdateTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateTeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_name_ != nullptr);
      team_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(goals_ != nullptr);
      goals_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(goalkeeper_ != nullptr);
      goalkeeper_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(timeouts_left_ != nullptr);
      timeouts_left_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(timeout_time_left_ != nullptr);
      timeout_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(on_positive_half_ != nullptr);
      on_positive_half_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ball_placement_failures_ != nullptr);
      ball_placement_failures_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(can_place_ball_ != nullptr);
      can_place_ball_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(requests_bot_substitution_ != nullptr);
      requests_bot_substitution_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(red_card_ != nullptr);
      red_card_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(foul_ != nullptr);
      foul_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(remove_yellow_card_ != nullptr);
      remove_yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(remove_red_card_ != nullptr);
      remove_red_card_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(remove_foul_ != nullptr);
      remove_foul_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(requests_timeout_ != nullptr);
      requests_timeout_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(requests_challenge_ != nullptr);
      requests_challenge_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(requests_emergency_stop_ != nullptr);
      requests_emergency_stop_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(yellow_card_ != nullptr);
      yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(challenge_flags_left_ != nullptr);
      challenge_flags_left_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(bot_substitutions_left_ != nullptr);
      bot_substitutions_left_->Clear();
    }
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_UpdateTeamState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team for_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.StringValue team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value goals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_goals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value goalkeeper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_goalkeeper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value timeouts_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeouts_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.StringValue timeout_time_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_time_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue on_positive_half = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_positive_half(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value ball_placement_failures = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_placement_failures(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue can_place_ball = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_place_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_bot_substitution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RedCard red_card = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Foul foul = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_foul(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_yellow_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_red_card = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_red_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.UInt32Value remove_foul = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_foul(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_timeout = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_challenge = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_challenge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests_emergency_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .YellowCard yellow_card = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value challenge_flags_left = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_flags_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_substitutions_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_UpdateTeamState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateTeamState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_for_team(), target);
  }

  // optional .google.protobuf.StringValue team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::team_name(this), target, stream);
  }

  // optional .google.protobuf.Int32Value goals = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::goals(this), target, stream);
  }

  // optional .google.protobuf.Int32Value goalkeeper = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::goalkeeper(this), target, stream);
  }

  // optional .google.protobuf.Int32Value timeouts_left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timeouts_left(this), target, stream);
  }

  // optional .google.protobuf.StringValue timeout_time_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timeout_time_left(this), target, stream);
  }

  // optional .google.protobuf.BoolValue on_positive_half = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::on_positive_half(this), target, stream);
  }

  // optional .google.protobuf.Int32Value ball_placement_failures = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ball_placement_failures(this), target, stream);
  }

  // optional .google.protobuf.BoolValue can_place_ball = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::can_place_ball(this), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::requests_bot_substitution(this), target, stream);
  }

  // optional .RedCard red_card = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::red_card(this), target, stream);
  }

  // optional .Foul foul = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::foul(this), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::remove_yellow_card(this), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_red_card = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::remove_red_card(this), target, stream);
  }

  // optional .google.protobuf.UInt32Value remove_foul = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::remove_foul(this), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_timeout = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::requests_timeout(this), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_challenge = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::requests_challenge(this), target, stream);
  }

  // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::requests_emergency_stop(this), target, stream);
  }

  // optional .YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::yellow_card(this), target, stream);
  }

  // optional .google.protobuf.Int32Value challenge_flags_left = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::challenge_flags_left(this), target, stream);
  }

  // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bot_substitutions_left(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateTeamState)
  return target;
}

size_t Change_UpdateTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateTeamState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.StringValue team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_name_);
    }

    // optional .google.protobuf.Int32Value goals = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *goals_);
    }

    // optional .google.protobuf.Int32Value goalkeeper = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *goalkeeper_);
    }

    // optional .google.protobuf.Int32Value timeouts_left = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeouts_left_);
    }

    // optional .google.protobuf.StringValue timeout_time_left = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_time_left_);
    }

    // optional .google.protobuf.BoolValue on_positive_half = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_positive_half_);
    }

    // optional .google.protobuf.Int32Value ball_placement_failures = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_placement_failures_);
    }

    // optional .google.protobuf.BoolValue can_place_ball = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *can_place_ball_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_bot_substitution_);
    }

    // optional .RedCard red_card = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *red_card_);
    }

    // optional .Foul foul = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foul_);
    }

    // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_yellow_card_);
    }

    // optional .google.protobuf.UInt32Value remove_red_card = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_red_card_);
    }

    // optional .google.protobuf.UInt32Value remove_foul = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_foul_);
    }

    // optional .google.protobuf.BoolValue requests_timeout = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_timeout_);
    }

    // optional .google.protobuf.BoolValue requests_challenge = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_challenge_);
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requests_emergency_stop_);
    }

    // optional .YellowCard yellow_card = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yellow_card_);
    }

    // optional .google.protobuf.Int32Value challenge_flags_left = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *challenge_flags_left_);
    }

    // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bot_substitutions_left_);
    }

    // optional .Team for_team = 1;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_UpdateTeamState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_UpdateTeamState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_UpdateTeamState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.UpdateTeamState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.UpdateTeamState)
    MergeFrom(*source);
  }
}

void Change_UpdateTeamState::MergeFrom(const Change_UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_team_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_goals()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_goals());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_goalkeeper()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_goalkeeper());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_timeouts_left()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_timeouts_left());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_timeout_time_left()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_timeout_time_left());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_on_positive_half()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_on_positive_half());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_ball_placement_failures()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_ball_placement_failures());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_can_place_ball()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_can_place_ball());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_requests_bot_substitution()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_requests_bot_substitution());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_red_card()->::RedCard::MergeFrom(from._internal_red_card());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_foul()->::Foul::MergeFrom(from._internal_foul());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_remove_yellow_card()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_remove_yellow_card());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_remove_red_card()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_remove_red_card());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_remove_foul()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_remove_foul());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_requests_timeout()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_requests_timeout());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_requests_challenge()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_requests_challenge());
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_requests_emergency_stop()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_requests_emergency_stop());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_yellow_card()->::YellowCard::MergeFrom(from._internal_yellow_card());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_challenge_flags_left()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_challenge_flags_left());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_bot_substitutions_left()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_bot_substitutions_left());
    }
    if (cached_has_bits & 0x00100000u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_UpdateTeamState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_UpdateTeamState::CopyFrom(const Change_UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateTeamState::IsInitialized() const {
  if (_internal_has_red_card()) {
    if (!red_card_->IsInitialized()) return false;
  }
  if (_internal_has_foul()) {
    if (!foul_->IsInitialized()) return false;
  }
  if (_internal_has_yellow_card()) {
    if (!yellow_card_->IsInitialized()) return false;
  }
  return true;
}

void Change_UpdateTeamState::InternalSwap(Change_UpdateTeamState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Change_UpdateTeamState, for_team_)
      + sizeof(Change_UpdateTeamState::for_team_)
      - PROTOBUF_FIELD_OFFSET(Change_UpdateTeamState, team_name_)>(
          reinterpret_cast<char*>(&team_name_),
          reinterpret_cast<char*>(&other->team_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_UpdateTeamState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_SwitchColors::InitAsDefaultInstance() {
}
class Change_SwitchColors::_Internal {
 public:
};

Change_SwitchColors::Change_SwitchColors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.SwitchColors)
}
Change_SwitchColors::Change_SwitchColors(const Change_SwitchColors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Change.SwitchColors)
}

void Change_SwitchColors::SharedCtor() {
}

Change_SwitchColors::~Change_SwitchColors() {
  // @@protoc_insertion_point(destructor:Change.SwitchColors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_SwitchColors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Change_SwitchColors::ArenaDtor(void* object) {
  Change_SwitchColors* _this = reinterpret_cast< Change_SwitchColors* >(object);
  (void)_this;
}
void Change_SwitchColors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_SwitchColors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_SwitchColors& Change_SwitchColors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_SwitchColors_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_SwitchColors::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SwitchColors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_SwitchColors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_SwitchColors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.SwitchColors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SwitchColors)
  return target;
}

size_t Change_SwitchColors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SwitchColors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SwitchColors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SwitchColors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_SwitchColors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SwitchColors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SwitchColors)
    MergeFrom(*source);
  }
}

void Change_SwitchColors::MergeFrom(const Change_SwitchColors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Change_SwitchColors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SwitchColors::CopyFrom(const Change_SwitchColors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SwitchColors::IsInitialized() const {
  return true;
}

void Change_SwitchColors::InternalSwap(Change_SwitchColors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_SwitchColors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_Revert::InitAsDefaultInstance() {
}
class Change_Revert::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_Revert>()._has_bits_);
  static void set_has_change_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_Revert::Change_Revert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.Revert)
}
Change_Revert::Change_Revert(const Change_Revert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_id_ = from.change_id_;
  // @@protoc_insertion_point(copy_constructor:Change.Revert)
}

void Change_Revert::SharedCtor() {
  change_id_ = 0;
}

Change_Revert::~Change_Revert() {
  // @@protoc_insertion_point(destructor:Change.Revert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_Revert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Change_Revert::ArenaDtor(void* object) {
  Change_Revert* _this = reinterpret_cast< Change_Revert* >(object);
  (void)_this;
}
void Change_Revert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_Revert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_Revert& Change_Revert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_Revert_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_Revert::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.Revert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_Revert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 change_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_change_id(&has_bits);
          change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_Revert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.Revert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_change_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.Revert)
  return target;
}

size_t Change_Revert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.Revert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 change_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_Revert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_Revert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_Revert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.Revert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.Revert)
    MergeFrom(*source);
  }
}

void Change_Revert::MergeFrom(const Change_Revert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_change_id()) {
    _internal_set_change_id(from._internal_change_id());
  }
}

void Change_Revert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_Revert::CopyFrom(const Change_Revert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_Revert::IsInitialized() const {
  return true;
}

void Change_Revert::InternalSwap(Change_Revert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(change_id_, other->change_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_Revert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_NewGameState::InitAsDefaultInstance() {
  ::_Change_NewGameState_default_instance_._instance.get_mutable()->game_state_ = const_cast< ::GameState*>(
      ::GameState::internal_default_instance());
}
class Change_NewGameState::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_NewGameState>()._has_bits_);
  static const ::GameState& game_state(const Change_NewGameState* msg);
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::GameState&
Change_NewGameState::_Internal::game_state(const Change_NewGameState* msg) {
  return *msg->game_state_;
}
void Change_NewGameState::clear_game_state() {
  if (game_state_ != nullptr) game_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Change_NewGameState::Change_NewGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.NewGameState)
}
Change_NewGameState::Change_NewGameState(const Change_NewGameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_state()) {
    game_state_ = new ::GameState(*from.game_state_);
  } else {
    game_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewGameState)
}

void Change_NewGameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto.base);
  game_state_ = nullptr;
}

Change_NewGameState::~Change_NewGameState() {
  // @@protoc_insertion_point(destructor:Change.NewGameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_NewGameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_state_;
}

void Change_NewGameState::ArenaDtor(void* object) {
  Change_NewGameState* _this = reinterpret_cast< Change_NewGameState* >(object);
  (void)_this;
}
void Change_NewGameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_NewGameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_NewGameState& Change_NewGameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_NewGameState_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_NewGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewGameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_state_ != nullptr);
    game_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_NewGameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GameState game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_NewGameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewGameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewGameState)
  return target;
}

size_t Change_NewGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewGameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GameState game_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_NewGameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_NewGameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_NewGameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.NewGameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.NewGameState)
    MergeFrom(*source);
  }
}

void Change_NewGameState::MergeFrom(const Change_NewGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_state()) {
    _internal_mutable_game_state()->::GameState::MergeFrom(from._internal_game_state());
  }
}

void Change_NewGameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_NewGameState::CopyFrom(const Change_NewGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewGameState::IsInitialized() const {
  if (_internal_has_game_state()) {
    if (!game_state_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewGameState::InternalSwap(Change_NewGameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_state_, other->game_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_NewGameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change_SetStatusMessage::InitAsDefaultInstance() {
}
class Change_SetStatusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Change_SetStatusMessage>()._has_bits_);
  static void set_has_status_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Change_SetStatusMessage::Change_SetStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change.SetStatusMessage)
}
Change_SetStatusMessage::Change_SetStatusMessage(const Change_SetStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status_message()) {
    status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetStatusMessage)
}

void Change_SetStatusMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto.base);
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Change_SetStatusMessage::~Change_SetStatusMessage() {
  // @@protoc_insertion_point(destructor:Change.SetStatusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change_SetStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Change_SetStatusMessage::ArenaDtor(void* object) {
  Change_SetStatusMessage* _this = reinterpret_cast< Change_SetStatusMessage* >(object);
  (void)_this;
}
void Change_SetStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change_SetStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change_SetStatusMessage& Change_SetStatusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_SetStatusMessage_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change_SetStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change_SetStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Change.SetStatusMessage.status_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change_SetStatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.SetStatusMessage.status_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetStatusMessage)
  return target;
}

size_t Change_SetStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetStatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string status_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SetStatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SetStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SetStatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change_SetStatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SetStatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SetStatusMessage)
    MergeFrom(*source);
  }
}

void Change_SetStatusMessage::MergeFrom(const Change_SetStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SetStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status_message()) {
    _internal_set_status_message(from._internal_status_message());
  }
}

void Change_SetStatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SetStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SetStatusMessage::CopyFrom(const Change_SetStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetStatusMessage::IsInitialized() const {
  return true;
}

void Change_SetStatusMessage::InternalSwap(Change_SetStatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_message_.Swap(&other->status_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Change_SetStatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change::InitAsDefaultInstance() {
  ::_Change_default_instance_.new_command_change_ = const_cast< ::Change_NewCommand*>(
      ::Change_NewCommand::internal_default_instance());
  ::_Change_default_instance_.change_stage_change_ = const_cast< ::Change_ChangeStage*>(
      ::Change_ChangeStage::internal_default_instance());
  ::_Change_default_instance_.set_ball_placement_pos_change_ = const_cast< ::Change_SetBallPlacementPos*>(
      ::Change_SetBallPlacementPos::internal_default_instance());
  ::_Change_default_instance_.add_yellow_card_change_ = const_cast< ::Change_AddYellowCard*>(
      ::Change_AddYellowCard::internal_default_instance());
  ::_Change_default_instance_.add_red_card_change_ = const_cast< ::Change_AddRedCard*>(
      ::Change_AddRedCard::internal_default_instance());
  ::_Change_default_instance_.yellow_card_over_change_ = const_cast< ::Change_YellowCardOver*>(
      ::Change_YellowCardOver::internal_default_instance());
  ::_Change_default_instance_.add_game_event_change_ = const_cast< ::Change_AddGameEvent*>(
      ::Change_AddGameEvent::internal_default_instance());
  ::_Change_default_instance_.add_passive_game_event_change_ = const_cast< ::Change_AddPassiveGameEvent*>(
      ::Change_AddPassiveGameEvent::internal_default_instance());
  ::_Change_default_instance_.add_proposal_change_ = const_cast< ::Change_AddProposal*>(
      ::Change_AddProposal::internal_default_instance());
  ::_Change_default_instance_.update_config_change_ = const_cast< ::Change_UpdateConfig*>(
      ::Change_UpdateConfig::internal_default_instance());
  ::_Change_default_instance_.update_team_state_change_ = const_cast< ::Change_UpdateTeamState*>(
      ::Change_UpdateTeamState::internal_default_instance());
  ::_Change_default_instance_.switch_colors_change_ = const_cast< ::Change_SwitchColors*>(
      ::Change_SwitchColors::internal_default_instance());
  ::_Change_default_instance_.revert_change_ = const_cast< ::Change_Revert*>(
      ::Change_Revert::internal_default_instance());
  ::_Change_default_instance_.new_game_state_change_ = const_cast< ::Change_NewGameState*>(
      ::Change_NewGameState::internal_default_instance());
  ::_Change_default_instance_.accept_proposal_group_change_ = const_cast< ::Change_AcceptProposalGroup*>(
      ::Change_AcceptProposalGroup::internal_default_instance());
  ::_Change_default_instance_.set_status_message_change_ = const_cast< ::Change_SetStatusMessage*>(
      ::Change_SetStatusMessage::internal_default_instance());
}
class Change::_Internal {
 public:
  using HasBits = decltype(std::declval<Change>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_revertible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Change_NewCommand& new_command_change(const Change* msg);
  static const ::Change_ChangeStage& change_stage_change(const Change* msg);
  static const ::Change_SetBallPlacementPos& set_ball_placement_pos_change(const Change* msg);
  static const ::Change_AddYellowCard& add_yellow_card_change(const Change* msg);
  static const ::Change_AddRedCard& add_red_card_change(const Change* msg);
  static const ::Change_YellowCardOver& yellow_card_over_change(const Change* msg);
  static const ::Change_AddGameEvent& add_game_event_change(const Change* msg);
  static const ::Change_AddPassiveGameEvent& add_passive_game_event_change(const Change* msg);
  static const ::Change_AddProposal& add_proposal_change(const Change* msg);
  static const ::Change_UpdateConfig& update_config_change(const Change* msg);
  static const ::Change_UpdateTeamState& update_team_state_change(const Change* msg);
  static const ::Change_SwitchColors& switch_colors_change(const Change* msg);
  static const ::Change_Revert& revert_change(const Change* msg);
  static const ::Change_NewGameState& new_game_state_change(const Change* msg);
  static const ::Change_AcceptProposalGroup& accept_proposal_group_change(const Change* msg);
  static const ::Change_SetStatusMessage& set_status_message_change(const Change* msg);
};

const ::Change_NewCommand&
Change::_Internal::new_command_change(const Change* msg) {
  return *msg->change_.new_command_change_;
}
const ::Change_ChangeStage&
Change::_Internal::change_stage_change(const Change* msg) {
  return *msg->change_.change_stage_change_;
}
const ::Change_SetBallPlacementPos&
Change::_Internal::set_ball_placement_pos_change(const Change* msg) {
  return *msg->change_.set_ball_placement_pos_change_;
}
const ::Change_AddYellowCard&
Change::_Internal::add_yellow_card_change(const Change* msg) {
  return *msg->change_.add_yellow_card_change_;
}
const ::Change_AddRedCard&
Change::_Internal::add_red_card_change(const Change* msg) {
  return *msg->change_.add_red_card_change_;
}
const ::Change_YellowCardOver&
Change::_Internal::yellow_card_over_change(const Change* msg) {
  return *msg->change_.yellow_card_over_change_;
}
const ::Change_AddGameEvent&
Change::_Internal::add_game_event_change(const Change* msg) {
  return *msg->change_.add_game_event_change_;
}
const ::Change_AddPassiveGameEvent&
Change::_Internal::add_passive_game_event_change(const Change* msg) {
  return *msg->change_.add_passive_game_event_change_;
}
const ::Change_AddProposal&
Change::_Internal::add_proposal_change(const Change* msg) {
  return *msg->change_.add_proposal_change_;
}
const ::Change_UpdateConfig&
Change::_Internal::update_config_change(const Change* msg) {
  return *msg->change_.update_config_change_;
}
const ::Change_UpdateTeamState&
Change::_Internal::update_team_state_change(const Change* msg) {
  return *msg->change_.update_team_state_change_;
}
const ::Change_SwitchColors&
Change::_Internal::switch_colors_change(const Change* msg) {
  return *msg->change_.switch_colors_change_;
}
const ::Change_Revert&
Change::_Internal::revert_change(const Change* msg) {
  return *msg->change_.revert_change_;
}
const ::Change_NewGameState&
Change::_Internal::new_game_state_change(const Change* msg) {
  return *msg->change_.new_game_state_change_;
}
const ::Change_AcceptProposalGroup&
Change::_Internal::accept_proposal_group_change(const Change* msg) {
  return *msg->change_.accept_proposal_group_change_;
}
const ::Change_SetStatusMessage&
Change::_Internal::set_status_message_change(const Change* msg) {
  return *msg->change_.set_status_message_change_;
}
void Change::set_allocated_new_command_change(::Change_NewCommand* new_command_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (new_command_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_command_change);
    if (message_arena != submessage_arena) {
      new_command_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_command_change, submessage_arena);
    }
    set_has_new_command_change();
    change_.new_command_change_ = new_command_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_command_change)
}
void Change::set_allocated_change_stage_change(::Change_ChangeStage* change_stage_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (change_stage_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_stage_change);
    if (message_arena != submessage_arena) {
      change_stage_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_stage_change, submessage_arena);
    }
    set_has_change_stage_change();
    change_.change_stage_change_ = change_stage_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.change_stage_change)
}
void Change::set_allocated_set_ball_placement_pos_change(::Change_SetBallPlacementPos* set_ball_placement_pos_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (set_ball_placement_pos_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_ball_placement_pos_change);
    if (message_arena != submessage_arena) {
      set_ball_placement_pos_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_ball_placement_pos_change, submessage_arena);
    }
    set_has_set_ball_placement_pos_change();
    change_.set_ball_placement_pos_change_ = set_ball_placement_pos_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_ball_placement_pos_change)
}
void Change::set_allocated_add_yellow_card_change(::Change_AddYellowCard* add_yellow_card_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (add_yellow_card_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_yellow_card_change);
    if (message_arena != submessage_arena) {
      add_yellow_card_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_yellow_card_change, submessage_arena);
    }
    set_has_add_yellow_card_change();
    change_.add_yellow_card_change_ = add_yellow_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_yellow_card_change)
}
void Change::set_allocated_add_red_card_change(::Change_AddRedCard* add_red_card_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (add_red_card_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_red_card_change);
    if (message_arena != submessage_arena) {
      add_red_card_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_red_card_change, submessage_arena);
    }
    set_has_add_red_card_change();
    change_.add_red_card_change_ = add_red_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_red_card_change)
}
void Change::set_allocated_yellow_card_over_change(::Change_YellowCardOver* yellow_card_over_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (yellow_card_over_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(yellow_card_over_change);
    if (message_arena != submessage_arena) {
      yellow_card_over_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow_card_over_change, submessage_arena);
    }
    set_has_yellow_card_over_change();
    change_.yellow_card_over_change_ = yellow_card_over_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.yellow_card_over_change)
}
void Change::set_allocated_add_game_event_change(::Change_AddGameEvent* add_game_event_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (add_game_event_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_game_event_change);
    if (message_arena != submessage_arena) {
      add_game_event_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_game_event_change, submessage_arena);
    }
    set_has_add_game_event_change();
    change_.add_game_event_change_ = add_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_game_event_change)
}
void Change::set_allocated_add_passive_game_event_change(::Change_AddPassiveGameEvent* add_passive_game_event_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (add_passive_game_event_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_passive_game_event_change);
    if (message_arena != submessage_arena) {
      add_passive_game_event_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_passive_game_event_change, submessage_arena);
    }
    set_has_add_passive_game_event_change();
    change_.add_passive_game_event_change_ = add_passive_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_passive_game_event_change)
}
void Change::set_allocated_add_proposal_change(::Change_AddProposal* add_proposal_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (add_proposal_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_proposal_change);
    if (message_arena != submessage_arena) {
      add_proposal_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_proposal_change, submessage_arena);
    }
    set_has_add_proposal_change();
    change_.add_proposal_change_ = add_proposal_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_proposal_change)
}
void Change::set_allocated_update_config_change(::Change_UpdateConfig* update_config_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (update_config_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_config_change);
    if (message_arena != submessage_arena) {
      update_config_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_config_change, submessage_arena);
    }
    set_has_update_config_change();
    change_.update_config_change_ = update_config_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_config_change)
}
void Change::set_allocated_update_team_state_change(::Change_UpdateTeamState* update_team_state_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (update_team_state_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_team_state_change);
    if (message_arena != submessage_arena) {
      update_team_state_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_team_state_change, submessage_arena);
    }
    set_has_update_team_state_change();
    change_.update_team_state_change_ = update_team_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_team_state_change)
}
void Change::set_allocated_switch_colors_change(::Change_SwitchColors* switch_colors_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (switch_colors_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(switch_colors_change);
    if (message_arena != submessage_arena) {
      switch_colors_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_colors_change, submessage_arena);
    }
    set_has_switch_colors_change();
    change_.switch_colors_change_ = switch_colors_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.switch_colors_change)
}
void Change::set_allocated_revert_change(::Change_Revert* revert_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (revert_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(revert_change);
    if (message_arena != submessage_arena) {
      revert_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revert_change, submessage_arena);
    }
    set_has_revert_change();
    change_.revert_change_ = revert_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.revert_change)
}
void Change::set_allocated_new_game_state_change(::Change_NewGameState* new_game_state_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (new_game_state_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_game_state_change);
    if (message_arena != submessage_arena) {
      new_game_state_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_game_state_change, submessage_arena);
    }
    set_has_new_game_state_change();
    change_.new_game_state_change_ = new_game_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_game_state_change)
}
void Change::set_allocated_accept_proposal_group_change(::Change_AcceptProposalGroup* accept_proposal_group_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (accept_proposal_group_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accept_proposal_group_change);
    if (message_arena != submessage_arena) {
      accept_proposal_group_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept_proposal_group_change, submessage_arena);
    }
    set_has_accept_proposal_group_change();
    change_.accept_proposal_group_change_ = accept_proposal_group_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.accept_proposal_group_change)
}
void Change::set_allocated_set_status_message_change(::Change_SetStatusMessage* set_status_message_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_change();
  if (set_status_message_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_status_message_change);
    if (message_arena != submessage_arena) {
      set_status_message_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_status_message_change, submessage_arena);
    }
    set_has_set_status_message_change();
    change_.set_status_message_change_ = set_status_message_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_status_message_change)
}
Change::Change(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Change)
}
Change::Change(const Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origin()) {
    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origin(),
      GetArena());
  }
  revertible_ = from.revertible_;
  clear_has_change();
  switch (from.change_case()) {
    case kNewCommandChange: {
      _internal_mutable_new_command_change()->::Change_NewCommand::MergeFrom(from._internal_new_command_change());
      break;
    }
    case kChangeStageChange: {
      _internal_mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(from._internal_change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      _internal_mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(from._internal_set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      _internal_mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(from._internal_add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      _internal_mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(from._internal_add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      _internal_mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(from._internal_yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      _internal_mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(from._internal_add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      _internal_mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(from._internal_add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      _internal_mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(from._internal_add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      _internal_mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(from._internal_update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      _internal_mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(from._internal_update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      _internal_mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(from._internal_switch_colors_change());
      break;
    }
    case kRevertChange: {
      _internal_mutable_revert_change()->::Change_Revert::MergeFrom(from._internal_revert_change());
      break;
    }
    case kNewGameStateChange: {
      _internal_mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(from._internal_new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      _internal_mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(from._internal_accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      _internal_mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(from._internal_set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Change)
}

void Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_ssl_5fgc_5fchange_2eproto.base);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revertible_ = false;
  clear_has_change();
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:Change)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Change::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_change()) {
    clear_change();
  }
}

void Change::ArenaDtor(void* object) {
  Change* _this = reinterpret_cast< Change* >(object);
  (void)_this;
}
void Change::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change& Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_ssl_5fgc_5fchange_2eproto.base);
  return *internal_default_instance();
}


void Change::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:Change)
  switch (change_case()) {
    case kNewCommandChange: {
      if (GetArena() == nullptr) {
        delete change_.new_command_change_;
      }
      break;
    }
    case kChangeStageChange: {
      if (GetArena() == nullptr) {
        delete change_.change_stage_change_;
      }
      break;
    }
    case kSetBallPlacementPosChange: {
      if (GetArena() == nullptr) {
        delete change_.set_ball_placement_pos_change_;
      }
      break;
    }
    case kAddYellowCardChange: {
      if (GetArena() == nullptr) {
        delete change_.add_yellow_card_change_;
      }
      break;
    }
    case kAddRedCardChange: {
      if (GetArena() == nullptr) {
        delete change_.add_red_card_change_;
      }
      break;
    }
    case kYellowCardOverChange: {
      if (GetArena() == nullptr) {
        delete change_.yellow_card_over_change_;
      }
      break;
    }
    case kAddGameEventChange: {
      if (GetArena() == nullptr) {
        delete change_.add_game_event_change_;
      }
      break;
    }
    case kAddPassiveGameEventChange: {
      if (GetArena() == nullptr) {
        delete change_.add_passive_game_event_change_;
      }
      break;
    }
    case kAddProposalChange: {
      if (GetArena() == nullptr) {
        delete change_.add_proposal_change_;
      }
      break;
    }
    case kUpdateConfigChange: {
      if (GetArena() == nullptr) {
        delete change_.update_config_change_;
      }
      break;
    }
    case kUpdateTeamStateChange: {
      if (GetArena() == nullptr) {
        delete change_.update_team_state_change_;
      }
      break;
    }
    case kSwitchColorsChange: {
      if (GetArena() == nullptr) {
        delete change_.switch_colors_change_;
      }
      break;
    }
    case kRevertChange: {
      if (GetArena() == nullptr) {
        delete change_.revert_change_;
      }
      break;
    }
    case kNewGameStateChange: {
      if (GetArena() == nullptr) {
        delete change_.new_game_state_change_;
      }
      break;
    }
    case kAcceptProposalGroupChange: {
      if (GetArena() == nullptr) {
        delete change_.accept_proposal_group_change_;
      }
      break;
    }
    case kSetStatusMessageChange: {
      if (GetArena() == nullptr) {
        delete change_.set_status_message_change_;
      }
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void Change::Clear() {
// @@protoc_insertion_point(message_clear_start:Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmpty();
  }
  revertible_ = false;
  clear_change();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Change.origin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.NewCommand new_command_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_command_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.ChangeStage change_stage_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_stage_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_ball_placement_pos_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AddYellowCard add_yellow_card_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_yellow_card_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AddRedCard add_red_card_change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_red_card_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.YellowCardOver yellow_card_over_change = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow_card_over_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AddGameEvent add_game_event_change = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_game_event_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AddProposal add_proposal_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_proposal_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.UpdateConfig update_config_change = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_config_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.UpdateTeamState update_team_state_change = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_team_state_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.SwitchColors switch_colors_change = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_colors_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.Revert revert_change = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_revert_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool revertible = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_revertible(&has_bits);
          revertible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.NewGameState new_game_state_change = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_game_state_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AcceptProposalGroup accept_proposal_group_change = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept_proposal_group_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_passive_game_event_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Change.SetStatusMessage set_status_message_change = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_status_message_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Change.origin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_origin(), target);
  }

  switch (change_case()) {
    case kNewCommandChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::new_command_change(this), target, stream);
      break;
    }
    case kChangeStageChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::change_stage_change(this), target, stream);
      break;
    }
    case kSetBallPlacementPosChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::set_ball_placement_pos_change(this), target, stream);
      break;
    }
    case kAddYellowCardChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::add_yellow_card_change(this), target, stream);
      break;
    }
    case kAddRedCardChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::add_red_card_change(this), target, stream);
      break;
    }
    case kYellowCardOverChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::yellow_card_over_change(this), target, stream);
      break;
    }
    case kAddGameEventChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::add_game_event_change(this), target, stream);
      break;
    }
    case kAddProposalChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::add_proposal_change(this), target, stream);
      break;
    }
    case kUpdateConfigChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::update_config_change(this), target, stream);
      break;
    }
    case kUpdateTeamStateChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::update_team_state_change(this), target, stream);
      break;
    }
    case kSwitchColorsChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::switch_colors_change(this), target, stream);
      break;
    }
    case kRevertChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::revert_change(this), target, stream);
      break;
    }
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_revertible(), target);
  }

  switch (change_case()) {
    case kNewGameStateChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::new_game_state_change(this), target, stream);
      break;
    }
    case kAcceptProposalGroupChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::accept_proposal_group_change(this), target, stream);
      break;
    }
    case kAddPassiveGameEventChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::add_passive_game_event_change(this), target, stream);
      break;
    }
    case kSetStatusMessageChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::set_status_message_change(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change)
  return target;
}

size_t Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional bool revertible = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  switch (change_case()) {
    // .Change.NewCommand new_command_change = 2;
    case kNewCommandChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.new_command_change_);
      break;
    }
    // .Change.ChangeStage change_stage_change = 3;
    case kChangeStageChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.change_stage_change_);
      break;
    }
    // .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
    case kSetBallPlacementPosChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.set_ball_placement_pos_change_);
      break;
    }
    // .Change.AddYellowCard add_yellow_card_change = 5;
    case kAddYellowCardChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.add_yellow_card_change_);
      break;
    }
    // .Change.AddRedCard add_red_card_change = 6;
    case kAddRedCardChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.add_red_card_change_);
      break;
    }
    // .Change.YellowCardOver yellow_card_over_change = 7;
    case kYellowCardOverChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.yellow_card_over_change_);
      break;
    }
    // .Change.AddGameEvent add_game_event_change = 8;
    case kAddGameEventChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.add_game_event_change_);
      break;
    }
    // .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
    case kAddPassiveGameEventChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.add_passive_game_event_change_);
      break;
    }
    // .Change.AddProposal add_proposal_change = 9;
    case kAddProposalChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.add_proposal_change_);
      break;
    }
    // .Change.UpdateConfig update_config_change = 12;
    case kUpdateConfigChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.update_config_change_);
      break;
    }
    // .Change.UpdateTeamState update_team_state_change = 13;
    case kUpdateTeamStateChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.update_team_state_change_);
      break;
    }
    // .Change.SwitchColors switch_colors_change = 14;
    case kSwitchColorsChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.switch_colors_change_);
      break;
    }
    // .Change.Revert revert_change = 15;
    case kRevertChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.revert_change_);
      break;
    }
    // .Change.NewGameState new_game_state_change = 17;
    case kNewGameStateChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.new_game_state_change_);
      break;
    }
    // .Change.AcceptProposalGroup accept_proposal_group_change = 18;
    case kAcceptProposalGroupChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.accept_proposal_group_change_);
      break;
    }
    // .Change.SetStatusMessage set_status_message_change = 20;
    case kSetStatusMessageChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_.set_status_message_change_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change)
  GOOGLE_DCHECK_NE(&from, this);
  const Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change)
    MergeFrom(*source);
  }
}

void Change::MergeFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      revertible_ = from.revertible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.change_case()) {
    case kNewCommandChange: {
      _internal_mutable_new_command_change()->::Change_NewCommand::MergeFrom(from._internal_new_command_change());
      break;
    }
    case kChangeStageChange: {
      _internal_mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(from._internal_change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      _internal_mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(from._internal_set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      _internal_mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(from._internal_add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      _internal_mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(from._internal_add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      _internal_mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(from._internal_yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      _internal_mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(from._internal_add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      _internal_mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(from._internal_add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      _internal_mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(from._internal_add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      _internal_mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(from._internal_update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      _internal_mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(from._internal_update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      _internal_mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(from._internal_switch_colors_change());
      break;
    }
    case kRevertChange: {
      _internal_mutable_revert_change()->::Change_Revert::MergeFrom(from._internal_revert_change());
      break;
    }
    case kNewGameStateChange: {
      _internal_mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(from._internal_new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      _internal_mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(from._internal_accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      _internal_mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(from._internal_set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change::CopyFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {
  switch (change_case()) {
    case kNewCommandChange: {
      if (has_new_command_change()) {
        if (!this->new_command_change().IsInitialized()) return false;
      }
      break;
    }
    case kChangeStageChange: {
      break;
    }
    case kSetBallPlacementPosChange: {
      if (has_set_ball_placement_pos_change()) {
        if (!this->set_ball_placement_pos_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddYellowCardChange: {
      if (has_add_yellow_card_change()) {
        if (!this->add_yellow_card_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddRedCardChange: {
      if (has_add_red_card_change()) {
        if (!this->add_red_card_change().IsInitialized()) return false;
      }
      break;
    }
    case kYellowCardOverChange: {
      break;
    }
    case kAddGameEventChange: {
      if (has_add_game_event_change()) {
        if (!this->add_game_event_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddPassiveGameEventChange: {
      if (has_add_passive_game_event_change()) {
        if (!this->add_passive_game_event_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddProposalChange: {
      if (has_add_proposal_change()) {
        if (!this->add_proposal_change().IsInitialized()) return false;
      }
      break;
    }
    case kUpdateConfigChange: {
      break;
    }
    case kUpdateTeamStateChange: {
      if (has_update_team_state_change()) {
        if (!this->update_team_state_change().IsInitialized()) return false;
      }
      break;
    }
    case kSwitchColorsChange: {
      break;
    }
    case kRevertChange: {
      break;
    }
    case kNewGameStateChange: {
      if (has_new_game_state_change()) {
        if (!this->new_game_state_change().IsInitialized()) return false;
      }
      break;
    }
    case kAcceptProposalGroupChange: {
      break;
    }
    case kSetStatusMessageChange: {
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Change::InternalSwap(Change* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origin_.Swap(&other->origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(revertible_, other->revertible_);
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Change::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StateChange* Arena::CreateMaybeMessage< ::StateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_NewCommand* Arena::CreateMaybeMessage< ::Change_NewCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_NewCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_ChangeStage* Arena::CreateMaybeMessage< ::Change_ChangeStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_ChangeStage >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SetBallPlacementPos* Arena::CreateMaybeMessage< ::Change_SetBallPlacementPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SetBallPlacementPos >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddYellowCard* Arena::CreateMaybeMessage< ::Change_AddYellowCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddYellowCard >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddRedCard* Arena::CreateMaybeMessage< ::Change_AddRedCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddRedCard >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_YellowCardOver* Arena::CreateMaybeMessage< ::Change_YellowCardOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_YellowCardOver >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddGameEvent* Arena::CreateMaybeMessage< ::Change_AddGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddPassiveGameEvent* Arena::CreateMaybeMessage< ::Change_AddPassiveGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddPassiveGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AddProposal* Arena::CreateMaybeMessage< ::Change_AddProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AddProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_AcceptProposalGroup* Arena::CreateMaybeMessage< ::Change_AcceptProposalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_AcceptProposalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_UpdateConfig* Arena::CreateMaybeMessage< ::Change_UpdateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_UpdateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_UpdateTeamState* Arena::CreateMaybeMessage< ::Change_UpdateTeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_UpdateTeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SwitchColors* Arena::CreateMaybeMessage< ::Change_SwitchColors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SwitchColors >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_Revert* Arena::CreateMaybeMessage< ::Change_Revert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_Revert >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_NewGameState* Arena::CreateMaybeMessage< ::Change_NewGameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_NewGameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Change_SetStatusMessage* Arena::CreateMaybeMessage< ::Change_SetStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change_SetStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Change* Arena::CreateMaybeMessage< ::Change >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Change >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
