// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_custom_erforce_realism.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto;
class RealismConfigErForce;
class RealismConfigErForceDefaultTypeInternal;
extern RealismConfigErForceDefaultTypeInternal _RealismConfigErForce_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RealismConfigErForce* Arena::CreateMaybeMessage<::RealismConfigErForce>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RealismConfigErForce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RealismConfigErForce) */ {
 public:
  inline RealismConfigErForce() : RealismConfigErForce(nullptr) {};
  virtual ~RealismConfigErForce();

  RealismConfigErForce(const RealismConfigErForce& from);
  RealismConfigErForce(RealismConfigErForce&& from) noexcept
    : RealismConfigErForce() {
    *this = ::std::move(from);
  }

  inline RealismConfigErForce& operator=(const RealismConfigErForce& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealismConfigErForce& operator=(RealismConfigErForce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealismConfigErForce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealismConfigErForce* internal_default_instance() {
    return reinterpret_cast<const RealismConfigErForce*>(
               &_RealismConfigErForce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RealismConfigErForce& a, RealismConfigErForce& b) {
    a.Swap(&b);
  }
  inline void Swap(RealismConfigErForce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealismConfigErForce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealismConfigErForce* New() const final {
    return CreateMaybeMessage<RealismConfigErForce>(nullptr);
  }

  RealismConfigErForce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealismConfigErForce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealismConfigErForce& from);
  void MergeFrom(const RealismConfigErForce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealismConfigErForce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RealismConfigErForce";
  }
  protected:
  explicit RealismConfigErForce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto);
    return ::descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStddevBallPFieldNumber = 1,
    kStddevRobotPFieldNumber = 2,
    kStddevRobotPhiFieldNumber = 3,
    kStddevBallAreaFieldNumber = 4,
    kBallVisibilityThresholdFieldNumber = 6,
    kCameraOverlapFieldNumber = 7,
    kDribblerBallDetectionsFieldNumber = 8,
    kCameraPositionErrorFieldNumber = 9,
    kRobotCommandLossFieldNumber = 10,
    kEnableInvisibleBallFieldNumber = 5,
    kSimulateDribblingFieldNumber = 15,
    kRobotResponseLossFieldNumber = 11,
    kMissingBallDetectionsFieldNumber = 12,
    kVisionDelayFieldNumber = 13,
    kVisionProcessingTimeFieldNumber = 14,
    kObjectPositionOffsetFieldNumber = 16,
    kMissingRobotDetectionsFieldNumber = 17,
  };
  // optional float stddev_ball_p = 1;
  bool has_stddev_ball_p() const;
  private:
  bool _internal_has_stddev_ball_p() const;
  public:
  void clear_stddev_ball_p();
  float stddev_ball_p() const;
  void set_stddev_ball_p(float value);
  private:
  float _internal_stddev_ball_p() const;
  void _internal_set_stddev_ball_p(float value);
  public:

  // optional float stddev_robot_p = 2;
  bool has_stddev_robot_p() const;
  private:
  bool _internal_has_stddev_robot_p() const;
  public:
  void clear_stddev_robot_p();
  float stddev_robot_p() const;
  void set_stddev_robot_p(float value);
  private:
  float _internal_stddev_robot_p() const;
  void _internal_set_stddev_robot_p(float value);
  public:

  // optional float stddev_robot_phi = 3;
  bool has_stddev_robot_phi() const;
  private:
  bool _internal_has_stddev_robot_phi() const;
  public:
  void clear_stddev_robot_phi();
  float stddev_robot_phi() const;
  void set_stddev_robot_phi(float value);
  private:
  float _internal_stddev_robot_phi() const;
  void _internal_set_stddev_robot_phi(float value);
  public:

  // optional float stddev_ball_area = 4;
  bool has_stddev_ball_area() const;
  private:
  bool _internal_has_stddev_ball_area() const;
  public:
  void clear_stddev_ball_area();
  float stddev_ball_area() const;
  void set_stddev_ball_area(float value);
  private:
  float _internal_stddev_ball_area() const;
  void _internal_set_stddev_ball_area(float value);
  public:

  // optional float ball_visibility_threshold = 6;
  bool has_ball_visibility_threshold() const;
  private:
  bool _internal_has_ball_visibility_threshold() const;
  public:
  void clear_ball_visibility_threshold();
  float ball_visibility_threshold() const;
  void set_ball_visibility_threshold(float value);
  private:
  float _internal_ball_visibility_threshold() const;
  void _internal_set_ball_visibility_threshold(float value);
  public:

  // optional float camera_overlap = 7;
  bool has_camera_overlap() const;
  private:
  bool _internal_has_camera_overlap() const;
  public:
  void clear_camera_overlap();
  float camera_overlap() const;
  void set_camera_overlap(float value);
  private:
  float _internal_camera_overlap() const;
  void _internal_set_camera_overlap(float value);
  public:

  // optional float dribbler_ball_detections = 8;
  bool has_dribbler_ball_detections() const;
  private:
  bool _internal_has_dribbler_ball_detections() const;
  public:
  void clear_dribbler_ball_detections();
  float dribbler_ball_detections() const;
  void set_dribbler_ball_detections(float value);
  private:
  float _internal_dribbler_ball_detections() const;
  void _internal_set_dribbler_ball_detections(float value);
  public:

  // optional float camera_position_error = 9;
  bool has_camera_position_error() const;
  private:
  bool _internal_has_camera_position_error() const;
  public:
  void clear_camera_position_error();
  float camera_position_error() const;
  void set_camera_position_error(float value);
  private:
  float _internal_camera_position_error() const;
  void _internal_set_camera_position_error(float value);
  public:

  // optional float robot_command_loss = 10;
  bool has_robot_command_loss() const;
  private:
  bool _internal_has_robot_command_loss() const;
  public:
  void clear_robot_command_loss();
  float robot_command_loss() const;
  void set_robot_command_loss(float value);
  private:
  float _internal_robot_command_loss() const;
  void _internal_set_robot_command_loss(float value);
  public:

  // optional bool enable_invisible_ball = 5;
  bool has_enable_invisible_ball() const;
  private:
  bool _internal_has_enable_invisible_ball() const;
  public:
  void clear_enable_invisible_ball();
  bool enable_invisible_ball() const;
  void set_enable_invisible_ball(bool value);
  private:
  bool _internal_enable_invisible_ball() const;
  void _internal_set_enable_invisible_ball(bool value);
  public:

  // optional bool simulate_dribbling = 15;
  bool has_simulate_dribbling() const;
  private:
  bool _internal_has_simulate_dribbling() const;
  public:
  void clear_simulate_dribbling();
  bool simulate_dribbling() const;
  void set_simulate_dribbling(bool value);
  private:
  bool _internal_simulate_dribbling() const;
  void _internal_set_simulate_dribbling(bool value);
  public:

  // optional float robot_response_loss = 11;
  bool has_robot_response_loss() const;
  private:
  bool _internal_has_robot_response_loss() const;
  public:
  void clear_robot_response_loss();
  float robot_response_loss() const;
  void set_robot_response_loss(float value);
  private:
  float _internal_robot_response_loss() const;
  void _internal_set_robot_response_loss(float value);
  public:

  // optional float missing_ball_detections = 12;
  bool has_missing_ball_detections() const;
  private:
  bool _internal_has_missing_ball_detections() const;
  public:
  void clear_missing_ball_detections();
  float missing_ball_detections() const;
  void set_missing_ball_detections(float value);
  private:
  float _internal_missing_ball_detections() const;
  void _internal_set_missing_ball_detections(float value);
  public:

  // optional int64 vision_delay = 13;
  bool has_vision_delay() const;
  private:
  bool _internal_has_vision_delay() const;
  public:
  void clear_vision_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 vision_delay() const;
  void set_vision_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vision_delay() const;
  void _internal_set_vision_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 vision_processing_time = 14;
  bool has_vision_processing_time() const;
  private:
  bool _internal_has_vision_processing_time() const;
  public:
  void clear_vision_processing_time();
  ::PROTOBUF_NAMESPACE_ID::int64 vision_processing_time() const;
  void set_vision_processing_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vision_processing_time() const;
  void _internal_set_vision_processing_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float object_position_offset = 16;
  bool has_object_position_offset() const;
  private:
  bool _internal_has_object_position_offset() const;
  public:
  void clear_object_position_offset();
  float object_position_offset() const;
  void set_object_position_offset(float value);
  private:
  float _internal_object_position_offset() const;
  void _internal_set_object_position_offset(float value);
  public:

  // optional float missing_robot_detections = 17;
  bool has_missing_robot_detections() const;
  private:
  bool _internal_has_missing_robot_detections() const;
  public:
  void clear_missing_robot_detections();
  float missing_robot_detections() const;
  void set_missing_robot_detections(float value);
  private:
  float _internal_missing_robot_detections() const;
  void _internal_set_missing_robot_detections(float value);
  public:

  // @@protoc_insertion_point(class_scope:RealismConfigErForce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float stddev_ball_p_;
  float stddev_robot_p_;
  float stddev_robot_phi_;
  float stddev_ball_area_;
  float ball_visibility_threshold_;
  float camera_overlap_;
  float dribbler_ball_detections_;
  float camera_position_error_;
  float robot_command_loss_;
  bool enable_invisible_ball_;
  bool simulate_dribbling_;
  float robot_response_loss_;
  float missing_ball_detections_;
  ::PROTOBUF_NAMESPACE_ID::int64 vision_delay_;
  ::PROTOBUF_NAMESPACE_ID::int64 vision_processing_time_;
  float object_position_offset_;
  float missing_robot_detections_;
  friend struct ::TableStruct_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RealismConfigErForce

// optional float stddev_ball_p = 1;
inline bool RealismConfigErForce::_internal_has_stddev_ball_p() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_stddev_ball_p() const {
  return _internal_has_stddev_ball_p();
}
inline void RealismConfigErForce::clear_stddev_ball_p() {
  stddev_ball_p_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float RealismConfigErForce::_internal_stddev_ball_p() const {
  return stddev_ball_p_;
}
inline float RealismConfigErForce::stddev_ball_p() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.stddev_ball_p)
  return _internal_stddev_ball_p();
}
inline void RealismConfigErForce::_internal_set_stddev_ball_p(float value) {
  _has_bits_[0] |= 0x00000001u;
  stddev_ball_p_ = value;
}
inline void RealismConfigErForce::set_stddev_ball_p(float value) {
  _internal_set_stddev_ball_p(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.stddev_ball_p)
}

// optional float stddev_robot_p = 2;
inline bool RealismConfigErForce::_internal_has_stddev_robot_p() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_stddev_robot_p() const {
  return _internal_has_stddev_robot_p();
}
inline void RealismConfigErForce::clear_stddev_robot_p() {
  stddev_robot_p_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RealismConfigErForce::_internal_stddev_robot_p() const {
  return stddev_robot_p_;
}
inline float RealismConfigErForce::stddev_robot_p() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.stddev_robot_p)
  return _internal_stddev_robot_p();
}
inline void RealismConfigErForce::_internal_set_stddev_robot_p(float value) {
  _has_bits_[0] |= 0x00000002u;
  stddev_robot_p_ = value;
}
inline void RealismConfigErForce::set_stddev_robot_p(float value) {
  _internal_set_stddev_robot_p(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.stddev_robot_p)
}

// optional float stddev_robot_phi = 3;
inline bool RealismConfigErForce::_internal_has_stddev_robot_phi() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_stddev_robot_phi() const {
  return _internal_has_stddev_robot_phi();
}
inline void RealismConfigErForce::clear_stddev_robot_phi() {
  stddev_robot_phi_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RealismConfigErForce::_internal_stddev_robot_phi() const {
  return stddev_robot_phi_;
}
inline float RealismConfigErForce::stddev_robot_phi() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.stddev_robot_phi)
  return _internal_stddev_robot_phi();
}
inline void RealismConfigErForce::_internal_set_stddev_robot_phi(float value) {
  _has_bits_[0] |= 0x00000004u;
  stddev_robot_phi_ = value;
}
inline void RealismConfigErForce::set_stddev_robot_phi(float value) {
  _internal_set_stddev_robot_phi(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.stddev_robot_phi)
}

// optional float stddev_ball_area = 4;
inline bool RealismConfigErForce::_internal_has_stddev_ball_area() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_stddev_ball_area() const {
  return _internal_has_stddev_ball_area();
}
inline void RealismConfigErForce::clear_stddev_ball_area() {
  stddev_ball_area_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RealismConfigErForce::_internal_stddev_ball_area() const {
  return stddev_ball_area_;
}
inline float RealismConfigErForce::stddev_ball_area() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.stddev_ball_area)
  return _internal_stddev_ball_area();
}
inline void RealismConfigErForce::_internal_set_stddev_ball_area(float value) {
  _has_bits_[0] |= 0x00000008u;
  stddev_ball_area_ = value;
}
inline void RealismConfigErForce::set_stddev_ball_area(float value) {
  _internal_set_stddev_ball_area(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.stddev_ball_area)
}

// optional bool enable_invisible_ball = 5;
inline bool RealismConfigErForce::_internal_has_enable_invisible_ball() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_enable_invisible_ball() const {
  return _internal_has_enable_invisible_ball();
}
inline void RealismConfigErForce::clear_enable_invisible_ball() {
  enable_invisible_ball_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool RealismConfigErForce::_internal_enable_invisible_ball() const {
  return enable_invisible_ball_;
}
inline bool RealismConfigErForce::enable_invisible_ball() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.enable_invisible_ball)
  return _internal_enable_invisible_ball();
}
inline void RealismConfigErForce::_internal_set_enable_invisible_ball(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enable_invisible_ball_ = value;
}
inline void RealismConfigErForce::set_enable_invisible_ball(bool value) {
  _internal_set_enable_invisible_ball(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.enable_invisible_ball)
}

// optional float ball_visibility_threshold = 6;
inline bool RealismConfigErForce::_internal_has_ball_visibility_threshold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_ball_visibility_threshold() const {
  return _internal_has_ball_visibility_threshold();
}
inline void RealismConfigErForce::clear_ball_visibility_threshold() {
  ball_visibility_threshold_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RealismConfigErForce::_internal_ball_visibility_threshold() const {
  return ball_visibility_threshold_;
}
inline float RealismConfigErForce::ball_visibility_threshold() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.ball_visibility_threshold)
  return _internal_ball_visibility_threshold();
}
inline void RealismConfigErForce::_internal_set_ball_visibility_threshold(float value) {
  _has_bits_[0] |= 0x00000010u;
  ball_visibility_threshold_ = value;
}
inline void RealismConfigErForce::set_ball_visibility_threshold(float value) {
  _internal_set_ball_visibility_threshold(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.ball_visibility_threshold)
}

// optional float camera_overlap = 7;
inline bool RealismConfigErForce::_internal_has_camera_overlap() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_camera_overlap() const {
  return _internal_has_camera_overlap();
}
inline void RealismConfigErForce::clear_camera_overlap() {
  camera_overlap_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RealismConfigErForce::_internal_camera_overlap() const {
  return camera_overlap_;
}
inline float RealismConfigErForce::camera_overlap() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.camera_overlap)
  return _internal_camera_overlap();
}
inline void RealismConfigErForce::_internal_set_camera_overlap(float value) {
  _has_bits_[0] |= 0x00000020u;
  camera_overlap_ = value;
}
inline void RealismConfigErForce::set_camera_overlap(float value) {
  _internal_set_camera_overlap(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.camera_overlap)
}

// optional float dribbler_ball_detections = 8;
inline bool RealismConfigErForce::_internal_has_dribbler_ball_detections() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_dribbler_ball_detections() const {
  return _internal_has_dribbler_ball_detections();
}
inline void RealismConfigErForce::clear_dribbler_ball_detections() {
  dribbler_ball_detections_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RealismConfigErForce::_internal_dribbler_ball_detections() const {
  return dribbler_ball_detections_;
}
inline float RealismConfigErForce::dribbler_ball_detections() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.dribbler_ball_detections)
  return _internal_dribbler_ball_detections();
}
inline void RealismConfigErForce::_internal_set_dribbler_ball_detections(float value) {
  _has_bits_[0] |= 0x00000040u;
  dribbler_ball_detections_ = value;
}
inline void RealismConfigErForce::set_dribbler_ball_detections(float value) {
  _internal_set_dribbler_ball_detections(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.dribbler_ball_detections)
}

// optional float camera_position_error = 9;
inline bool RealismConfigErForce::_internal_has_camera_position_error() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_camera_position_error() const {
  return _internal_has_camera_position_error();
}
inline void RealismConfigErForce::clear_camera_position_error() {
  camera_position_error_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float RealismConfigErForce::_internal_camera_position_error() const {
  return camera_position_error_;
}
inline float RealismConfigErForce::camera_position_error() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.camera_position_error)
  return _internal_camera_position_error();
}
inline void RealismConfigErForce::_internal_set_camera_position_error(float value) {
  _has_bits_[0] |= 0x00000080u;
  camera_position_error_ = value;
}
inline void RealismConfigErForce::set_camera_position_error(float value) {
  _internal_set_camera_position_error(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.camera_position_error)
}

// optional float robot_command_loss = 10;
inline bool RealismConfigErForce::_internal_has_robot_command_loss() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_robot_command_loss() const {
  return _internal_has_robot_command_loss();
}
inline void RealismConfigErForce::clear_robot_command_loss() {
  robot_command_loss_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RealismConfigErForce::_internal_robot_command_loss() const {
  return robot_command_loss_;
}
inline float RealismConfigErForce::robot_command_loss() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.robot_command_loss)
  return _internal_robot_command_loss();
}
inline void RealismConfigErForce::_internal_set_robot_command_loss(float value) {
  _has_bits_[0] |= 0x00000100u;
  robot_command_loss_ = value;
}
inline void RealismConfigErForce::set_robot_command_loss(float value) {
  _internal_set_robot_command_loss(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.robot_command_loss)
}

// optional float robot_response_loss = 11;
inline bool RealismConfigErForce::_internal_has_robot_response_loss() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_robot_response_loss() const {
  return _internal_has_robot_response_loss();
}
inline void RealismConfigErForce::clear_robot_response_loss() {
  robot_response_loss_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float RealismConfigErForce::_internal_robot_response_loss() const {
  return robot_response_loss_;
}
inline float RealismConfigErForce::robot_response_loss() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.robot_response_loss)
  return _internal_robot_response_loss();
}
inline void RealismConfigErForce::_internal_set_robot_response_loss(float value) {
  _has_bits_[0] |= 0x00000800u;
  robot_response_loss_ = value;
}
inline void RealismConfigErForce::set_robot_response_loss(float value) {
  _internal_set_robot_response_loss(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.robot_response_loss)
}

// optional float missing_ball_detections = 12;
inline bool RealismConfigErForce::_internal_has_missing_ball_detections() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_missing_ball_detections() const {
  return _internal_has_missing_ball_detections();
}
inline void RealismConfigErForce::clear_missing_ball_detections() {
  missing_ball_detections_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float RealismConfigErForce::_internal_missing_ball_detections() const {
  return missing_ball_detections_;
}
inline float RealismConfigErForce::missing_ball_detections() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.missing_ball_detections)
  return _internal_missing_ball_detections();
}
inline void RealismConfigErForce::_internal_set_missing_ball_detections(float value) {
  _has_bits_[0] |= 0x00001000u;
  missing_ball_detections_ = value;
}
inline void RealismConfigErForce::set_missing_ball_detections(float value) {
  _internal_set_missing_ball_detections(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.missing_ball_detections)
}

// optional int64 vision_delay = 13;
inline bool RealismConfigErForce::_internal_has_vision_delay() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_vision_delay() const {
  return _internal_has_vision_delay();
}
inline void RealismConfigErForce::clear_vision_delay() {
  vision_delay_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealismConfigErForce::_internal_vision_delay() const {
  return vision_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealismConfigErForce::vision_delay() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.vision_delay)
  return _internal_vision_delay();
}
inline void RealismConfigErForce::_internal_set_vision_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  vision_delay_ = value;
}
inline void RealismConfigErForce::set_vision_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vision_delay(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.vision_delay)
}

// optional int64 vision_processing_time = 14;
inline bool RealismConfigErForce::_internal_has_vision_processing_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_vision_processing_time() const {
  return _internal_has_vision_processing_time();
}
inline void RealismConfigErForce::clear_vision_processing_time() {
  vision_processing_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealismConfigErForce::_internal_vision_processing_time() const {
  return vision_processing_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealismConfigErForce::vision_processing_time() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.vision_processing_time)
  return _internal_vision_processing_time();
}
inline void RealismConfigErForce::_internal_set_vision_processing_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  vision_processing_time_ = value;
}
inline void RealismConfigErForce::set_vision_processing_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vision_processing_time(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.vision_processing_time)
}

// optional bool simulate_dribbling = 15;
inline bool RealismConfigErForce::_internal_has_simulate_dribbling() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_simulate_dribbling() const {
  return _internal_has_simulate_dribbling();
}
inline void RealismConfigErForce::clear_simulate_dribbling() {
  simulate_dribbling_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool RealismConfigErForce::_internal_simulate_dribbling() const {
  return simulate_dribbling_;
}
inline bool RealismConfigErForce::simulate_dribbling() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.simulate_dribbling)
  return _internal_simulate_dribbling();
}
inline void RealismConfigErForce::_internal_set_simulate_dribbling(bool value) {
  _has_bits_[0] |= 0x00000400u;
  simulate_dribbling_ = value;
}
inline void RealismConfigErForce::set_simulate_dribbling(bool value) {
  _internal_set_simulate_dribbling(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.simulate_dribbling)
}

// optional float object_position_offset = 16;
inline bool RealismConfigErForce::_internal_has_object_position_offset() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_object_position_offset() const {
  return _internal_has_object_position_offset();
}
inline void RealismConfigErForce::clear_object_position_offset() {
  object_position_offset_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float RealismConfigErForce::_internal_object_position_offset() const {
  return object_position_offset_;
}
inline float RealismConfigErForce::object_position_offset() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.object_position_offset)
  return _internal_object_position_offset();
}
inline void RealismConfigErForce::_internal_set_object_position_offset(float value) {
  _has_bits_[0] |= 0x00008000u;
  object_position_offset_ = value;
}
inline void RealismConfigErForce::set_object_position_offset(float value) {
  _internal_set_object_position_offset(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.object_position_offset)
}

// optional float missing_robot_detections = 17;
inline bool RealismConfigErForce::_internal_has_missing_robot_detections() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RealismConfigErForce::has_missing_robot_detections() const {
  return _internal_has_missing_robot_detections();
}
inline void RealismConfigErForce::clear_missing_robot_detections() {
  missing_robot_detections_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float RealismConfigErForce::_internal_missing_robot_detections() const {
  return missing_robot_detections_;
}
inline float RealismConfigErForce::missing_robot_detections() const {
  // @@protoc_insertion_point(field_get:RealismConfigErForce.missing_robot_detections)
  return _internal_missing_robot_detections();
}
inline void RealismConfigErForce::_internal_set_missing_robot_detections(float value) {
  _has_bits_[0] |= 0x00010000u;
  missing_robot_detections_ = value;
}
inline void RealismConfigErForce::set_missing_robot_detections(float value) {
  _internal_set_missing_robot_detections(value);
  // @@protoc_insertion_point(field_set:RealismConfigErForce.missing_robot_detections)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto
