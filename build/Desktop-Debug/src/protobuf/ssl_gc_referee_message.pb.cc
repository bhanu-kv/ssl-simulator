// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_referee_message.proto

#include "ssl_gc_referee_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<40> scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5freferee_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5freferee_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5freferee_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto;
class Referee_TeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Referee_TeamInfo> _instance;
} _Referee_TeamInfo_default_instance_;
class Referee_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Referee_Point> _instance;
} _Referee_Point_default_instance_;
class RefereeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Referee> _instance;
} _Referee_default_instance_;
class GameEventProposalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEventProposalGroup> _instance;
} _GameEventProposalGroup_default_instance_;
static void InitDefaultsscc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEventProposalGroup_default_instance_;
    new (ptr) ::GameEventProposalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEventProposalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto}, {
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_default_instance_;
    new (ptr) ::Referee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto}, {
      &scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto.base,
      &scc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto.base,
      &scc_info_GameEvent_ssl_5fgc_5fgame_5fevent_2eproto.base,
      &scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_Point_default_instance_;
    new (ptr) ::Referee_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Referee_TeamInfo_default_instance_;
    new (ptr) ::Referee_TeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Referee_TeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, score_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, red_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, yellow_card_times_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, yellow_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, timeouts_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, timeout_time_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, goalkeeper_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, foul_counter_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, ball_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, can_place_ball_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, max_allowed_bots_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, bot_substitution_intent_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, ball_placement_failures_reached_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, bot_substitution_allowed_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, bot_substitutions_left_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, bot_substitution_time_left_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Referee_Point, x_),
  PROTOBUF_FIELD_OFFSET(::Referee_Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Referee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Referee, source_identifier_),
  PROTOBUF_FIELD_OFFSET(::Referee, match_type_),
  PROTOBUF_FIELD_OFFSET(::Referee, packet_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Referee, stage_),
  PROTOBUF_FIELD_OFFSET(::Referee, stage_time_left_),
  PROTOBUF_FIELD_OFFSET(::Referee, command_),
  PROTOBUF_FIELD_OFFSET(::Referee, command_counter_),
  PROTOBUF_FIELD_OFFSET(::Referee, command_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Referee, yellow_),
  PROTOBUF_FIELD_OFFSET(::Referee, blue_),
  PROTOBUF_FIELD_OFFSET(::Referee, designated_position_),
  PROTOBUF_FIELD_OFFSET(::Referee, blue_team_on_positive_half_),
  PROTOBUF_FIELD_OFFSET(::Referee, next_command_),
  PROTOBUF_FIELD_OFFSET(::Referee, game_events_),
  PROTOBUF_FIELD_OFFSET(::Referee, game_event_proposals_),
  PROTOBUF_FIELD_OFFSET(::Referee, current_action_time_remaining_),
  PROTOBUF_FIELD_OFFSET(::Referee, status_message_),
  0,
  14,
  5,
  7,
  6,
  8,
  10,
  9,
  2,
  3,
  4,
  11,
  13,
  ~0u,
  ~0u,
  12,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, id_),
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, game_events_),
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, accepted_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::Referee_TeamInfo)},
  { 39, 46, sizeof(::Referee_Point)},
  { 48, 70, sizeof(::Referee)},
  { 87, 95, sizeof(::GameEventProposalGroup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Referee_TeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Referee_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Referee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameEventProposalGroup_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ssl_gc_referee_message.proto\032\027ssl_gc_g"
  "ame_event.proto\"\265\016\n\007Referee\022\031\n\021source_id"
  "entifier\030\022 \001(\t\022-\n\nmatch_type\030\023 \001(\0162\n.Mat"
  "chType:\rUNKNOWN_MATCH\022\030\n\020packet_timestam"
  "p\030\001 \002(\004\022\035\n\005stage\030\002 \002(\0162\016.Referee.Stage\022\027"
  "\n\017stage_time_left\030\003 \001(\022\022!\n\007command\030\004 \002(\016"
  "2\020.Referee.Command\022\027\n\017command_counter\030\005 "
  "\002(\r\022\031\n\021command_timestamp\030\006 \002(\004\022!\n\006yellow"
  "\030\007 \002(\0132\021.Referee.TeamInfo\022\037\n\004blue\030\010 \002(\0132"
  "\021.Referee.TeamInfo\022+\n\023designated_positio"
  "n\030\t \001(\0132\016.Referee.Point\022\"\n\032blue_team_on_"
  "positive_half\030\n \001(\010\022&\n\014next_command\030\014 \001("
  "\0162\020.Referee.Command\022\037\n\013game_events\030\020 \003(\013"
  "2\n.GameEvent\0225\n\024game_event_proposals\030\021 \003"
  "(\0132\027.GameEventProposalGroup\022%\n\035current_a"
  "ction_time_remaining\030\017 \001(\003\022\026\n\016status_mes"
  "sage\030\024 \001(\t\032\304\003\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n"
  "\005score\030\002 \002(\r\022\021\n\tred_cards\030\003 \002(\r\022\035\n\021yello"
  "w_card_times\030\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005"
  " \002(\r\022\020\n\010timeouts\030\006 \002(\r\022\024\n\014timeout_time\030\007"
  " \002(\r\022\022\n\ngoalkeeper\030\010 \002(\r\022\024\n\014foul_counter"
  "\030\t \001(\r\022\037\n\027ball_placement_failures\030\n \001(\r\022"
  "\026\n\016can_place_ball\030\014 \001(\010\022\030\n\020max_allowed_b"
  "ots\030\r \001(\r\022\037\n\027bot_substitution_intent\030\016 \001"
  "(\010\022\'\n\037ball_placement_failures_reached\030\017 "
  "\001(\010\022 \n\030bot_substitution_allowed\030\020 \001(\010\022\036\n"
  "\026bot_substitutions_left\030\021 \001(\r\022\"\n\032bot_sub"
  "stitution_time_left\030\022 \001(\r\032\035\n\005Point\022\t\n\001x\030"
  "\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL_FIR"
  "ST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024\n\020"
  "NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HALF"
  "_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTRA_"
  "TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006\022\024"
  "\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIME\020"
  "\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_SE"
  "COND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020\013\022"
  "\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\226\003\n"
  "\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL_S"
  "TART\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KICKO"
  "FF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022\032\n"
  "\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_PEN"
  "ALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n\020D"
  "IRECT_FREE_BLUE\020\t\022\034\n\024INDIRECT_FREE_YELLO"
  "W\020\n\032\002\010\001\022\032\n\022INDIRECT_FREE_BLUE\020\013\032\002\010\001\022\022\n\016T"
  "IMEOUT_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOA"
  "L_YELLOW\020\016\032\002\010\001\022\021\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BAL"
  "L_PLACEMENT_YELLOW\020\020\022\027\n\023BALL_PLACEMENT_B"
  "LUE\020\021J\004\010\013\020\014J\004\010\r\020\016J\004\010\016\020\017\"W\n\026GameEventProp"
  "osalGroup\022\n\n\002id\030\003 \001(\t\022\037\n\013game_events\030\001 \003"
  "(\0132\n.GameEvent\022\020\n\010accepted\030\002 \001(\010*T\n\tMatc"
  "hType\022\021\n\rUNKNOWN_MATCH\020\000\022\017\n\013GROUP_PHASE\020"
  "\001\022\025\n\021ELIMINATION_PHASE\020\002\022\014\n\010FRIENDLY\020\003B\?"
  "Z=github.com/RoboCup-SSL/ssl-game-contro"
  "ller/internal/app/state"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_sccs[4] = {
  &scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto.base,
  &scc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto.base,
  &scc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto.base,
  &scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto, "ssl_gc_referee_message.proto", 2143,
  &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once, descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_sccs, descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto, 4, file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto, file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5freferee_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Stage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[0];
}
bool Referee_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Referee_Stage Referee::NORMAL_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_FIRST_HALF;
constexpr Referee_Stage Referee::NORMAL_HALF_TIME;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF;
constexpr Referee_Stage Referee::EXTRA_TIME_BREAK;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF;
constexpr Referee_Stage Referee::EXTRA_HALF_TIME;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT_BREAK;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT;
constexpr Referee_Stage Referee::POST_GAME;
constexpr Referee_Stage Referee::Stage_MIN;
constexpr Referee_Stage Referee::Stage_MAX;
constexpr int Referee::Stage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[1];
}
bool Referee_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Referee_Command Referee::HALT;
constexpr Referee_Command Referee::STOP;
constexpr Referee_Command Referee::NORMAL_START;
constexpr Referee_Command Referee::FORCE_START;
constexpr Referee_Command Referee::PREPARE_KICKOFF_YELLOW;
constexpr Referee_Command Referee::PREPARE_KICKOFF_BLUE;
constexpr Referee_Command Referee::PREPARE_PENALTY_YELLOW;
constexpr Referee_Command Referee::PREPARE_PENALTY_BLUE;
constexpr Referee_Command Referee::DIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::DIRECT_FREE_BLUE;
constexpr Referee_Command Referee::INDIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::INDIRECT_FREE_BLUE;
constexpr Referee_Command Referee::TIMEOUT_YELLOW;
constexpr Referee_Command Referee::TIMEOUT_BLUE;
constexpr Referee_Command Referee::GOAL_YELLOW;
constexpr Referee_Command Referee::GOAL_BLUE;
constexpr Referee_Command Referee::BALL_PLACEMENT_YELLOW;
constexpr Referee_Command Referee::BALL_PLACEMENT_BLUE;
constexpr Referee_Command Referee::Command_MIN;
constexpr Referee_Command Referee::Command_MAX;
constexpr int Referee::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[2];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Referee_TeamInfo::InitAsDefaultInstance() {
}
class Referee_TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee_TeamInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_red_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yellow_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeouts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goalkeeper(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_foul_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ball_placement_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_place_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_allowed_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bot_substitution_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ball_placement_failures_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bot_substitution_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bot_substitutions_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bot_substitution_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Referee_TeamInfo::Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  yellow_card_times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee.TeamInfo)
}
Referee_TeamInfo::Referee_TeamInfo(const Referee_TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      yellow_card_times_(from.yellow_card_times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_substitution_time_left_) -
    reinterpret_cast<char*>(&score_)) + sizeof(bot_substitution_time_left_));
  // @@protoc_insertion_point(copy_constructor:Referee.TeamInfo)
}

void Referee_TeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_substitution_time_left_) -
      reinterpret_cast<char*>(&score_)) + sizeof(bot_substitution_time_left_));
}

Referee_TeamInfo::~Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:Referee.TeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Referee_TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Referee_TeamInfo::ArenaDtor(void* object) {
  Referee_TeamInfo* _this = reinterpret_cast< Referee_TeamInfo* >(object);
  (void)_this;
}
void Referee_TeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Referee_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Referee_TeamInfo& Referee_TeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Referee_TeamInfo_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_card_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foul_counter_) -
        reinterpret_cast<char*>(&score_)) + sizeof(foul_counter_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ball_placement_failures_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_substitution_time_left_) -
        reinterpret_cast<char*>(&ball_placement_failures_)) + sizeof(bot_substitution_time_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee_TeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Referee.TeamInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 red_cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_red_cards(&has_bits);
          red_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_yellow_card_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 yellow_cards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_yellow_cards(&has_bits);
          yellow_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeouts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeouts(&has_bits);
          timeouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeout_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_timeout_time(&has_bits);
          timeout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 goalkeeper = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_goalkeeper(&has_bits);
          goalkeeper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 foul_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_foul_counter(&has_bits);
          foul_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ball_placement_failures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ball_placement_failures(&has_bits);
          ball_placement_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_place_ball = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_place_ball(&has_bits);
          can_place_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_allowed_bots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_allowed_bots(&has_bits);
          max_allowed_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bot_substitution_intent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_bot_substitution_intent(&has_bits);
          bot_substitution_intent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ball_placement_failures_reached = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ball_placement_failures_reached(&has_bits);
          ball_placement_failures_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bot_substitution_allowed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bot_substitution_allowed(&has_bits);
          bot_substitution_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_substitutions_left = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_bot_substitutions_left(&has_bits);
          bot_substitutions_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_substitution_time_left = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bot_substitution_time_left(&has_bits);
          bot_substitution_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Referee_TeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    int byte_size = _yellow_card_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_yellow_card_times(), byte_size, target);
    }
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timeout_time(), target);
  }

  // required uint32 goalkeeper = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_goalkeeper(), target);
  }

  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_foul_counter(), target);
  }

  // optional uint32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_can_place_ball(), target);
  }

  // optional uint32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_allowed_bots(), target);
  }

  // optional bool bot_substitution_intent = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_bot_substitution_intent(), target);
  }

  // optional bool ball_placement_failures_reached = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_ball_placement_failures_reached(), target);
  }

  // optional bool bot_substitution_allowed = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_bot_substitution_allowed(), target);
  }

  // optional uint32 bot_substitutions_left = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_bot_substitutions_left(), target);
  }

  // optional uint32 bot_substitution_time_left = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_bot_substitution_time_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.TeamInfo)
  return target;
}

size_t Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_score()) {
    // required uint32 score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  if (_internal_has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red_cards());
  }

  if (_internal_has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_cards());
  }

  if (_internal_has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeouts());
  }

  if (_internal_has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_time());
  }

  if (_internal_has_goalkeeper()) {
    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_goalkeeper());
  }

  return total_size;
}
size_t Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());

    // required uint32 red_cards = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red_cards());

    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_cards());

    // required uint32 timeouts = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeouts());

    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_time());

    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_goalkeeper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->yellow_card_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _yellow_card_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 foul_counter = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_foul_counter());
  }

  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 ball_placement_failures = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ball_placement_failures());
    }

    // optional uint32 max_allowed_bots = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_allowed_bots());
    }

    // optional bool can_place_ball = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_intent = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool ball_placement_failures_reached = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_allowed = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 bot_substitutions_left = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_substitutions_left());
    }

    // optional uint32 bot_substitution_time_left = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_substitution_time_left());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee_TeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee_TeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Referee_TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.TeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.TeamInfo)
    MergeFrom(*source);
  }
}

void Referee_TeamInfo::MergeFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_card_times_.MergeFrom(from.yellow_card_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      red_cards_ = from.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      yellow_cards_ = from.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeouts_ = from.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_time_ = from.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      goalkeeper_ = from.goalkeeper_;
    }
    if (cached_has_bits & 0x00000080u) {
      foul_counter_ = from.foul_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ball_placement_failures_ = from.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_allowed_bots_ = from.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_place_ball_ = from.can_place_ball_;
    }
    if (cached_has_bits & 0x00000800u) {
      bot_substitution_intent_ = from.bot_substitution_intent_;
    }
    if (cached_has_bits & 0x00001000u) {
      ball_placement_failures_reached_ = from.ball_placement_failures_reached_;
    }
    if (cached_has_bits & 0x00002000u) {
      bot_substitution_allowed_ = from.bot_substitution_allowed_;
    }
    if (cached_has_bits & 0x00004000u) {
      bot_substitutions_left_ = from.bot_substitutions_left_;
    }
    if (cached_has_bits & 0x00008000u) {
      bot_substitution_time_left_ = from.bot_substitution_time_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee_TeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_TeamInfo::CopyFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_TeamInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Referee_TeamInfo::InternalSwap(Referee_TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yellow_card_times_.InternalSwap(&other->yellow_card_times_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, bot_substitution_time_left_)
      + sizeof(Referee_TeamInfo::bot_substitution_time_left_)
      - PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee_TeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Referee_Point::InitAsDefaultInstance() {
}
class Referee_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee_Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Referee_Point::Referee_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee.Point)
}
Referee_Point::Referee_Point(const Referee_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Referee.Point)
}

void Referee_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Referee_Point::~Referee_Point() {
  // @@protoc_insertion_point(destructor:Referee.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Referee_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Referee_Point::ArenaDtor(void* object) {
  Referee_Point* _this = reinterpret_cast< Referee_Point* >(object);
  (void)_this;
}
void Referee_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Referee_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Referee_Point& Referee_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Referee_Point_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Referee_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.Point)
  return target;
}

size_t Referee_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Referee_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.Point)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Referee_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.Point)
    MergeFrom(*source);
  }
}

void Referee_Point::MergeFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_Point::CopyFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Referee_Point::InternalSwap(Referee_Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_Point, y_)
      + sizeof(Referee_Point::y_)
      - PROTOBUF_FIELD_OFFSET(Referee_Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Referee::InitAsDefaultInstance() {
  ::_Referee_default_instance_._instance.get_mutable()->yellow_ = const_cast< ::Referee_TeamInfo*>(
      ::Referee_TeamInfo::internal_default_instance());
  ::_Referee_default_instance_._instance.get_mutable()->blue_ = const_cast< ::Referee_TeamInfo*>(
      ::Referee_TeamInfo::internal_default_instance());
  ::_Referee_default_instance_._instance.get_mutable()->designated_position_ = const_cast< ::Referee_Point*>(
      ::Referee_Point::internal_default_instance());
}
class Referee::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee>()._has_bits_);
  static void set_has_source_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_packet_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stage_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_command_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Referee_TeamInfo& yellow(const Referee* msg);
  static void set_has_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Referee_TeamInfo& blue(const Referee* msg);
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Referee_Point& designated_position(const Referee* msg);
  static void set_has_designated_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blue_team_on_positive_half(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_next_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_current_action_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_status_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ac) ^ 0x000007ac) != 0;
  }
};

const ::Referee_TeamInfo&
Referee::_Internal::yellow(const Referee* msg) {
  return *msg->yellow_;
}
const ::Referee_TeamInfo&
Referee::_Internal::blue(const Referee* msg) {
  return *msg->blue_;
}
const ::Referee_Point&
Referee::_Internal::designated_position(const Referee* msg) {
  return *msg->designated_position_;
}
void Referee::clear_game_events() {
  game_events_.Clear();
}
Referee::Referee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_events_(arena),
  game_event_proposals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee)
}
Referee::Referee(const Referee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_events_(from.game_events_),
      game_event_proposals_(from.game_event_proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_identifier()) {
    source_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_identifier(),
      GetArena());
  }
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status_message()) {
    status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status_message(),
      GetArena());
  }
  if (from._internal_has_yellow()) {
    yellow_ = new ::Referee_TeamInfo(*from.yellow_);
  } else {
    yellow_ = nullptr;
  }
  if (from._internal_has_blue()) {
    blue_ = new ::Referee_TeamInfo(*from.blue_);
  } else {
    blue_ = nullptr;
  }
  if (from._internal_has_designated_position()) {
    designated_position_ = new ::Referee_Point(*from.designated_position_);
  } else {
    designated_position_ = nullptr;
  }
  ::memcpy(&packet_timestamp_, &from.packet_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:Referee)
}

void Referee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  source_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&yellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&yellow_)) + sizeof(match_type_));
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:Referee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Referee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete yellow_;
  if (this != internal_default_instance()) delete blue_;
  if (this != internal_default_instance()) delete designated_position_;
}

void Referee::ArenaDtor(void* object) {
  Referee* _this = reinterpret_cast< Referee* >(object);
  (void)_this;
}
void Referee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Referee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Referee& Referee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Referee_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_events_.Clear();
  game_event_proposals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      status_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(yellow_ != nullptr);
      yellow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(blue_ != nullptr);
      blue_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(designated_position_ != nullptr);
      designated_position_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&packet_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stage_) -
        reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(stage_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_type_) -
        reinterpret_cast<char*>(&command_)) + sizeof(match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 packet_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packet_timestamp(&has_bits);
          packet_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Referee.Stage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint64 stage_time_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stage_time_left(&has_bits);
          stage_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Referee.Command command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Command_IsValid(val))) {
            _internal_set_command(static_cast<::Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 command_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_command_counter(&has_bits);
          command_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 command_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_command_timestamp(&has_bits);
          command_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Referee.TeamInfo yellow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Referee.TeamInfo blue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Referee.Point designated_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_designated_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blue_team_on_positive_half = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_blue_team_on_positive_half(&has_bits);
          blue_team_on_positive_half_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Referee.Command next_command = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Command_IsValid(val))) {
            _internal_set_next_command(static_cast<::Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 current_action_time_remaining = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_current_action_time_remaining(&has_bits);
          current_action_time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameEvent game_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GameEventProposalGroup game_event_proposals = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_event_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string source_identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_source_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Referee.source_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string status_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_status_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Referee.status_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Referee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packet_timestamp(), target);
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // optional sint64 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_stage_time_left(), target);
  }

  // required .Referee.Command command = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_command_timestamp(), target);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::yellow(this), target, stream);
  }

  // required .Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::blue(this), target, stream);
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::designated_position(this), target, stream);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_blue_team_on_positive_half(), target);
  }

  // optional .Referee.Command next_command = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_next_command(), target);
  }

  // optional int64 current_action_time_remaining = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_current_action_time_remaining(), target);
  }

  // repeated .GameEvent game_events = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_game_events(i), target, stream);
  }

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_event_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_game_event_proposals(i), target, stream);
  }

  // optional string source_identifier = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_identifier().data(), static_cast<int>(this->_internal_source_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Referee.source_identifier");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_source_identifier(), target);
  }

  // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_match_type(), target);
  }

  // optional string status_message = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Referee.status_message");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_status_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee)
  return target;
}

size_t Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee)
  size_t total_size = 0;

  if (_internal_has_yellow()) {
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yellow_);
  }

  if (_internal_has_blue()) {
    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  if (_internal_has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_packet_timestamp());
  }

  if (_internal_has_stage()) {
    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (_internal_has_command()) {
    // required .Referee.Command command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (_internal_has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_command_timestamp());
  }

  if (_internal_has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_counter());
  }

  return total_size;
}
size_t Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ac) ^ 0x000007ac) == 0) {  // All required fields are present.
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yellow_);

    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);

    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_packet_timestamp());

    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());

    // required .Referee.Command command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());

    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_command_timestamp());

    // required uint32 command_counter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_counter());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent game_events = 16;
  total_size += 2UL * this->_internal_game_events_size();
  for (const auto& msg : this->game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  total_size += 2UL * this->_internal_game_event_proposals_size();
  for (const auto& msg : this->game_event_proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_identifier = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_identifier());
    }

    // optional string status_message = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_message());
    }

  }
  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *designated_position_);
  }

  // optional sint64 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_stage_time_left());
  }

  if (cached_has_bits & 0x00007800u) {
    // optional bool blue_team_on_positive_half = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int64 current_action_time_remaining = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_current_action_time_remaining());
    }

    // optional .Referee.Command next_command = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_command());
    }

    // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Referee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee)
  GOOGLE_DCHECK_NE(&from, this);
  const Referee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Referee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee)
    MergeFrom(*source);
  }
}

void Referee::MergeFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_events_.MergeFrom(from.game_events_);
  game_event_proposals_.MergeFrom(from.game_event_proposals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_identifier(from._internal_source_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_status_message(from._internal_status_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_yellow()->::Referee_TeamInfo::MergeFrom(from._internal_yellow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_blue()->::Referee_TeamInfo::MergeFrom(from._internal_blue());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_designated_position()->::Referee_Point::MergeFrom(from._internal_designated_position());
    }
    if (cached_has_bits & 0x00000020u) {
      packet_timestamp_ = from.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      stage_time_left_ = from.stage_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      stage_ = from.stage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_timestamp_ = from.command_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      command_counter_ = from.command_counter_;
    }
    if (cached_has_bits & 0x00000800u) {
      blue_team_on_positive_half_ = from.blue_team_on_positive_half_;
    }
    if (cached_has_bits & 0x00001000u) {
      current_action_time_remaining_ = from.current_action_time_remaining_;
    }
    if (cached_has_bits & 0x00002000u) {
      next_command_ = from.next_command_;
    }
    if (cached_has_bits & 0x00004000u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Referee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_events_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_event_proposals_)) return false;
  if (_internal_has_yellow()) {
    if (!yellow_->IsInitialized()) return false;
  }
  if (_internal_has_blue()) {
    if (!blue_->IsInitialized()) return false;
  }
  if (_internal_has_designated_position()) {
    if (!designated_position_->IsInitialized()) return false;
  }
  return true;
}

void Referee::InternalSwap(Referee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_events_.InternalSwap(&other->game_events_);
  game_event_proposals_.InternalSwap(&other->game_event_proposals_);
  source_identifier_.Swap(&other->source_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_message_.Swap(&other->status_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee, match_type_)
      + sizeof(Referee::match_type_)
      - PROTOBUF_FIELD_OFFSET(Referee, yellow_)>(
          reinterpret_cast<char*>(&yellow_),
          reinterpret_cast<char*>(&other->yellow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEventProposalGroup::InitAsDefaultInstance() {
}
class GameEventProposalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEventProposalGroup>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void GameEventProposalGroup::clear_game_events() {
  game_events_.Clear();
}
GameEventProposalGroup::GameEventProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEventProposalGroup)
}
GameEventProposalGroup::GameEventProposalGroup(const GameEventProposalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_events_(from.game_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  accepted_ = from.accepted_;
  // @@protoc_insertion_point(copy_constructor:GameEventProposalGroup)
}

void GameEventProposalGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accepted_ = false;
}

GameEventProposalGroup::~GameEventProposalGroup() {
  // @@protoc_insertion_point(destructor:GameEventProposalGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEventProposalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameEventProposalGroup::ArenaDtor(void* object) {
  GameEventProposalGroup* _this = reinterpret_cast< GameEventProposalGroup* >(object);
  (void)_this;
}
void GameEventProposalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEventProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEventProposalGroup& GameEventProposalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEventProposalGroup_ssl_5fgc_5freferee_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void GameEventProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEventProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  accepted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEventProposalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GameEvent game_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool accepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accepted(&has_bits);
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameEventProposalGroup.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEventProposalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEventProposalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameEvent game_events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_game_events(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accepted(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEventProposalGroup.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEventProposalGroup)
  return target;
}

size_t GameEventProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEventProposalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent game_events = 1;
  total_size += 1UL * this->_internal_game_events_size();
  for (const auto& msg : this->game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional bool accepted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEventProposalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEventProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEventProposalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEventProposalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEventProposalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEventProposalGroup)
    MergeFrom(*source);
  }
}

void GameEventProposalGroup::MergeFrom(const GameEventProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEventProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_events_.MergeFrom(from.game_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      accepted_ = from.accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEventProposalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEventProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEventProposalGroup::CopyFrom(const GameEventProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEventProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEventProposalGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_events_)) return false;
  return true;
}

void GameEventProposalGroup::InternalSwap(GameEventProposalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_events_.InternalSwap(&other->game_events_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accepted_, other->accepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEventProposalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Referee_TeamInfo* Arena::CreateMaybeMessage< ::Referee_TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Referee_Point* Arena::CreateMaybeMessage< ::Referee_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::Referee* Arena::CreateMaybeMessage< ::Referee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEventProposalGroup* Arena::CreateMaybeMessage< ::GameEventProposalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEventProposalGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
