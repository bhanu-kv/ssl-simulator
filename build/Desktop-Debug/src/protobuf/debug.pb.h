// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_debug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_debug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_debug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_debug_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_debug_2eproto;
namespace amun {
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class DebugValue;
class DebugValueDefaultTypeInternal;
extern DebugValueDefaultTypeInternal _DebugValue_default_instance_;
class DebugValues;
class DebugValuesDefaultTypeInternal;
extern DebugValuesDefaultTypeInternal _DebugValues_default_instance_;
class DebuggerOutput;
class DebuggerOutputDefaultTypeInternal;
extern DebuggerOutputDefaultTypeInternal _DebuggerOutput_default_instance_;
class ImageVisualization;
class ImageVisualizationDefaultTypeInternal;
extern ImageVisualizationDefaultTypeInternal _ImageVisualization_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Pen;
class PenDefaultTypeInternal;
extern PenDefaultTypeInternal _Pen_default_instance_;
class PlotValue;
class PlotValueDefaultTypeInternal;
extern PlotValueDefaultTypeInternal _PlotValue_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class RobotValue;
class RobotValueDefaultTypeInternal;
extern RobotValueDefaultTypeInternal _RobotValue_default_instance_;
class StatusLog;
class StatusLogDefaultTypeInternal;
extern StatusLogDefaultTypeInternal _StatusLog_default_instance_;
class Visualization;
class VisualizationDefaultTypeInternal;
extern VisualizationDefaultTypeInternal _Visualization_default_instance_;
}  // namespace amun
PROTOBUF_NAMESPACE_OPEN
template<> ::amun::Circle* Arena::CreateMaybeMessage<::amun::Circle>(Arena*);
template<> ::amun::Color* Arena::CreateMaybeMessage<::amun::Color>(Arena*);
template<> ::amun::DebugValue* Arena::CreateMaybeMessage<::amun::DebugValue>(Arena*);
template<> ::amun::DebugValues* Arena::CreateMaybeMessage<::amun::DebugValues>(Arena*);
template<> ::amun::DebuggerOutput* Arena::CreateMaybeMessage<::amun::DebuggerOutput>(Arena*);
template<> ::amun::ImageVisualization* Arena::CreateMaybeMessage<::amun::ImageVisualization>(Arena*);
template<> ::amun::Path* Arena::CreateMaybeMessage<::amun::Path>(Arena*);
template<> ::amun::Pen* Arena::CreateMaybeMessage<::amun::Pen>(Arena*);
template<> ::amun::PlotValue* Arena::CreateMaybeMessage<::amun::PlotValue>(Arena*);
template<> ::amun::Point* Arena::CreateMaybeMessage<::amun::Point>(Arena*);
template<> ::amun::Polygon* Arena::CreateMaybeMessage<::amun::Polygon>(Arena*);
template<> ::amun::Rectangle* Arena::CreateMaybeMessage<::amun::Rectangle>(Arena*);
template<> ::amun::RobotValue* Arena::CreateMaybeMessage<::amun::RobotValue>(Arena*);
template<> ::amun::StatusLog* Arena::CreateMaybeMessage<::amun::StatusLog>(Arena*);
template<> ::amun::Visualization* Arena::CreateMaybeMessage<::amun::Visualization>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amun {

enum Pen_Style : int {
  Pen_Style_DashLine = 1,
  Pen_Style_DotLine = 2,
  Pen_Style_DashDotLine = 3,
  Pen_Style_DashDotDotLine = 4
};
bool Pen_Style_IsValid(int value);
constexpr Pen_Style Pen_Style_Style_MIN = Pen_Style_DashLine;
constexpr Pen_Style Pen_Style_Style_MAX = Pen_Style_DashDotDotLine;
constexpr int Pen_Style_Style_ARRAYSIZE = Pen_Style_Style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pen_Style_descriptor();
template<typename T>
inline const std::string& Pen_Style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pen_Style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pen_Style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pen_Style_descriptor(), enum_t_value);
}
inline bool Pen_Style_Parse(
    const std::string& name, Pen_Style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pen_Style>(
    Pen_Style_descriptor(), name, value);
}
enum DebugSource : int {
  StrategyBlue = 1,
  StrategyYellow = 2,
  Controller = 3,
  Autoref = 4,
  Tracking = 5,
  RadioResponse = 6,
  ReplayBlue = 7,
  ReplayYellow = 8,
  NetworkTransceiver = 9,
  GameController = 10
};
bool DebugSource_IsValid(int value);
constexpr DebugSource DebugSource_MIN = StrategyBlue;
constexpr DebugSource DebugSource_MAX = GameController;
constexpr int DebugSource_ARRAYSIZE = DebugSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugSource_descriptor();
template<typename T>
inline const std::string& DebugSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugSource_descriptor(), enum_t_value);
}
inline bool DebugSource_Parse(
    const std::string& name, DebugSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugSource>(
    DebugSource_descriptor(), name, value);
}
// ===================================================================

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Color) */ {
 public:
  inline Color() : Color(nullptr) {};
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kAlphaFieldNumber = 4,
  };
  // optional uint32 red = 1 [default = 0];
  bool has_red() const;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::uint32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 green = 2 [default = 0];
  bool has_green() const;
  private:
  bool _internal_has_green() const;
  public:
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::uint32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 blue = 3 [default = 0];
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::uint32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 alpha = 4 [default = 255];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  ::PROTOBUF_NAMESPACE_ID::uint32 alpha() const;
  void set_alpha(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alpha() const;
  void _internal_set_alpha(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amun.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_;
  ::PROTOBUF_NAMESPACE_ID::uint32 green_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alpha_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Pen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Pen) */ {
 public:
  inline Pen() : Pen(nullptr) {};
  virtual ~Pen();

  Pen(const Pen& from);
  Pen(Pen&& from) noexcept
    : Pen() {
    *this = ::std::move(from);
  }

  inline Pen& operator=(const Pen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pen& operator=(Pen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pen* internal_default_instance() {
    return reinterpret_cast<const Pen*>(
               &_Pen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pen& a, Pen& b) {
    a.Swap(&b);
  }
  inline void Swap(Pen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pen* New() const final {
    return CreateMaybeMessage<Pen>(nullptr);
  }

  Pen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pen& from);
  void MergeFrom(const Pen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Pen";
  }
  protected:
  explicit Pen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pen_Style Style;
  static constexpr Style DashLine =
    Pen_Style_DashLine;
  static constexpr Style DotLine =
    Pen_Style_DotLine;
  static constexpr Style DashDotLine =
    Pen_Style_DashDotLine;
  static constexpr Style DashDotDotLine =
    Pen_Style_DashDotDotLine;
  static inline bool Style_IsValid(int value) {
    return Pen_Style_IsValid(value);
  }
  static constexpr Style Style_MIN =
    Pen_Style_Style_MIN;
  static constexpr Style Style_MAX =
    Pen_Style_Style_MAX;
  static constexpr int Style_ARRAYSIZE =
    Pen_Style_Style_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Style_descriptor() {
    return Pen_Style_descriptor();
  }
  template<typename T>
  static inline const std::string& Style_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Style>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Style_Name.");
    return Pen_Style_Name(enum_t_value);
  }
  static inline bool Style_Parse(const std::string& name,
      Style* value) {
    return Pen_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kStyleFieldNumber = 1,
  };
  // optional .amun.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::amun::Color& color() const;
  ::amun::Color* release_color();
  ::amun::Color* mutable_color();
  void set_allocated_color(::amun::Color* color);
  private:
  const ::amun::Color& _internal_color() const;
  ::amun::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::amun::Color* color);
  ::amun::Color* unsafe_arena_release_color();

  // optional .amun.Pen.Style style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::amun::Pen_Style style() const;
  void set_style(::amun::Pen_Style value);
  private:
  ::amun::Pen_Style _internal_style() const;
  void _internal_set_style(::amun::Pen_Style value);
  public:

  // @@protoc_insertion_point(class_scope:amun.Pen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::amun::Color* color_;
  int style_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Circle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Circle) */ {
 public:
  inline Circle() : Circle(nullptr) {};
  virtual ~Circle();

  Circle(const Circle& from);
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }
  inline void Swap(Circle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Circle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(nullptr);
  }

  Circle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Circle";
  }
  protected:
  explicit Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPXFieldNumber = 1,
    kPYFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // required float p_x = 1;
  bool has_p_x() const;
  private:
  bool _internal_has_p_x() const;
  public:
  void clear_p_x();
  float p_x() const;
  void set_p_x(float value);
  private:
  float _internal_p_x() const;
  void _internal_set_p_x(float value);
  public:

  // required float p_y = 2;
  bool has_p_y() const;
  private:
  bool _internal_has_p_y() const;
  public:
  void clear_p_y();
  float p_y() const;
  void set_p_y(float value);
  private:
  float _internal_p_y() const;
  void _internal_set_p_y(float value);
  public:

  // required float radius = 3;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:amun.Circle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float p_x_;
  float p_y_;
  float radius_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:amun.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {};
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .amun.Point point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::amun::Point* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >*
      mutable_point();
  private:
  const ::amun::Point& _internal_point(int index) const;
  ::amun::Point* _internal_add_point();
  public:
  const ::amun::Point& point(int index) const;
  ::amun::Point* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:amun.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Path) */ {
 public:
  inline Path() : Path(nullptr) {};
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .amun.Point point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::amun::Point* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >*
      mutable_point();
  private:
  const ::amun::Point& _internal_point(int index) const;
  ::amun::Point* _internal_add_point();
  public:
  const ::amun::Point& point(int index) const;
  ::amun::Point* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:amun.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Rectangle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {};
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopleftFieldNumber = 1,
    kBottomrightFieldNumber = 2,
  };
  // required .amun.Point topleft = 1;
  bool has_topleft() const;
  private:
  bool _internal_has_topleft() const;
  public:
  void clear_topleft();
  const ::amun::Point& topleft() const;
  ::amun::Point* release_topleft();
  ::amun::Point* mutable_topleft();
  void set_allocated_topleft(::amun::Point* topleft);
  private:
  const ::amun::Point& _internal_topleft() const;
  ::amun::Point* _internal_mutable_topleft();
  public:
  void unsafe_arena_set_allocated_topleft(
      ::amun::Point* topleft);
  ::amun::Point* unsafe_arena_release_topleft();

  // required .amun.Point bottomright = 2;
  bool has_bottomright() const;
  private:
  bool _internal_has_bottomright() const;
  public:
  void clear_bottomright();
  const ::amun::Point& bottomright() const;
  ::amun::Point* release_bottomright();
  ::amun::Point* mutable_bottomright();
  void set_allocated_bottomright(::amun::Point* bottomright);
  private:
  const ::amun::Point& _internal_bottomright() const;
  ::amun::Point* _internal_mutable_bottomright();
  public:
  void unsafe_arena_set_allocated_bottomright(
      ::amun::Point* bottomright);
  ::amun::Point* unsafe_arena_release_bottomright();

  // @@protoc_insertion_point(class_scope:amun.Rectangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::amun::Point* topleft_;
  ::amun::Point* bottomright_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class ImageVisualization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.ImageVisualization) */ {
 public:
  inline ImageVisualization() : ImageVisualization(nullptr) {};
  virtual ~ImageVisualization();

  ImageVisualization(const ImageVisualization& from);
  ImageVisualization(ImageVisualization&& from) noexcept
    : ImageVisualization() {
    *this = ::std::move(from);
  }

  inline ImageVisualization& operator=(const ImageVisualization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageVisualization& operator=(ImageVisualization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageVisualization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageVisualization* internal_default_instance() {
    return reinterpret_cast<const ImageVisualization*>(
               &_ImageVisualization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ImageVisualization& a, ImageVisualization& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageVisualization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageVisualization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageVisualization* New() const final {
    return CreateMaybeMessage<ImageVisualization>(nullptr);
  }

  ImageVisualization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageVisualization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageVisualization& from);
  void MergeFrom(const ImageVisualization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageVisualization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.ImageVisualization";
  }
  protected:
  explicit ImageVisualization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kDrawAreaFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .amun.Rectangle draw_area = 4;
  bool has_draw_area() const;
  private:
  bool _internal_has_draw_area() const;
  public:
  void clear_draw_area();
  const ::amun::Rectangle& draw_area() const;
  ::amun::Rectangle* release_draw_area();
  ::amun::Rectangle* mutable_draw_area();
  void set_allocated_draw_area(::amun::Rectangle* draw_area);
  private:
  const ::amun::Rectangle& _internal_draw_area() const;
  ::amun::Rectangle* _internal_mutable_draw_area();
  public:
  void unsafe_arena_set_allocated_draw_area(
      ::amun::Rectangle* draw_area);
  ::amun::Rectangle* unsafe_arena_release_draw_area();

  // required uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amun.ImageVisualization)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::amun::Rectangle* draw_area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class Visualization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.Visualization) */ {
 public:
  inline Visualization() : Visualization(nullptr) {};
  virtual ~Visualization();

  Visualization(const Visualization& from);
  Visualization(Visualization&& from) noexcept
    : Visualization() {
    *this = ::std::move(from);
  }

  inline Visualization& operator=(const Visualization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visualization& operator=(Visualization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visualization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visualization* internal_default_instance() {
    return reinterpret_cast<const Visualization*>(
               &_Visualization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Visualization& a, Visualization& b) {
    a.Swap(&b);
  }
  inline void Swap(Visualization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Visualization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Visualization* New() const final {
    return CreateMaybeMessage<Visualization>(nullptr);
  }

  Visualization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visualization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visualization& from);
  void MergeFrom(const Visualization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visualization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.Visualization";
  }
  protected:
  explicit Visualization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPenFieldNumber = 2,
    kBrushFieldNumber = 3,
    kCircleFieldNumber = 5,
    kPolygonFieldNumber = 6,
    kPathFieldNumber = 7,
    kImageFieldNumber = 9,
    kWidthFieldNumber = 4,
    kBackgroundFieldNumber = 8,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .amun.Pen pen = 2;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::amun::Pen& pen() const;
  ::amun::Pen* release_pen();
  ::amun::Pen* mutable_pen();
  void set_allocated_pen(::amun::Pen* pen);
  private:
  const ::amun::Pen& _internal_pen() const;
  ::amun::Pen* _internal_mutable_pen();
  public:
  void unsafe_arena_set_allocated_pen(
      ::amun::Pen* pen);
  ::amun::Pen* unsafe_arena_release_pen();

  // optional .amun.Color brush = 3;
  bool has_brush() const;
  private:
  bool _internal_has_brush() const;
  public:
  void clear_brush();
  const ::amun::Color& brush() const;
  ::amun::Color* release_brush();
  ::amun::Color* mutable_brush();
  void set_allocated_brush(::amun::Color* brush);
  private:
  const ::amun::Color& _internal_brush() const;
  ::amun::Color* _internal_mutable_brush();
  public:
  void unsafe_arena_set_allocated_brush(
      ::amun::Color* brush);
  ::amun::Color* unsafe_arena_release_brush();

  // optional .amun.Circle circle = 5;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;
  public:
  void clear_circle();
  const ::amun::Circle& circle() const;
  ::amun::Circle* release_circle();
  ::amun::Circle* mutable_circle();
  void set_allocated_circle(::amun::Circle* circle);
  private:
  const ::amun::Circle& _internal_circle() const;
  ::amun::Circle* _internal_mutable_circle();
  public:
  void unsafe_arena_set_allocated_circle(
      ::amun::Circle* circle);
  ::amun::Circle* unsafe_arena_release_circle();

  // optional .amun.Polygon polygon = 6;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::amun::Polygon& polygon() const;
  ::amun::Polygon* release_polygon();
  ::amun::Polygon* mutable_polygon();
  void set_allocated_polygon(::amun::Polygon* polygon);
  private:
  const ::amun::Polygon& _internal_polygon() const;
  ::amun::Polygon* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::amun::Polygon* polygon);
  ::amun::Polygon* unsafe_arena_release_polygon();

  // optional .amun.Path path = 7;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::amun::Path& path() const;
  ::amun::Path* release_path();
  ::amun::Path* mutable_path();
  void set_allocated_path(::amun::Path* path);
  private:
  const ::amun::Path& _internal_path() const;
  ::amun::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::amun::Path* path);
  ::amun::Path* unsafe_arena_release_path();

  // optional .amun.ImageVisualization image = 9;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::amun::ImageVisualization& image() const;
  ::amun::ImageVisualization* release_image();
  ::amun::ImageVisualization* mutable_image();
  void set_allocated_image(::amun::ImageVisualization* image);
  private:
  const ::amun::ImageVisualization& _internal_image() const;
  ::amun::ImageVisualization* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::amun::ImageVisualization* image);
  ::amun::ImageVisualization* unsafe_arena_release_image();

  // optional float width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional bool background = 8 [default = false];
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  bool background() const;
  void set_background(bool value);
  private:
  bool _internal_background() const;
  void _internal_set_background(bool value);
  public:

  // @@protoc_insertion_point(class_scope:amun.Visualization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::amun::Pen* pen_;
  ::amun::Color* brush_;
  ::amun::Circle* circle_;
  ::amun::Polygon* polygon_;
  ::amun::Path* path_;
  ::amun::ImageVisualization* image_;
  float width_;
  bool background_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class DebugValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.DebugValue) */ {
 public:
  inline DebugValue() : DebugValue(nullptr) {};
  virtual ~DebugValue();

  DebugValue(const DebugValue& from);
  DebugValue(DebugValue&& from) noexcept
    : DebugValue() {
    *this = ::std::move(from);
  }

  inline DebugValue& operator=(const DebugValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugValue& operator=(DebugValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebugValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugValue* internal_default_instance() {
    return reinterpret_cast<const DebugValue*>(
               &_DebugValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DebugValue& a, DebugValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugValue* New() const final {
    return CreateMaybeMessage<DebugValue>(nullptr);
  }

  DebugValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebugValue& from);
  void MergeFrom(const DebugValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.DebugValue";
  }
  protected:
  explicit DebugValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStringValueFieldNumber = 4,
    kFloatValueFieldNumber = 2,
    kBoolValueFieldNumber = 3,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_value(
      std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional float float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional bool bool_value = 3;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:amun.DebugValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  float float_value_;
  bool bool_value_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class StatusLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.StatusLog) */ {
 public:
  inline StatusLog() : StatusLog(nullptr) {};
  virtual ~StatusLog();

  StatusLog(const StatusLog& from);
  StatusLog(StatusLog&& from) noexcept
    : StatusLog() {
    *this = ::std::move(from);
  }

  inline StatusLog& operator=(const StatusLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusLog& operator=(StatusLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusLog* internal_default_instance() {
    return reinterpret_cast<const StatusLog*>(
               &_StatusLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StatusLog& a, StatusLog& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusLog* New() const final {
    return CreateMaybeMessage<StatusLog>(nullptr);
  }

  StatusLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusLog& from);
  void MergeFrom(const StatusLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.StatusLog";
  }
  protected:
  explicit StatusLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // required string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // required int64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:amun.StatusLog)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class PlotValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.PlotValue) */ {
 public:
  inline PlotValue() : PlotValue(nullptr) {};
  virtual ~PlotValue();

  PlotValue(const PlotValue& from);
  PlotValue(PlotValue&& from) noexcept
    : PlotValue() {
    *this = ::std::move(from);
  }

  inline PlotValue& operator=(const PlotValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlotValue& operator=(PlotValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlotValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlotValue* internal_default_instance() {
    return reinterpret_cast<const PlotValue*>(
               &_PlotValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlotValue& a, PlotValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PlotValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlotValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlotValue* New() const final {
    return CreateMaybeMessage<PlotValue>(nullptr);
  }

  PlotValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlotValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlotValue& from);
  void MergeFrom(const PlotValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlotValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.PlotValue";
  }
  protected:
  explicit PlotValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:amun.PlotValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class RobotValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.RobotValue) */ {
 public:
  inline RobotValue() : RobotValue(nullptr) {};
  virtual ~RobotValue();

  RobotValue(const RobotValue& from);
  RobotValue(RobotValue&& from) noexcept
    : RobotValue() {
    *this = ::std::move(from);
  }

  inline RobotValue& operator=(const RobotValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotValue& operator=(RobotValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotValue* internal_default_instance() {
    return reinterpret_cast<const RobotValue*>(
               &_RobotValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RobotValue& a, RobotValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotValue* New() const final {
    return CreateMaybeMessage<RobotValue>(nullptr);
  }

  RobotValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotValue& from);
  void MergeFrom(const RobotValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.RobotValue";
  }
  protected:
  explicit RobotValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerationFieldNumber = 1,
    kIdFieldNumber = 2,
    kExchangeFieldNumber = 3,
  };
  // required uint32 generation = 1;
  bool has_generation() const;
  private:
  bool _internal_has_generation() const;
  public:
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::uint32 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool exchange = 3;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  bool exchange() const;
  void set_exchange(bool value);
  private:
  bool _internal_exchange() const;
  void _internal_set_exchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:amun.RobotValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 generation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool exchange_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class DebuggerOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.DebuggerOutput) */ {
 public:
  inline DebuggerOutput() : DebuggerOutput(nullptr) {};
  virtual ~DebuggerOutput();

  DebuggerOutput(const DebuggerOutput& from);
  DebuggerOutput(DebuggerOutput&& from) noexcept
    : DebuggerOutput() {
    *this = ::std::move(from);
  }

  inline DebuggerOutput& operator=(const DebuggerOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebuggerOutput& operator=(DebuggerOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebuggerOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebuggerOutput* internal_default_instance() {
    return reinterpret_cast<const DebuggerOutput*>(
               &_DebuggerOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DebuggerOutput& a, DebuggerOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(DebuggerOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebuggerOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebuggerOutput* New() const final {
    return CreateMaybeMessage<DebuggerOutput>(nullptr);
  }

  DebuggerOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebuggerOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebuggerOutput& from);
  void MergeFrom(const DebuggerOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebuggerOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.DebuggerOutput";
  }
  protected:
  explicit DebuggerOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
  };
  // optional string line = 1;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const std::string& line() const;
  void set_line(const std::string& value);
  void set_line(std::string&& value);
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  std::string* mutable_line();
  std::string* release_line();
  void set_allocated_line(std::string* line);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_line();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_line(
      std::string* line);
  private:
  const std::string& _internal_line() const;
  void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // @@protoc_insertion_point(class_scope:amun.DebuggerOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  friend struct ::TableStruct_debug_2eproto;
};
// -------------------------------------------------------------------

class DebugValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.DebugValues) */ {
 public:
  inline DebugValues() : DebugValues(nullptr) {};
  virtual ~DebugValues();

  DebugValues(const DebugValues& from);
  DebugValues(DebugValues&& from) noexcept
    : DebugValues() {
    *this = ::std::move(from);
  }

  inline DebugValues& operator=(const DebugValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugValues& operator=(DebugValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebugValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugValues* internal_default_instance() {
    return reinterpret_cast<const DebugValues*>(
               &_DebugValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DebugValues& a, DebugValues& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugValues* New() const final {
    return CreateMaybeMessage<DebugValues>(nullptr);
  }

  DebugValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebugValues& from);
  void MergeFrom(const DebugValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.DebugValues";
  }
  protected:
  explicit DebugValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_debug_2eproto);
    return ::descriptor_table_debug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kVisualizationFieldNumber = 3,
    kLogFieldNumber = 4,
    kPlotFieldNumber = 5,
    kRobotFieldNumber = 6,
    kDebuggerOutputFieldNumber = 8,
    kTimeFieldNumber = 7,
    kSourceFieldNumber = 1,
  };
  // repeated .amun.DebugValue value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::amun::DebugValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::DebugValue >*
      mutable_value();
  private:
  const ::amun::DebugValue& _internal_value(int index) const;
  ::amun::DebugValue* _internal_add_value();
  public:
  const ::amun::DebugValue& value(int index) const;
  ::amun::DebugValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::DebugValue >&
      value() const;

  // repeated .amun.Visualization visualization = 3;
  int visualization_size() const;
  private:
  int _internal_visualization_size() const;
  public:
  void clear_visualization();
  ::amun::Visualization* mutable_visualization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Visualization >*
      mutable_visualization();
  private:
  const ::amun::Visualization& _internal_visualization(int index) const;
  ::amun::Visualization* _internal_add_visualization();
  public:
  const ::amun::Visualization& visualization(int index) const;
  ::amun::Visualization* add_visualization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Visualization >&
      visualization() const;

  // repeated .amun.StatusLog log = 4;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::amun::StatusLog* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::StatusLog >*
      mutable_log();
  private:
  const ::amun::StatusLog& _internal_log(int index) const;
  ::amun::StatusLog* _internal_add_log();
  public:
  const ::amun::StatusLog& log(int index) const;
  ::amun::StatusLog* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::StatusLog >&
      log() const;

  // repeated .amun.PlotValue plot = 5;
  int plot_size() const;
  private:
  int _internal_plot_size() const;
  public:
  void clear_plot();
  ::amun::PlotValue* mutable_plot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::PlotValue >*
      mutable_plot();
  private:
  const ::amun::PlotValue& _internal_plot(int index) const;
  ::amun::PlotValue* _internal_add_plot();
  public:
  const ::amun::PlotValue& plot(int index) const;
  ::amun::PlotValue* add_plot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::PlotValue >&
      plot() const;

  // repeated .amun.RobotValue robot = 6;
  int robot_size() const;
  private:
  int _internal_robot_size() const;
  public:
  void clear_robot();
  ::amun::RobotValue* mutable_robot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::RobotValue >*
      mutable_robot();
  private:
  const ::amun::RobotValue& _internal_robot(int index) const;
  ::amun::RobotValue* _internal_add_robot();
  public:
  const ::amun::RobotValue& robot(int index) const;
  ::amun::RobotValue* add_robot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::RobotValue >&
      robot() const;

  // optional .amun.DebuggerOutput debugger_output = 8;
  bool has_debugger_output() const;
  private:
  bool _internal_has_debugger_output() const;
  public:
  void clear_debugger_output();
  const ::amun::DebuggerOutput& debugger_output() const;
  ::amun::DebuggerOutput* release_debugger_output();
  ::amun::DebuggerOutput* mutable_debugger_output();
  void set_allocated_debugger_output(::amun::DebuggerOutput* debugger_output);
  private:
  const ::amun::DebuggerOutput& _internal_debugger_output() const;
  ::amun::DebuggerOutput* _internal_mutable_debugger_output();
  public:
  void unsafe_arena_set_allocated_debugger_output(
      ::amun::DebuggerOutput* debugger_output);
  ::amun::DebuggerOutput* unsafe_arena_release_debugger_output();

  // optional int64 time = 7;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .amun.DebugSource source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::amun::DebugSource source() const;
  void set_source(::amun::DebugSource value);
  private:
  ::amun::DebugSource _internal_source() const;
  void _internal_set_source(::amun::DebugSource value);
  public:

  // @@protoc_insertion_point(class_scope:amun.DebugValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::DebugValue > value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Visualization > visualization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::StatusLog > log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::PlotValue > plot_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::RobotValue > robot_;
  ::amun::DebuggerOutput* debugger_output_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  int source_;
  friend struct ::TableStruct_debug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Color

// optional uint32 red = 1 [default = 0];
inline bool Color::_internal_has_red() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Color::has_red() const {
  return _internal_has_red();
}
inline void Color::clear_red() {
  red_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::red() const {
  // @@protoc_insertion_point(field_get:amun.Color.red)
  return _internal_red();
}
inline void Color::_internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  red_ = value;
}
inline void Color::set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:amun.Color.red)
}

// optional uint32 green = 2 [default = 0];
inline bool Color::_internal_has_green() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Color::has_green() const {
  return _internal_has_green();
}
inline void Color::clear_green() {
  green_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::green() const {
  // @@protoc_insertion_point(field_get:amun.Color.green)
  return _internal_green();
}
inline void Color::_internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  green_ = value;
}
inline void Color::set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:amun.Color.green)
}

// optional uint32 blue = 3 [default = 0];
inline bool Color::_internal_has_blue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Color::has_blue() const {
  return _internal_has_blue();
}
inline void Color::clear_blue() {
  blue_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::blue() const {
  // @@protoc_insertion_point(field_get:amun.Color.blue)
  return _internal_blue();
}
inline void Color::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  blue_ = value;
}
inline void Color::set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:amun.Color.blue)
}

// optional uint32 alpha = 4 [default = 255];
inline bool Color::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Color::has_alpha() const {
  return _internal_has_alpha();
}
inline void Color::clear_alpha() {
  alpha_ = 255u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_alpha() const {
  return alpha_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::alpha() const {
  // @@protoc_insertion_point(field_get:amun.Color.alpha)
  return _internal_alpha();
}
inline void Color::_internal_set_alpha(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  alpha_ = value;
}
inline void Color::set_alpha(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:amun.Color.alpha)
}

// -------------------------------------------------------------------

// Pen

// optional .amun.Pen.Style style = 1;
inline bool Pen::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pen::has_style() const {
  return _internal_has_style();
}
inline void Pen::clear_style() {
  style_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::amun::Pen_Style Pen::_internal_style() const {
  return static_cast< ::amun::Pen_Style >(style_);
}
inline ::amun::Pen_Style Pen::style() const {
  // @@protoc_insertion_point(field_get:amun.Pen.style)
  return _internal_style();
}
inline void Pen::_internal_set_style(::amun::Pen_Style value) {
  assert(::amun::Pen_Style_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  style_ = value;
}
inline void Pen::set_style(::amun::Pen_Style value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:amun.Pen.style)
}

// optional .amun.Color color = 2;
inline bool Pen::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool Pen::has_color() const {
  return _internal_has_color();
}
inline void Pen::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::amun::Color& Pen::_internal_color() const {
  const ::amun::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Color*>(
      &::amun::_Color_default_instance_);
}
inline const ::amun::Color& Pen::color() const {
  // @@protoc_insertion_point(field_get:amun.Pen.color)
  return _internal_color();
}
inline void Pen::unsafe_arena_set_allocated_color(
    ::amun::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Pen.color)
}
inline ::amun::Color* Pen::release_color() {
  auto temp = unsafe_arena_release_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Color* Pen::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:amun.Pen.color)
  _has_bits_[0] &= ~0x00000001u;
  ::amun::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::amun::Color* Pen::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::amun::Color* Pen::mutable_color() {
  // @@protoc_insertion_point(field_mutable:amun.Pen.color)
  return _internal_mutable_color();
}
inline void Pen::set_allocated_color(::amun::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:amun.Pen.color)
}

// -------------------------------------------------------------------

// Circle

// required float p_x = 1;
inline bool Circle::_internal_has_p_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Circle::has_p_x() const {
  return _internal_has_p_x();
}
inline void Circle::clear_p_x() {
  p_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Circle::_internal_p_x() const {
  return p_x_;
}
inline float Circle::p_x() const {
  // @@protoc_insertion_point(field_get:amun.Circle.p_x)
  return _internal_p_x();
}
inline void Circle::_internal_set_p_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  p_x_ = value;
}
inline void Circle::set_p_x(float value) {
  _internal_set_p_x(value);
  // @@protoc_insertion_point(field_set:amun.Circle.p_x)
}

// required float p_y = 2;
inline bool Circle::_internal_has_p_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Circle::has_p_y() const {
  return _internal_has_p_y();
}
inline void Circle::clear_p_y() {
  p_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Circle::_internal_p_y() const {
  return p_y_;
}
inline float Circle::p_y() const {
  // @@protoc_insertion_point(field_get:amun.Circle.p_y)
  return _internal_p_y();
}
inline void Circle::_internal_set_p_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  p_y_ = value;
}
inline void Circle::set_p_y(float value) {
  _internal_set_p_y(value);
  // @@protoc_insertion_point(field_set:amun.Circle.p_y)
}

// required float radius = 3;
inline bool Circle::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Circle::has_radius() const {
  return _internal_has_radius();
}
inline void Circle::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Circle::_internal_radius() const {
  return radius_;
}
inline float Circle::radius() const {
  // @@protoc_insertion_point(field_get:amun.Circle.radius)
  return _internal_radius();
}
inline void Circle::_internal_set_radius(float value) {
  _has_bits_[0] |= 0x00000004u;
  radius_ = value;
}
inline void Circle::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:amun.Circle.radius)
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:amun.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:amun.Point.x)
}

// required float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:amun.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:amun.Point.y)
}

// -------------------------------------------------------------------

// Polygon

// repeated .amun.Point point = 1;
inline int Polygon::_internal_point_size() const {
  return point_.size();
}
inline int Polygon::point_size() const {
  return _internal_point_size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline ::amun::Point* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:amun.Polygon.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:amun.Polygon.point)
  return &point_;
}
inline const ::amun::Point& Polygon::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::amun::Point& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:amun.Polygon.point)
  return _internal_point(index);
}
inline ::amun::Point* Polygon::_internal_add_point() {
  return point_.Add();
}
inline ::amun::Point* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:amun.Polygon.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:amun.Polygon.point)
  return point_;
}

// -------------------------------------------------------------------

// Path

// repeated .amun.Point point = 1;
inline int Path::_internal_point_size() const {
  return point_.size();
}
inline int Path::point_size() const {
  return _internal_point_size();
}
inline void Path::clear_point() {
  point_.Clear();
}
inline ::amun::Point* Path::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:amun.Path.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >*
Path::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:amun.Path.point)
  return &point_;
}
inline const ::amun::Point& Path::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::amun::Point& Path::point(int index) const {
  // @@protoc_insertion_point(field_get:amun.Path.point)
  return _internal_point(index);
}
inline ::amun::Point* Path::_internal_add_point() {
  return point_.Add();
}
inline ::amun::Point* Path::add_point() {
  // @@protoc_insertion_point(field_add:amun.Path.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Point >&
Path::point() const {
  // @@protoc_insertion_point(field_list:amun.Path.point)
  return point_;
}

// -------------------------------------------------------------------

// Rectangle

// required .amun.Point topleft = 1;
inline bool Rectangle::_internal_has_topleft() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || topleft_ != nullptr);
  return value;
}
inline bool Rectangle::has_topleft() const {
  return _internal_has_topleft();
}
inline void Rectangle::clear_topleft() {
  if (topleft_ != nullptr) topleft_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::amun::Point& Rectangle::_internal_topleft() const {
  const ::amun::Point* p = topleft_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Point*>(
      &::amun::_Point_default_instance_);
}
inline const ::amun::Point& Rectangle::topleft() const {
  // @@protoc_insertion_point(field_get:amun.Rectangle.topleft)
  return _internal_topleft();
}
inline void Rectangle::unsafe_arena_set_allocated_topleft(
    ::amun::Point* topleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topleft_);
  }
  topleft_ = topleft;
  if (topleft) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Rectangle.topleft)
}
inline ::amun::Point* Rectangle::release_topleft() {
  auto temp = unsafe_arena_release_topleft();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Point* Rectangle::unsafe_arena_release_topleft() {
  // @@protoc_insertion_point(field_release:amun.Rectangle.topleft)
  _has_bits_[0] &= ~0x00000001u;
  ::amun::Point* temp = topleft_;
  topleft_ = nullptr;
  return temp;
}
inline ::amun::Point* Rectangle::_internal_mutable_topleft() {
  _has_bits_[0] |= 0x00000001u;
  if (topleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Point>(GetArena());
    topleft_ = p;
  }
  return topleft_;
}
inline ::amun::Point* Rectangle::mutable_topleft() {
  // @@protoc_insertion_point(field_mutable:amun.Rectangle.topleft)
  return _internal_mutable_topleft();
}
inline void Rectangle::set_allocated_topleft(::amun::Point* topleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topleft_;
  }
  if (topleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topleft);
    if (message_arena != submessage_arena) {
      topleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topleft_ = topleft;
  // @@protoc_insertion_point(field_set_allocated:amun.Rectangle.topleft)
}

// required .amun.Point bottomright = 2;
inline bool Rectangle::_internal_has_bottomright() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bottomright_ != nullptr);
  return value;
}
inline bool Rectangle::has_bottomright() const {
  return _internal_has_bottomright();
}
inline void Rectangle::clear_bottomright() {
  if (bottomright_ != nullptr) bottomright_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::amun::Point& Rectangle::_internal_bottomright() const {
  const ::amun::Point* p = bottomright_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Point*>(
      &::amun::_Point_default_instance_);
}
inline const ::amun::Point& Rectangle::bottomright() const {
  // @@protoc_insertion_point(field_get:amun.Rectangle.bottomright)
  return _internal_bottomright();
}
inline void Rectangle::unsafe_arena_set_allocated_bottomright(
    ::amun::Point* bottomright) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottomright_);
  }
  bottomright_ = bottomright;
  if (bottomright) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Rectangle.bottomright)
}
inline ::amun::Point* Rectangle::release_bottomright() {
  auto temp = unsafe_arena_release_bottomright();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Point* Rectangle::unsafe_arena_release_bottomright() {
  // @@protoc_insertion_point(field_release:amun.Rectangle.bottomright)
  _has_bits_[0] &= ~0x00000002u;
  ::amun::Point* temp = bottomright_;
  bottomright_ = nullptr;
  return temp;
}
inline ::amun::Point* Rectangle::_internal_mutable_bottomright() {
  _has_bits_[0] |= 0x00000002u;
  if (bottomright_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Point>(GetArena());
    bottomright_ = p;
  }
  return bottomright_;
}
inline ::amun::Point* Rectangle::mutable_bottomright() {
  // @@protoc_insertion_point(field_mutable:amun.Rectangle.bottomright)
  return _internal_mutable_bottomright();
}
inline void Rectangle::set_allocated_bottomright(::amun::Point* bottomright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bottomright_;
  }
  if (bottomright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bottomright);
    if (message_arena != submessage_arena) {
      bottomright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bottomright_ = bottomright;
  // @@protoc_insertion_point(field_set_allocated:amun.Rectangle.bottomright)
}

// -------------------------------------------------------------------

// ImageVisualization

// required uint32 width = 1;
inline bool ImageVisualization::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageVisualization::has_width() const {
  return _internal_has_width();
}
inline void ImageVisualization::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageVisualization::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageVisualization::width() const {
  // @@protoc_insertion_point(field_get:amun.ImageVisualization.width)
  return _internal_width();
}
inline void ImageVisualization::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void ImageVisualization::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:amun.ImageVisualization.width)
}

// required uint32 height = 2;
inline bool ImageVisualization::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageVisualization::has_height() const {
  return _internal_has_height();
}
inline void ImageVisualization::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageVisualization::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageVisualization::height() const {
  // @@protoc_insertion_point(field_get:amun.ImageVisualization.height)
  return _internal_height();
}
inline void ImageVisualization::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void ImageVisualization::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:amun.ImageVisualization.height)
}

// required bytes data = 3;
inline bool ImageVisualization::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageVisualization::has_data() const {
  return _internal_has_data();
}
inline void ImageVisualization::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageVisualization::data() const {
  // @@protoc_insertion_point(field_get:amun.ImageVisualization.data)
  return _internal_data();
}
inline void ImageVisualization::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:amun.ImageVisualization.data)
}
inline std::string* ImageVisualization::mutable_data() {
  // @@protoc_insertion_point(field_mutable:amun.ImageVisualization.data)
  return _internal_mutable_data();
}
inline const std::string& ImageVisualization::_internal_data() const {
  return data_.Get();
}
inline void ImageVisualization::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageVisualization::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.ImageVisualization.data)
}
inline void ImageVisualization::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.ImageVisualization.data)
}
inline void ImageVisualization::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.ImageVisualization.data)
}
inline std::string* ImageVisualization::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageVisualization::release_data() {
  // @@protoc_insertion_point(field_release:amun.ImageVisualization.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageVisualization::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.ImageVisualization.data)
}
inline std::string* ImageVisualization::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.ImageVisualization.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageVisualization::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.ImageVisualization.data)
}

// optional .amun.Rectangle draw_area = 4;
inline bool ImageVisualization::_internal_has_draw_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || draw_area_ != nullptr);
  return value;
}
inline bool ImageVisualization::has_draw_area() const {
  return _internal_has_draw_area();
}
inline void ImageVisualization::clear_draw_area() {
  if (draw_area_ != nullptr) draw_area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::amun::Rectangle& ImageVisualization::_internal_draw_area() const {
  const ::amun::Rectangle* p = draw_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Rectangle*>(
      &::amun::_Rectangle_default_instance_);
}
inline const ::amun::Rectangle& ImageVisualization::draw_area() const {
  // @@protoc_insertion_point(field_get:amun.ImageVisualization.draw_area)
  return _internal_draw_area();
}
inline void ImageVisualization::unsafe_arena_set_allocated_draw_area(
    ::amun::Rectangle* draw_area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(draw_area_);
  }
  draw_area_ = draw_area;
  if (draw_area) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.ImageVisualization.draw_area)
}
inline ::amun::Rectangle* ImageVisualization::release_draw_area() {
  auto temp = unsafe_arena_release_draw_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Rectangle* ImageVisualization::unsafe_arena_release_draw_area() {
  // @@protoc_insertion_point(field_release:amun.ImageVisualization.draw_area)
  _has_bits_[0] &= ~0x00000002u;
  ::amun::Rectangle* temp = draw_area_;
  draw_area_ = nullptr;
  return temp;
}
inline ::amun::Rectangle* ImageVisualization::_internal_mutable_draw_area() {
  _has_bits_[0] |= 0x00000002u;
  if (draw_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Rectangle>(GetArena());
    draw_area_ = p;
  }
  return draw_area_;
}
inline ::amun::Rectangle* ImageVisualization::mutable_draw_area() {
  // @@protoc_insertion_point(field_mutable:amun.ImageVisualization.draw_area)
  return _internal_mutable_draw_area();
}
inline void ImageVisualization::set_allocated_draw_area(::amun::Rectangle* draw_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete draw_area_;
  }
  if (draw_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(draw_area);
    if (message_arena != submessage_arena) {
      draw_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draw_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  draw_area_ = draw_area;
  // @@protoc_insertion_point(field_set_allocated:amun.ImageVisualization.draw_area)
}

// -------------------------------------------------------------------

// Visualization

// required string name = 1;
inline bool Visualization::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Visualization::has_name() const {
  return _internal_has_name();
}
inline void Visualization::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Visualization::name() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.name)
  return _internal_name();
}
inline void Visualization::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:amun.Visualization.name)
}
inline std::string* Visualization::mutable_name() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.name)
  return _internal_mutable_name();
}
inline const std::string& Visualization::_internal_name() const {
  return name_.Get();
}
inline void Visualization::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Visualization::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.Visualization.name)
}
inline void Visualization::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.Visualization.name)
}
inline void Visualization::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.Visualization.name)
}
inline std::string* Visualization::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Visualization::release_name() {
  // @@protoc_insertion_point(field_release:amun.Visualization.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Visualization::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.name)
}
inline std::string* Visualization::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.Visualization.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Visualization::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.name)
}

// optional .amun.Pen pen = 2;
inline bool Visualization::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Visualization::has_pen() const {
  return _internal_has_pen();
}
inline void Visualization::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::amun::Pen& Visualization::_internal_pen() const {
  const ::amun::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Pen*>(
      &::amun::_Pen_default_instance_);
}
inline const ::amun::Pen& Visualization::pen() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.pen)
  return _internal_pen();
}
inline void Visualization::unsafe_arena_set_allocated_pen(
    ::amun::Pen* pen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pen_);
  }
  pen_ = pen;
  if (pen) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.pen)
}
inline ::amun::Pen* Visualization::release_pen() {
  auto temp = unsafe_arena_release_pen();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Pen* Visualization::unsafe_arena_release_pen() {
  // @@protoc_insertion_point(field_release:amun.Visualization.pen)
  _has_bits_[0] &= ~0x00000002u;
  ::amun::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::amun::Pen* Visualization::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000002u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Pen>(GetArena());
    pen_ = p;
  }
  return pen_;
}
inline ::amun::Pen* Visualization::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.pen)
  return _internal_mutable_pen();
}
inline void Visualization::set_allocated_pen(::amun::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pen);
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.pen)
}

// optional .amun.Color brush = 3;
inline bool Visualization::_internal_has_brush() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || brush_ != nullptr);
  return value;
}
inline bool Visualization::has_brush() const {
  return _internal_has_brush();
}
inline void Visualization::clear_brush() {
  if (brush_ != nullptr) brush_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::amun::Color& Visualization::_internal_brush() const {
  const ::amun::Color* p = brush_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Color*>(
      &::amun::_Color_default_instance_);
}
inline const ::amun::Color& Visualization::brush() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.brush)
  return _internal_brush();
}
inline void Visualization::unsafe_arena_set_allocated_brush(
    ::amun::Color* brush) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brush_);
  }
  brush_ = brush;
  if (brush) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.brush)
}
inline ::amun::Color* Visualization::release_brush() {
  auto temp = unsafe_arena_release_brush();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Color* Visualization::unsafe_arena_release_brush() {
  // @@protoc_insertion_point(field_release:amun.Visualization.brush)
  _has_bits_[0] &= ~0x00000004u;
  ::amun::Color* temp = brush_;
  brush_ = nullptr;
  return temp;
}
inline ::amun::Color* Visualization::_internal_mutable_brush() {
  _has_bits_[0] |= 0x00000004u;
  if (brush_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Color>(GetArena());
    brush_ = p;
  }
  return brush_;
}
inline ::amun::Color* Visualization::mutable_brush() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.brush)
  return _internal_mutable_brush();
}
inline void Visualization::set_allocated_brush(::amun::Color* brush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete brush_;
  }
  if (brush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(brush);
    if (message_arena != submessage_arena) {
      brush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brush, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brush_ = brush;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.brush)
}

// optional float width = 4;
inline bool Visualization::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Visualization::has_width() const {
  return _internal_has_width();
}
inline void Visualization::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Visualization::_internal_width() const {
  return width_;
}
inline float Visualization::width() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.width)
  return _internal_width();
}
inline void Visualization::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
}
inline void Visualization::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:amun.Visualization.width)
}

// optional .amun.Circle circle = 5;
inline bool Visualization::_internal_has_circle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || circle_ != nullptr);
  return value;
}
inline bool Visualization::has_circle() const {
  return _internal_has_circle();
}
inline void Visualization::clear_circle() {
  if (circle_ != nullptr) circle_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::amun::Circle& Visualization::_internal_circle() const {
  const ::amun::Circle* p = circle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Circle*>(
      &::amun::_Circle_default_instance_);
}
inline const ::amun::Circle& Visualization::circle() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.circle)
  return _internal_circle();
}
inline void Visualization::unsafe_arena_set_allocated_circle(
    ::amun::Circle* circle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(circle_);
  }
  circle_ = circle;
  if (circle) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.circle)
}
inline ::amun::Circle* Visualization::release_circle() {
  auto temp = unsafe_arena_release_circle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Circle* Visualization::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_release:amun.Visualization.circle)
  _has_bits_[0] &= ~0x00000008u;
  ::amun::Circle* temp = circle_;
  circle_ = nullptr;
  return temp;
}
inline ::amun::Circle* Visualization::_internal_mutable_circle() {
  _has_bits_[0] |= 0x00000008u;
  if (circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Circle>(GetArena());
    circle_ = p;
  }
  return circle_;
}
inline ::amun::Circle* Visualization::mutable_circle() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.circle)
  return _internal_mutable_circle();
}
inline void Visualization::set_allocated_circle(::amun::Circle* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete circle_;
  }
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.circle)
}

// optional .amun.Polygon polygon = 6;
inline bool Visualization::_internal_has_polygon() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || polygon_ != nullptr);
  return value;
}
inline bool Visualization::has_polygon() const {
  return _internal_has_polygon();
}
inline void Visualization::clear_polygon() {
  if (polygon_ != nullptr) polygon_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::amun::Polygon& Visualization::_internal_polygon() const {
  const ::amun::Polygon* p = polygon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Polygon*>(
      &::amun::_Polygon_default_instance_);
}
inline const ::amun::Polygon& Visualization::polygon() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.polygon)
  return _internal_polygon();
}
inline void Visualization::unsafe_arena_set_allocated_polygon(
    ::amun::Polygon* polygon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  polygon_ = polygon;
  if (polygon) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.polygon)
}
inline ::amun::Polygon* Visualization::release_polygon() {
  auto temp = unsafe_arena_release_polygon();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Polygon* Visualization::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:amun.Visualization.polygon)
  _has_bits_[0] &= ~0x00000010u;
  ::amun::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::amun::Polygon* Visualization::_internal_mutable_polygon() {
  _has_bits_[0] |= 0x00000010u;
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Polygon>(GetArena());
    polygon_ = p;
  }
  return polygon_;
}
inline ::amun::Polygon* Visualization::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.polygon)
  return _internal_mutable_polygon();
}
inline void Visualization::set_allocated_polygon(::amun::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete polygon_;
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.polygon)
}

// optional .amun.Path path = 7;
inline bool Visualization::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || path_ != nullptr);
  return value;
}
inline bool Visualization::has_path() const {
  return _internal_has_path();
}
inline void Visualization::clear_path() {
  if (path_ != nullptr) path_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::amun::Path& Visualization::_internal_path() const {
  const ::amun::Path* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::Path*>(
      &::amun::_Path_default_instance_);
}
inline const ::amun::Path& Visualization::path() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.path)
  return _internal_path();
}
inline void Visualization::unsafe_arena_set_allocated_path(
    ::amun::Path* path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.path)
}
inline ::amun::Path* Visualization::release_path() {
  auto temp = unsafe_arena_release_path();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::Path* Visualization::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:amun.Visualization.path)
  _has_bits_[0] &= ~0x00000020u;
  ::amun::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::amun::Path* Visualization::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000020u;
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::Path>(GetArena());
    path_ = p;
  }
  return path_;
}
inline ::amun::Path* Visualization::mutable_path() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.path)
  return _internal_mutable_path();
}
inline void Visualization::set_allocated_path(::amun::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.path)
}

// optional bool background = 8 [default = false];
inline bool Visualization::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Visualization::has_background() const {
  return _internal_has_background();
}
inline void Visualization::clear_background() {
  background_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Visualization::_internal_background() const {
  return background_;
}
inline bool Visualization::background() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.background)
  return _internal_background();
}
inline void Visualization::_internal_set_background(bool value) {
  _has_bits_[0] |= 0x00000100u;
  background_ = value;
}
inline void Visualization::set_background(bool value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:amun.Visualization.background)
}

// optional .amun.ImageVisualization image = 9;
inline bool Visualization::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool Visualization::has_image() const {
  return _internal_has_image();
}
inline void Visualization::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::amun::ImageVisualization& Visualization::_internal_image() const {
  const ::amun::ImageVisualization* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::ImageVisualization*>(
      &::amun::_ImageVisualization_default_instance_);
}
inline const ::amun::ImageVisualization& Visualization::image() const {
  // @@protoc_insertion_point(field_get:amun.Visualization.image)
  return _internal_image();
}
inline void Visualization::unsafe_arena_set_allocated_image(
    ::amun::ImageVisualization* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.Visualization.image)
}
inline ::amun::ImageVisualization* Visualization::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::ImageVisualization* Visualization::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:amun.Visualization.image)
  _has_bits_[0] &= ~0x00000040u;
  ::amun::ImageVisualization* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::amun::ImageVisualization* Visualization::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000040u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::ImageVisualization>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::amun::ImageVisualization* Visualization::mutable_image() {
  // @@protoc_insertion_point(field_mutable:amun.Visualization.image)
  return _internal_mutable_image();
}
inline void Visualization::set_allocated_image(::amun::ImageVisualization* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:amun.Visualization.image)
}

// -------------------------------------------------------------------

// DebugValue

// required string key = 1;
inline bool DebugValue::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DebugValue::has_key() const {
  return _internal_has_key();
}
inline void DebugValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugValue::key() const {
  // @@protoc_insertion_point(field_get:amun.DebugValue.key)
  return _internal_key();
}
inline void DebugValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:amun.DebugValue.key)
}
inline std::string* DebugValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:amun.DebugValue.key)
  return _internal_mutable_key();
}
inline const std::string& DebugValue::_internal_key() const {
  return key_.Get();
}
inline void DebugValue::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DebugValue::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.DebugValue.key)
}
inline void DebugValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.DebugValue.key)
}
inline void DebugValue::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.DebugValue.key)
}
inline std::string* DebugValue::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DebugValue::release_key() {
  // @@protoc_insertion_point(field_release:amun.DebugValue.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DebugValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.DebugValue.key)
}
inline std::string* DebugValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.DebugValue.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DebugValue::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.DebugValue.key)
}

// optional float float_value = 2;
inline bool DebugValue::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DebugValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void DebugValue::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DebugValue::_internal_float_value() const {
  return float_value_;
}
inline float DebugValue::float_value() const {
  // @@protoc_insertion_point(field_get:amun.DebugValue.float_value)
  return _internal_float_value();
}
inline void DebugValue::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000004u;
  float_value_ = value;
}
inline void DebugValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:amun.DebugValue.float_value)
}

// optional bool bool_value = 3;
inline bool DebugValue::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DebugValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void DebugValue::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DebugValue::_internal_bool_value() const {
  return bool_value_;
}
inline bool DebugValue::bool_value() const {
  // @@protoc_insertion_point(field_get:amun.DebugValue.bool_value)
  return _internal_bool_value();
}
inline void DebugValue::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bool_value_ = value;
}
inline void DebugValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:amun.DebugValue.bool_value)
}

// optional string string_value = 4;
inline bool DebugValue::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DebugValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void DebugValue::clear_string_value() {
  string_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DebugValue::string_value() const {
  // @@protoc_insertion_point(field_get:amun.DebugValue.string_value)
  return _internal_string_value();
}
inline void DebugValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:amun.DebugValue.string_value)
}
inline std::string* DebugValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:amun.DebugValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& DebugValue::_internal_string_value() const {
  return string_value_.Get();
}
inline void DebugValue::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DebugValue::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.DebugValue.string_value)
}
inline void DebugValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.DebugValue.string_value)
}
inline void DebugValue::set_string_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.DebugValue.string_value)
}
inline std::string* DebugValue::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000002u;
  return string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DebugValue::release_string_value() {
  // @@protoc_insertion_point(field_release:amun.DebugValue.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DebugValue::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.DebugValue.string_value)
}
inline std::string* DebugValue::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.DebugValue.string_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return string_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DebugValue::unsafe_arena_set_allocated_string_value(
    std::string* string_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      string_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.DebugValue.string_value)
}

// -------------------------------------------------------------------

// StatusLog

// required int64 timestamp = 1;
inline bool StatusLog::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusLog::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void StatusLog::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusLog::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusLog::timestamp() const {
  // @@protoc_insertion_point(field_get:amun.StatusLog.timestamp)
  return _internal_timestamp();
}
inline void StatusLog::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void StatusLog::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:amun.StatusLog.timestamp)
}

// required string text = 2;
inline bool StatusLog::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusLog::has_text() const {
  return _internal_has_text();
}
inline void StatusLog::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusLog::text() const {
  // @@protoc_insertion_point(field_get:amun.StatusLog.text)
  return _internal_text();
}
inline void StatusLog::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:amun.StatusLog.text)
}
inline std::string* StatusLog::mutable_text() {
  // @@protoc_insertion_point(field_mutable:amun.StatusLog.text)
  return _internal_mutable_text();
}
inline const std::string& StatusLog::_internal_text() const {
  return text_.Get();
}
inline void StatusLog::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusLog::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.StatusLog.text)
}
inline void StatusLog::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.StatusLog.text)
}
inline void StatusLog::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.StatusLog.text)
}
inline std::string* StatusLog::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusLog::release_text() {
  // @@protoc_insertion_point(field_release:amun.StatusLog.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusLog::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.StatusLog.text)
}
inline std::string* StatusLog::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.StatusLog.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusLog::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.StatusLog.text)
}

// -------------------------------------------------------------------

// PlotValue

// required string name = 1;
inline bool PlotValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlotValue::has_name() const {
  return _internal_has_name();
}
inline void PlotValue::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlotValue::name() const {
  // @@protoc_insertion_point(field_get:amun.PlotValue.name)
  return _internal_name();
}
inline void PlotValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:amun.PlotValue.name)
}
inline std::string* PlotValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:amun.PlotValue.name)
  return _internal_mutable_name();
}
inline const std::string& PlotValue::_internal_name() const {
  return name_.Get();
}
inline void PlotValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlotValue::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.PlotValue.name)
}
inline void PlotValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.PlotValue.name)
}
inline void PlotValue::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.PlotValue.name)
}
inline std::string* PlotValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlotValue::release_name() {
  // @@protoc_insertion_point(field_release:amun.PlotValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlotValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.PlotValue.name)
}
inline std::string* PlotValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.PlotValue.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlotValue::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.PlotValue.name)
}

// required float value = 2;
inline bool PlotValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlotValue::has_value() const {
  return _internal_has_value();
}
inline void PlotValue::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PlotValue::_internal_value() const {
  return value_;
}
inline float PlotValue::value() const {
  // @@protoc_insertion_point(field_get:amun.PlotValue.value)
  return _internal_value();
}
inline void PlotValue::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void PlotValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:amun.PlotValue.value)
}

// -------------------------------------------------------------------

// RobotValue

// required uint32 generation = 1;
inline bool RobotValue::_internal_has_generation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotValue::has_generation() const {
  return _internal_has_generation();
}
inline void RobotValue::clear_generation() {
  generation_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotValue::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotValue::generation() const {
  // @@protoc_insertion_point(field_get:amun.RobotValue.generation)
  return _internal_generation();
}
inline void RobotValue::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  generation_ = value;
}
inline void RobotValue::set_generation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:amun.RobotValue.generation)
}

// required uint32 id = 2;
inline bool RobotValue::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotValue::has_id() const {
  return _internal_has_id();
}
inline void RobotValue::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotValue::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotValue::id() const {
  // @@protoc_insertion_point(field_get:amun.RobotValue.id)
  return _internal_id();
}
inline void RobotValue::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void RobotValue::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:amun.RobotValue.id)
}

// optional bool exchange = 3;
inline bool RobotValue::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotValue::has_exchange() const {
  return _internal_has_exchange();
}
inline void RobotValue::clear_exchange() {
  exchange_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RobotValue::_internal_exchange() const {
  return exchange_;
}
inline bool RobotValue::exchange() const {
  // @@protoc_insertion_point(field_get:amun.RobotValue.exchange)
  return _internal_exchange();
}
inline void RobotValue::_internal_set_exchange(bool value) {
  _has_bits_[0] |= 0x00000004u;
  exchange_ = value;
}
inline void RobotValue::set_exchange(bool value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:amun.RobotValue.exchange)
}

// -------------------------------------------------------------------

// DebuggerOutput

// optional string line = 1;
inline bool DebuggerOutput::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DebuggerOutput::has_line() const {
  return _internal_has_line();
}
inline void DebuggerOutput::clear_line() {
  line_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebuggerOutput::line() const {
  // @@protoc_insertion_point(field_get:amun.DebuggerOutput.line)
  return _internal_line();
}
inline void DebuggerOutput::set_line(const std::string& value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:amun.DebuggerOutput.line)
}
inline std::string* DebuggerOutput::mutable_line() {
  // @@protoc_insertion_point(field_mutable:amun.DebuggerOutput.line)
  return _internal_mutable_line();
}
inline const std::string& DebuggerOutput::_internal_line() const {
  return line_.Get();
}
inline void DebuggerOutput::_internal_set_line(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DebuggerOutput::set_line(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  line_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:amun.DebuggerOutput.line)
}
inline void DebuggerOutput::set_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:amun.DebuggerOutput.line)
}
inline void DebuggerOutput::set_line(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:amun.DebuggerOutput.line)
}
inline std::string* DebuggerOutput::_internal_mutable_line() {
  _has_bits_[0] |= 0x00000001u;
  return line_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DebuggerOutput::release_line() {
  // @@protoc_insertion_point(field_release:amun.DebuggerOutput.line)
  if (!_internal_has_line()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return line_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DebuggerOutput::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:amun.DebuggerOutput.line)
}
inline std::string* DebuggerOutput::unsafe_arena_release_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amun.DebuggerOutput.line)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return line_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DebuggerOutput::unsafe_arena_set_allocated_line(
    std::string* line) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (line != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  line_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      line, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.DebuggerOutput.line)
}

// -------------------------------------------------------------------

// DebugValues

// required .amun.DebugSource source = 1;
inline bool DebugValues::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DebugValues::has_source() const {
  return _internal_has_source();
}
inline void DebugValues::clear_source() {
  source_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::amun::DebugSource DebugValues::_internal_source() const {
  return static_cast< ::amun::DebugSource >(source_);
}
inline ::amun::DebugSource DebugValues::source() const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.source)
  return _internal_source();
}
inline void DebugValues::_internal_set_source(::amun::DebugSource value) {
  assert(::amun::DebugSource_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_ = value;
}
inline void DebugValues::set_source(::amun::DebugSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:amun.DebugValues.source)
}

// optional int64 time = 7;
inline bool DebugValues::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DebugValues::has_time() const {
  return _internal_has_time();
}
inline void DebugValues::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugValues::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugValues::time() const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.time)
  return _internal_time();
}
inline void DebugValues::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void DebugValues::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:amun.DebugValues.time)
}

// repeated .amun.DebugValue value = 2;
inline int DebugValues::_internal_value_size() const {
  return value_.size();
}
inline int DebugValues::value_size() const {
  return _internal_value_size();
}
inline void DebugValues::clear_value() {
  value_.Clear();
}
inline ::amun::DebugValue* DebugValues::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::DebugValue >*
DebugValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:amun.DebugValues.value)
  return &value_;
}
inline const ::amun::DebugValue& DebugValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::amun::DebugValue& DebugValues::value(int index) const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.value)
  return _internal_value(index);
}
inline ::amun::DebugValue* DebugValues::_internal_add_value() {
  return value_.Add();
}
inline ::amun::DebugValue* DebugValues::add_value() {
  // @@protoc_insertion_point(field_add:amun.DebugValues.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::DebugValue >&
DebugValues::value() const {
  // @@protoc_insertion_point(field_list:amun.DebugValues.value)
  return value_;
}

// repeated .amun.Visualization visualization = 3;
inline int DebugValues::_internal_visualization_size() const {
  return visualization_.size();
}
inline int DebugValues::visualization_size() const {
  return _internal_visualization_size();
}
inline void DebugValues::clear_visualization() {
  visualization_.Clear();
}
inline ::amun::Visualization* DebugValues::mutable_visualization(int index) {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.visualization)
  return visualization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Visualization >*
DebugValues::mutable_visualization() {
  // @@protoc_insertion_point(field_mutable_list:amun.DebugValues.visualization)
  return &visualization_;
}
inline const ::amun::Visualization& DebugValues::_internal_visualization(int index) const {
  return visualization_.Get(index);
}
inline const ::amun::Visualization& DebugValues::visualization(int index) const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.visualization)
  return _internal_visualization(index);
}
inline ::amun::Visualization* DebugValues::_internal_add_visualization() {
  return visualization_.Add();
}
inline ::amun::Visualization* DebugValues::add_visualization() {
  // @@protoc_insertion_point(field_add:amun.DebugValues.visualization)
  return _internal_add_visualization();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::Visualization >&
DebugValues::visualization() const {
  // @@protoc_insertion_point(field_list:amun.DebugValues.visualization)
  return visualization_;
}

// repeated .amun.StatusLog log = 4;
inline int DebugValues::_internal_log_size() const {
  return log_.size();
}
inline int DebugValues::log_size() const {
  return _internal_log_size();
}
inline void DebugValues::clear_log() {
  log_.Clear();
}
inline ::amun::StatusLog* DebugValues::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::StatusLog >*
DebugValues::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:amun.DebugValues.log)
  return &log_;
}
inline const ::amun::StatusLog& DebugValues::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::amun::StatusLog& DebugValues::log(int index) const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.log)
  return _internal_log(index);
}
inline ::amun::StatusLog* DebugValues::_internal_add_log() {
  return log_.Add();
}
inline ::amun::StatusLog* DebugValues::add_log() {
  // @@protoc_insertion_point(field_add:amun.DebugValues.log)
  return _internal_add_log();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::StatusLog >&
DebugValues::log() const {
  // @@protoc_insertion_point(field_list:amun.DebugValues.log)
  return log_;
}

// repeated .amun.PlotValue plot = 5;
inline int DebugValues::_internal_plot_size() const {
  return plot_.size();
}
inline int DebugValues::plot_size() const {
  return _internal_plot_size();
}
inline void DebugValues::clear_plot() {
  plot_.Clear();
}
inline ::amun::PlotValue* DebugValues::mutable_plot(int index) {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.plot)
  return plot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::PlotValue >*
DebugValues::mutable_plot() {
  // @@protoc_insertion_point(field_mutable_list:amun.DebugValues.plot)
  return &plot_;
}
inline const ::amun::PlotValue& DebugValues::_internal_plot(int index) const {
  return plot_.Get(index);
}
inline const ::amun::PlotValue& DebugValues::plot(int index) const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.plot)
  return _internal_plot(index);
}
inline ::amun::PlotValue* DebugValues::_internal_add_plot() {
  return plot_.Add();
}
inline ::amun::PlotValue* DebugValues::add_plot() {
  // @@protoc_insertion_point(field_add:amun.DebugValues.plot)
  return _internal_add_plot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::PlotValue >&
DebugValues::plot() const {
  // @@protoc_insertion_point(field_list:amun.DebugValues.plot)
  return plot_;
}

// repeated .amun.RobotValue robot = 6;
inline int DebugValues::_internal_robot_size() const {
  return robot_.size();
}
inline int DebugValues::robot_size() const {
  return _internal_robot_size();
}
inline void DebugValues::clear_robot() {
  robot_.Clear();
}
inline ::amun::RobotValue* DebugValues::mutable_robot(int index) {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.robot)
  return robot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::RobotValue >*
DebugValues::mutable_robot() {
  // @@protoc_insertion_point(field_mutable_list:amun.DebugValues.robot)
  return &robot_;
}
inline const ::amun::RobotValue& DebugValues::_internal_robot(int index) const {
  return robot_.Get(index);
}
inline const ::amun::RobotValue& DebugValues::robot(int index) const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.robot)
  return _internal_robot(index);
}
inline ::amun::RobotValue* DebugValues::_internal_add_robot() {
  return robot_.Add();
}
inline ::amun::RobotValue* DebugValues::add_robot() {
  // @@protoc_insertion_point(field_add:amun.DebugValues.robot)
  return _internal_add_robot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amun::RobotValue >&
DebugValues::robot() const {
  // @@protoc_insertion_point(field_list:amun.DebugValues.robot)
  return robot_;
}

// optional .amun.DebuggerOutput debugger_output = 8;
inline bool DebugValues::_internal_has_debugger_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || debugger_output_ != nullptr);
  return value;
}
inline bool DebugValues::has_debugger_output() const {
  return _internal_has_debugger_output();
}
inline void DebugValues::clear_debugger_output() {
  if (debugger_output_ != nullptr) debugger_output_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::amun::DebuggerOutput& DebugValues::_internal_debugger_output() const {
  const ::amun::DebuggerOutput* p = debugger_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amun::DebuggerOutput*>(
      &::amun::_DebuggerOutput_default_instance_);
}
inline const ::amun::DebuggerOutput& DebugValues::debugger_output() const {
  // @@protoc_insertion_point(field_get:amun.DebugValues.debugger_output)
  return _internal_debugger_output();
}
inline void DebugValues::unsafe_arena_set_allocated_debugger_output(
    ::amun::DebuggerOutput* debugger_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debugger_output_);
  }
  debugger_output_ = debugger_output;
  if (debugger_output) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.DebugValues.debugger_output)
}
inline ::amun::DebuggerOutput* DebugValues::release_debugger_output() {
  auto temp = unsafe_arena_release_debugger_output();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::amun::DebuggerOutput* DebugValues::unsafe_arena_release_debugger_output() {
  // @@protoc_insertion_point(field_release:amun.DebugValues.debugger_output)
  _has_bits_[0] &= ~0x00000001u;
  ::amun::DebuggerOutput* temp = debugger_output_;
  debugger_output_ = nullptr;
  return temp;
}
inline ::amun::DebuggerOutput* DebugValues::_internal_mutable_debugger_output() {
  _has_bits_[0] |= 0x00000001u;
  if (debugger_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::amun::DebuggerOutput>(GetArena());
    debugger_output_ = p;
  }
  return debugger_output_;
}
inline ::amun::DebuggerOutput* DebugValues::mutable_debugger_output() {
  // @@protoc_insertion_point(field_mutable:amun.DebugValues.debugger_output)
  return _internal_mutable_debugger_output();
}
inline void DebugValues::set_allocated_debugger_output(::amun::DebuggerOutput* debugger_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debugger_output_;
  }
  if (debugger_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debugger_output);
    if (message_arena != submessage_arena) {
      debugger_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugger_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debugger_output_ = debugger_output;
  // @@protoc_insertion_point(field_set_allocated:amun.DebugValues.debugger_output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amun

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::amun::Pen_Style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amun::Pen_Style>() {
  return ::amun::Pen_Style_descriptor();
}
template <> struct is_proto_enum< ::amun::DebugSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amun::DebugSource>() {
  return ::amun::DebugSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_debug_2eproto
