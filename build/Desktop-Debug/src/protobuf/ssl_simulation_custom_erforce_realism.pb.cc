// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_custom_erforce_realism.proto

#include "ssl_simulation_custom_erforce_realism.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class RealismConfigErForceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealismConfigErForce> _instance;
} _RealismConfigErForce_default_instance_;
static void InitDefaultsscc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RealismConfigErForce_default_instance_;
    new (ptr) ::RealismConfigErForce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RealismConfigErForce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, stddev_ball_p_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, stddev_robot_p_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, stddev_robot_phi_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, stddev_ball_area_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, enable_invisible_ball_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, ball_visibility_threshold_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, camera_overlap_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, dribbler_ball_detections_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, camera_position_error_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, robot_command_loss_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, robot_response_loss_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, missing_ball_detections_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, vision_delay_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, vision_processing_time_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, simulate_dribbling_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, object_position_offset_),
  PROTOBUF_FIELD_OFFSET(::RealismConfigErForce, missing_robot_detections_),
  0,
  1,
  2,
  3,
  9,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  13,
  14,
  10,
  15,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::RealismConfigErForce)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RealismConfigErForce_default_instance_),
};

const char descriptor_table_protodef_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+ssl_simulation_custom_erforce_realism."
  "proto\"\202\004\n\024RealismConfigErForce\022\025\n\rstddev"
  "_ball_p\030\001 \001(\002\022\026\n\016stddev_robot_p\030\002 \001(\002\022\030\n"
  "\020stddev_robot_phi\030\003 \001(\002\022\030\n\020stddev_ball_a"
  "rea\030\004 \001(\002\022\035\n\025enable_invisible_ball\030\005 \001(\010"
  "\022!\n\031ball_visibility_threshold\030\006 \001(\002\022\026\n\016c"
  "amera_overlap\030\007 \001(\002\022 \n\030dribbler_ball_det"
  "ections\030\010 \001(\002\022\035\n\025camera_position_error\030\t"
  " \001(\002\022\032\n\022robot_command_loss\030\n \001(\002\022\033\n\023robo"
  "t_response_loss\030\013 \001(\002\022\037\n\027missing_ball_de"
  "tections\030\014 \001(\002\022\024\n\014vision_delay\030\r \001(\003\022\036\n\026"
  "vision_processing_time\030\016 \001(\003\022\032\n\022simulate"
  "_dribbling\030\017 \001(\010\022\036\n\026object_position_offs"
  "et\030\020 \001(\002\022 \n\030missing_robot_detections\030\021 \001"
  "(\002B8Z6github.com/RoboCup-SSL/ssl-simulat"
  "ion-protocol/pkg/sim"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_sccs[1] = {
  &scc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto, "ssl_simulation_custom_erforce_realism.proto", 620,
  &descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_once, descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_sccs, descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto::offsets,
  file_level_metadata_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto, 1, file_level_enum_descriptors_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto, file_level_service_descriptors_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto)), true);

// ===================================================================

void RealismConfigErForce::InitAsDefaultInstance() {
}
class RealismConfigErForce::_Internal {
 public:
  using HasBits = decltype(std::declval<RealismConfigErForce>()._has_bits_);
  static void set_has_stddev_ball_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stddev_robot_p(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stddev_robot_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stddev_ball_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_invisible_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ball_visibility_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dribbler_ball_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_camera_position_error(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_robot_command_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_robot_response_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_missing_ball_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vision_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_vision_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_simulate_dribbling(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_object_position_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_missing_robot_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

RealismConfigErForce::RealismConfigErForce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RealismConfigErForce)
}
RealismConfigErForce::RealismConfigErForce(const RealismConfigErForce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stddev_ball_p_, &from.stddev_ball_p_,
    static_cast<size_t>(reinterpret_cast<char*>(&missing_robot_detections_) -
    reinterpret_cast<char*>(&stddev_ball_p_)) + sizeof(missing_robot_detections_));
  // @@protoc_insertion_point(copy_constructor:RealismConfigErForce)
}

void RealismConfigErForce::SharedCtor() {
  ::memset(&stddev_ball_p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_robot_detections_) -
      reinterpret_cast<char*>(&stddev_ball_p_)) + sizeof(missing_robot_detections_));
}

RealismConfigErForce::~RealismConfigErForce() {
  // @@protoc_insertion_point(destructor:RealismConfigErForce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealismConfigErForce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RealismConfigErForce::ArenaDtor(void* object) {
  RealismConfigErForce* _this = reinterpret_cast< RealismConfigErForce* >(object);
  (void)_this;
}
void RealismConfigErForce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealismConfigErForce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealismConfigErForce& RealismConfigErForce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto.base);
  return *internal_default_instance();
}


void RealismConfigErForce::Clear() {
// @@protoc_insertion_point(message_clear_start:RealismConfigErForce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&stddev_ball_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_position_error_) -
        reinterpret_cast<char*>(&stddev_ball_p_)) + sizeof(camera_position_error_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&robot_command_loss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&object_position_offset_) -
        reinterpret_cast<char*>(&robot_command_loss_)) + sizeof(object_position_offset_));
  }
  missing_robot_detections_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealismConfigErForce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float stddev_ball_p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_stddev_ball_p(&has_bits);
          stddev_ball_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stddev_robot_p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stddev_robot_p(&has_bits);
          stddev_robot_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stddev_robot_phi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_stddev_robot_phi(&has_bits);
          stddev_robot_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stddev_ball_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_stddev_ball_area(&has_bits);
          stddev_ball_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_invisible_ball = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_invisible_ball(&has_bits);
          enable_invisible_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ball_visibility_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ball_visibility_threshold(&has_bits);
          ball_visibility_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float camera_overlap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_camera_overlap(&has_bits);
          camera_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dribbler_ball_detections = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_dribbler_ball_detections(&has_bits);
          dribbler_ball_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float camera_position_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_camera_position_error(&has_bits);
          camera_position_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float robot_command_loss = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_robot_command_loss(&has_bits);
          robot_command_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float robot_response_loss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_robot_response_loss(&has_bits);
          robot_response_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float missing_ball_detections = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_missing_ball_detections(&has_bits);
          missing_ball_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 vision_delay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_vision_delay(&has_bits);
          vision_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 vision_processing_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_vision_processing_time(&has_bits);
          vision_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool simulate_dribbling = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_simulate_dribbling(&has_bits);
          simulate_dribbling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float object_position_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_object_position_offset(&has_bits);
          object_position_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float missing_robot_detections = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_missing_robot_detections(&has_bits);
          missing_robot_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealismConfigErForce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RealismConfigErForce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float stddev_ball_p = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_stddev_ball_p(), target);
  }

  // optional float stddev_robot_p = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_stddev_robot_p(), target);
  }

  // optional float stddev_robot_phi = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stddev_robot_phi(), target);
  }

  // optional float stddev_ball_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_stddev_ball_area(), target);
  }

  // optional bool enable_invisible_ball = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_invisible_ball(), target);
  }

  // optional float ball_visibility_threshold = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ball_visibility_threshold(), target);
  }

  // optional float camera_overlap = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_camera_overlap(), target);
  }

  // optional float dribbler_ball_detections = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_dribbler_ball_detections(), target);
  }

  // optional float camera_position_error = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_camera_position_error(), target);
  }

  // optional float robot_command_loss = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_robot_command_loss(), target);
  }

  // optional float robot_response_loss = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_robot_response_loss(), target);
  }

  // optional float missing_ball_detections = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_missing_ball_detections(), target);
  }

  // optional int64 vision_delay = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_vision_delay(), target);
  }

  // optional int64 vision_processing_time = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_vision_processing_time(), target);
  }

  // optional bool simulate_dribbling = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_simulate_dribbling(), target);
  }

  // optional float object_position_offset = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_object_position_offset(), target);
  }

  // optional float missing_robot_detections = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_missing_robot_detections(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RealismConfigErForce)
  return target;
}

size_t RealismConfigErForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RealismConfigErForce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float stddev_ball_p = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stddev_robot_p = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float stddev_robot_phi = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float stddev_ball_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ball_visibility_threshold = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float camera_overlap = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float dribbler_ball_detections = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float camera_position_error = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float robot_command_loss = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool enable_invisible_ball = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool simulate_dribbling = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional float robot_response_loss = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float missing_ball_detections = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int64 vision_delay = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_vision_delay());
    }

    // optional int64 vision_processing_time = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_vision_processing_time());
    }

    // optional float object_position_offset = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  // optional float missing_robot_detections = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealismConfigErForce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RealismConfigErForce)
  GOOGLE_DCHECK_NE(&from, this);
  const RealismConfigErForce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealismConfigErForce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RealismConfigErForce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RealismConfigErForce)
    MergeFrom(*source);
  }
}

void RealismConfigErForce::MergeFrom(const RealismConfigErForce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RealismConfigErForce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stddev_ball_p_ = from.stddev_ball_p_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_robot_p_ = from.stddev_robot_p_;
    }
    if (cached_has_bits & 0x00000004u) {
      stddev_robot_phi_ = from.stddev_robot_phi_;
    }
    if (cached_has_bits & 0x00000008u) {
      stddev_ball_area_ = from.stddev_ball_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      ball_visibility_threshold_ = from.ball_visibility_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      camera_overlap_ = from.camera_overlap_;
    }
    if (cached_has_bits & 0x00000040u) {
      dribbler_ball_detections_ = from.dribbler_ball_detections_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera_position_error_ = from.camera_position_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      robot_command_loss_ = from.robot_command_loss_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_invisible_ball_ = from.enable_invisible_ball_;
    }
    if (cached_has_bits & 0x00000400u) {
      simulate_dribbling_ = from.simulate_dribbling_;
    }
    if (cached_has_bits & 0x00000800u) {
      robot_response_loss_ = from.robot_response_loss_;
    }
    if (cached_has_bits & 0x00001000u) {
      missing_ball_detections_ = from.missing_ball_detections_;
    }
    if (cached_has_bits & 0x00002000u) {
      vision_delay_ = from.vision_delay_;
    }
    if (cached_has_bits & 0x00004000u) {
      vision_processing_time_ = from.vision_processing_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      object_position_offset_ = from.object_position_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_missing_robot_detections(from._internal_missing_robot_detections());
  }
}

void RealismConfigErForce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RealismConfigErForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealismConfigErForce::CopyFrom(const RealismConfigErForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RealismConfigErForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealismConfigErForce::IsInitialized() const {
  return true;
}

void RealismConfigErForce::InternalSwap(RealismConfigErForce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RealismConfigErForce, missing_robot_detections_)
      + sizeof(RealismConfigErForce::missing_robot_detections_)
      - PROTOBUF_FIELD_OFFSET(RealismConfigErForce, stddev_ball_p_)>(
          reinterpret_cast<char*>(&stddev_ball_p_),
          reinterpret_cast<char*>(&other->stddev_ball_p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RealismConfigErForce::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RealismConfigErForce* Arena::CreateMaybeMessage< ::RealismConfigErForce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RealismConfigErForce >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
