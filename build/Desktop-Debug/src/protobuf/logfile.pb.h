// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logfile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logfile_2eproto;
namespace logfile {
class LogOffer;
class LogOfferDefaultTypeInternal;
extern LogOfferDefaultTypeInternal _LogOffer_default_instance_;
class LogOfferEntry;
class LogOfferEntryDefaultTypeInternal;
extern LogOfferEntryDefaultTypeInternal _LogOfferEntry_default_instance_;
class LogRequest;
class LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class Uid;
class UidDefaultTypeInternal;
extern UidDefaultTypeInternal _Uid_default_instance_;
class UidEntry;
class UidEntryDefaultTypeInternal;
extern UidEntryDefaultTypeInternal _UidEntry_default_instance_;
}  // namespace logfile
PROTOBUF_NAMESPACE_OPEN
template<> ::logfile::LogOffer* Arena::CreateMaybeMessage<::logfile::LogOffer>(Arena*);
template<> ::logfile::LogOfferEntry* Arena::CreateMaybeMessage<::logfile::LogOfferEntry>(Arena*);
template<> ::logfile::LogRequest* Arena::CreateMaybeMessage<::logfile::LogRequest>(Arena*);
template<> ::logfile::Uid* Arena::CreateMaybeMessage<::logfile::Uid>(Arena*);
template<> ::logfile::UidEntry* Arena::CreateMaybeMessage<::logfile::UidEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logfile {

enum LogOfferEntry_QUALITY : int {
  LogOfferEntry_QUALITY_PERFECT = 1,
  LogOfferEntry_QUALITY_UNKNOWN = 2,
  LogOfferEntry_QUALITY_UNREADABLE = 3
};
bool LogOfferEntry_QUALITY_IsValid(int value);
constexpr LogOfferEntry_QUALITY LogOfferEntry_QUALITY_QUALITY_MIN = LogOfferEntry_QUALITY_PERFECT;
constexpr LogOfferEntry_QUALITY LogOfferEntry_QUALITY_QUALITY_MAX = LogOfferEntry_QUALITY_UNREADABLE;
constexpr int LogOfferEntry_QUALITY_QUALITY_ARRAYSIZE = LogOfferEntry_QUALITY_QUALITY_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogOfferEntry_QUALITY_descriptor();
template<typename T>
inline const std::string& LogOfferEntry_QUALITY_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogOfferEntry_QUALITY>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogOfferEntry_QUALITY_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogOfferEntry_QUALITY_descriptor(), enum_t_value);
}
inline bool LogOfferEntry_QUALITY_Parse(
    const std::string& name, LogOfferEntry_QUALITY* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogOfferEntry_QUALITY>(
    LogOfferEntry_QUALITY_descriptor(), name, value);
}
// ===================================================================

class UidEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logfile.UidEntry) */ {
 public:
  inline UidEntry() : UidEntry(nullptr) {};
  virtual ~UidEntry();

  UidEntry(const UidEntry& from);
  UidEntry(UidEntry&& from) noexcept
    : UidEntry() {
    *this = ::std::move(from);
  }

  inline UidEntry& operator=(const UidEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidEntry& operator=(UidEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UidEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidEntry* internal_default_instance() {
    return reinterpret_cast<const UidEntry*>(
               &_UidEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UidEntry& a, UidEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UidEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidEntry* New() const final {
    return CreateMaybeMessage<UidEntry>(nullptr);
  }

  UidEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidEntry& from);
  void MergeFrom(const UidEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logfile.UidEntry";
  }
  protected:
  explicit UidEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logfile_2eproto);
    return ::descriptor_table_logfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // required string hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional uint32 flags = 2 [default = 0];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:logfile.UidEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_logfile_2eproto;
};
// -------------------------------------------------------------------

class Uid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logfile.Uid) */ {
 public:
  inline Uid() : Uid(nullptr) {};
  virtual ~Uid();

  Uid(const Uid& from);
  Uid(Uid&& from) noexcept
    : Uid() {
    *this = ::std::move(from);
  }

  inline Uid& operator=(const Uid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uid& operator=(Uid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uid* internal_default_instance() {
    return reinterpret_cast<const Uid*>(
               &_Uid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Uid& a, Uid& b) {
    a.Swap(&b);
  }
  inline void Swap(Uid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uid* New() const final {
    return CreateMaybeMessage<Uid>(nullptr);
  }

  Uid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uid& from);
  void MergeFrom(const Uid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logfile.Uid";
  }
  protected:
  explicit Uid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logfile_2eproto);
    return ::descriptor_table_logfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 1,
  };
  // repeated .logfile.UidEntry parts = 1;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::logfile::UidEntry* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
      mutable_parts();
  private:
  const ::logfile::UidEntry& _internal_parts(int index) const;
  ::logfile::UidEntry* _internal_add_parts();
  public:
  const ::logfile::UidEntry& parts(int index) const;
  ::logfile::UidEntry* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
      parts() const;

  // @@protoc_insertion_point(class_scope:logfile.Uid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry > parts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logfile_2eproto;
};
// -------------------------------------------------------------------

class LogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logfile.LogRequest) */ {
 public:
  inline LogRequest() : LogRequest(nullptr) {};
  virtual ~LogRequest();

  LogRequest(const LogRequest& from);
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRequest* New() const final {
    return CreateMaybeMessage<LogRequest>(nullptr);
  }

  LogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRequest& from);
  void MergeFrom(const LogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logfile.LogRequest";
  }
  protected:
  explicit LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logfile_2eproto);
    return ::descriptor_table_logfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:logfile.LogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_logfile_2eproto;
};
// -------------------------------------------------------------------

class LogOfferEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logfile.LogOfferEntry) */ {
 public:
  inline LogOfferEntry() : LogOfferEntry(nullptr) {};
  virtual ~LogOfferEntry();

  LogOfferEntry(const LogOfferEntry& from);
  LogOfferEntry(LogOfferEntry&& from) noexcept
    : LogOfferEntry() {
    *this = ::std::move(from);
  }

  inline LogOfferEntry& operator=(const LogOfferEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOfferEntry& operator=(LogOfferEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogOfferEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogOfferEntry* internal_default_instance() {
    return reinterpret_cast<const LogOfferEntry*>(
               &_LogOfferEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogOfferEntry& a, LogOfferEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOfferEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOfferEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogOfferEntry* New() const final {
    return CreateMaybeMessage<LogOfferEntry>(nullptr);
  }

  LogOfferEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogOfferEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogOfferEntry& from);
  void MergeFrom(const LogOfferEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOfferEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logfile.LogOfferEntry";
  }
  protected:
  explicit LogOfferEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logfile_2eproto);
    return ::descriptor_table_logfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogOfferEntry_QUALITY QUALITY;
  static constexpr QUALITY PERFECT =
    LogOfferEntry_QUALITY_PERFECT;
  static constexpr QUALITY UNKNOWN =
    LogOfferEntry_QUALITY_UNKNOWN;
  static constexpr QUALITY UNREADABLE =
    LogOfferEntry_QUALITY_UNREADABLE;
  static inline bool QUALITY_IsValid(int value) {
    return LogOfferEntry_QUALITY_IsValid(value);
  }
  static constexpr QUALITY QUALITY_MIN =
    LogOfferEntry_QUALITY_QUALITY_MIN;
  static constexpr QUALITY QUALITY_MAX =
    LogOfferEntry_QUALITY_QUALITY_MAX;
  static constexpr int QUALITY_ARRAYSIZE =
    LogOfferEntry_QUALITY_QUALITY_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  QUALITY_descriptor() {
    return LogOfferEntry_QUALITY_descriptor();
  }
  template<typename T>
  static inline const std::string& QUALITY_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QUALITY>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QUALITY_Name.");
    return LogOfferEntry_QUALITY_Name(enum_t_value);
  }
  static inline bool QUALITY_Parse(const std::string& name,
      QUALITY* value) {
    return LogOfferEntry_QUALITY_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUriFieldNumber = 3,
    kQualityFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .logfile.LogRequest uri = 3;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const ::logfile::LogRequest& uri() const;
  ::logfile::LogRequest* release_uri();
  ::logfile::LogRequest* mutable_uri();
  void set_allocated_uri(::logfile::LogRequest* uri);
  private:
  const ::logfile::LogRequest& _internal_uri() const;
  ::logfile::LogRequest* _internal_mutable_uri();
  public:
  void unsafe_arena_set_allocated_uri(
      ::logfile::LogRequest* uri);
  ::logfile::LogRequest* unsafe_arena_release_uri();

  // required .logfile.LogOfferEntry.QUALITY quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::logfile::LogOfferEntry_QUALITY quality() const;
  void set_quality(::logfile::LogOfferEntry_QUALITY value);
  private:
  ::logfile::LogOfferEntry_QUALITY _internal_quality() const;
  void _internal_set_quality(::logfile::LogOfferEntry_QUALITY value);
  public:

  // @@protoc_insertion_point(class_scope:logfile.LogOfferEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::logfile::LogRequest* uri_;
  int quality_;
  friend struct ::TableStruct_logfile_2eproto;
};
// -------------------------------------------------------------------

class LogOffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logfile.LogOffer) */ {
 public:
  inline LogOffer() : LogOffer(nullptr) {};
  virtual ~LogOffer();

  LogOffer(const LogOffer& from);
  LogOffer(LogOffer&& from) noexcept
    : LogOffer() {
    *this = ::std::move(from);
  }

  inline LogOffer& operator=(const LogOffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOffer& operator=(LogOffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogOffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogOffer* internal_default_instance() {
    return reinterpret_cast<const LogOffer*>(
               &_LogOffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogOffer& a, LogOffer& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogOffer* New() const final {
    return CreateMaybeMessage<LogOffer>(nullptr);
  }

  LogOffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogOffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogOffer& from);
  void MergeFrom(const LogOffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logfile.LogOffer";
  }
  protected:
  explicit LogOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logfile_2eproto);
    return ::descriptor_table_logfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .logfile.LogOfferEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::logfile::LogOfferEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::LogOfferEntry >*
      mutable_entries();
  private:
  const ::logfile::LogOfferEntry& _internal_entries(int index) const;
  ::logfile::LogOfferEntry* _internal_add_entries();
  public:
  const ::logfile::LogOfferEntry& entries(int index) const;
  ::logfile::LogOfferEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::LogOfferEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:logfile.LogOffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::LogOfferEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UidEntry

// required string hash = 1;
inline bool UidEntry::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UidEntry::has_hash() const {
  return _internal_has_hash();
}
inline void UidEntry::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidEntry::hash() const {
  // @@protoc_insertion_point(field_get:logfile.UidEntry.hash)
  return _internal_hash();
}
inline void UidEntry::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:logfile.UidEntry.hash)
}
inline std::string* UidEntry::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:logfile.UidEntry.hash)
  return _internal_mutable_hash();
}
inline const std::string& UidEntry::_internal_hash() const {
  return hash_.Get();
}
inline void UidEntry::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UidEntry::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logfile.UidEntry.hash)
}
inline void UidEntry::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logfile.UidEntry.hash)
}
inline void UidEntry::set_hash(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logfile.UidEntry.hash)
}
inline std::string* UidEntry::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UidEntry::release_hash() {
  // @@protoc_insertion_point(field_release:logfile.UidEntry.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UidEntry::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logfile.UidEntry.hash)
}
inline std::string* UidEntry::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logfile.UidEntry.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UidEntry::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logfile.UidEntry.hash)
}

// optional uint32 flags = 2 [default = 0];
inline bool UidEntry::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UidEntry::has_flags() const {
  return _internal_has_flags();
}
inline void UidEntry::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UidEntry::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UidEntry::flags() const {
  // @@protoc_insertion_point(field_get:logfile.UidEntry.flags)
  return _internal_flags();
}
inline void UidEntry::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
}
inline void UidEntry::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:logfile.UidEntry.flags)
}

// -------------------------------------------------------------------

// Uid

// repeated .logfile.UidEntry parts = 1;
inline int Uid::_internal_parts_size() const {
  return parts_.size();
}
inline int Uid::parts_size() const {
  return _internal_parts_size();
}
inline void Uid::clear_parts() {
  parts_.Clear();
}
inline ::logfile::UidEntry* Uid::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:logfile.Uid.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >*
Uid::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:logfile.Uid.parts)
  return &parts_;
}
inline const ::logfile::UidEntry& Uid::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::logfile::UidEntry& Uid::parts(int index) const {
  // @@protoc_insertion_point(field_get:logfile.Uid.parts)
  return _internal_parts(index);
}
inline ::logfile::UidEntry* Uid::_internal_add_parts() {
  return parts_.Add();
}
inline ::logfile::UidEntry* Uid::add_parts() {
  // @@protoc_insertion_point(field_add:logfile.Uid.parts)
  return _internal_add_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::UidEntry >&
Uid::parts() const {
  // @@protoc_insertion_point(field_list:logfile.Uid.parts)
  return parts_;
}

// -------------------------------------------------------------------

// LogRequest

// required string path = 1;
inline bool LogRequest::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRequest::has_path() const {
  return _internal_has_path();
}
inline void LogRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRequest::path() const {
  // @@protoc_insertion_point(field_get:logfile.LogRequest.path)
  return _internal_path();
}
inline void LogRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:logfile.LogRequest.path)
}
inline std::string* LogRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:logfile.LogRequest.path)
  return _internal_mutable_path();
}
inline const std::string& LogRequest::_internal_path() const {
  return path_.Get();
}
inline void LogRequest::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logfile.LogRequest.path)
}
inline void LogRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logfile.LogRequest.path)
}
inline void LogRequest::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logfile.LogRequest.path)
}
inline std::string* LogRequest::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRequest::release_path() {
  // @@protoc_insertion_point(field_release:logfile.LogRequest.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logfile.LogRequest.path)
}
inline std::string* LogRequest::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logfile.LogRequest.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRequest::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logfile.LogRequest.path)
}

// -------------------------------------------------------------------

// LogOfferEntry

// required string name = 1;
inline bool LogOfferEntry::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogOfferEntry::has_name() const {
  return _internal_has_name();
}
inline void LogOfferEntry::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogOfferEntry::name() const {
  // @@protoc_insertion_point(field_get:logfile.LogOfferEntry.name)
  return _internal_name();
}
inline void LogOfferEntry::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:logfile.LogOfferEntry.name)
}
inline std::string* LogOfferEntry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:logfile.LogOfferEntry.name)
  return _internal_mutable_name();
}
inline const std::string& LogOfferEntry::_internal_name() const {
  return name_.Get();
}
inline void LogOfferEntry::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogOfferEntry::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logfile.LogOfferEntry.name)
}
inline void LogOfferEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logfile.LogOfferEntry.name)
}
inline void LogOfferEntry::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logfile.LogOfferEntry.name)
}
inline std::string* LogOfferEntry::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogOfferEntry::release_name() {
  // @@protoc_insertion_point(field_release:logfile.LogOfferEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogOfferEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logfile.LogOfferEntry.name)
}
inline std::string* LogOfferEntry::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logfile.LogOfferEntry.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogOfferEntry::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logfile.LogOfferEntry.name)
}

// required .logfile.LogOfferEntry.QUALITY quality = 2;
inline bool LogOfferEntry::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogOfferEntry::has_quality() const {
  return _internal_has_quality();
}
inline void LogOfferEntry::clear_quality() {
  quality_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::logfile::LogOfferEntry_QUALITY LogOfferEntry::_internal_quality() const {
  return static_cast< ::logfile::LogOfferEntry_QUALITY >(quality_);
}
inline ::logfile::LogOfferEntry_QUALITY LogOfferEntry::quality() const {
  // @@protoc_insertion_point(field_get:logfile.LogOfferEntry.quality)
  return _internal_quality();
}
inline void LogOfferEntry::_internal_set_quality(::logfile::LogOfferEntry_QUALITY value) {
  assert(::logfile::LogOfferEntry_QUALITY_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  quality_ = value;
}
inline void LogOfferEntry::set_quality(::logfile::LogOfferEntry_QUALITY value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:logfile.LogOfferEntry.quality)
}

// required .logfile.LogRequest uri = 3;
inline bool LogOfferEntry::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uri_ != nullptr);
  return value;
}
inline bool LogOfferEntry::has_uri() const {
  return _internal_has_uri();
}
inline void LogOfferEntry::clear_uri() {
  if (uri_ != nullptr) uri_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::logfile::LogRequest& LogOfferEntry::_internal_uri() const {
  const ::logfile::LogRequest* p = uri_;
  return p != nullptr ? *p : *reinterpret_cast<const ::logfile::LogRequest*>(
      &::logfile::_LogRequest_default_instance_);
}
inline const ::logfile::LogRequest& LogOfferEntry::uri() const {
  // @@protoc_insertion_point(field_get:logfile.LogOfferEntry.uri)
  return _internal_uri();
}
inline void LogOfferEntry::unsafe_arena_set_allocated_uri(
    ::logfile::LogRequest* uri) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uri_);
  }
  uri_ = uri;
  if (uri) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logfile.LogOfferEntry.uri)
}
inline ::logfile::LogRequest* LogOfferEntry::release_uri() {
  auto temp = unsafe_arena_release_uri();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::logfile::LogRequest* LogOfferEntry::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_release:logfile.LogOfferEntry.uri)
  _has_bits_[0] &= ~0x00000002u;
  ::logfile::LogRequest* temp = uri_;
  uri_ = nullptr;
  return temp;
}
inline ::logfile::LogRequest* LogOfferEntry::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000002u;
  if (uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::logfile::LogRequest>(GetArena());
    uri_ = p;
  }
  return uri_;
}
inline ::logfile::LogRequest* LogOfferEntry::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:logfile.LogOfferEntry.uri)
  return _internal_mutable_uri();
}
inline void LogOfferEntry::set_allocated_uri(::logfile::LogRequest* uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uri_;
  }
  if (uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uri);
    if (message_arena != submessage_arena) {
      uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:logfile.LogOfferEntry.uri)
}

// -------------------------------------------------------------------

// LogOffer

// repeated .logfile.LogOfferEntry entries = 1;
inline int LogOffer::_internal_entries_size() const {
  return entries_.size();
}
inline int LogOffer::entries_size() const {
  return _internal_entries_size();
}
inline void LogOffer::clear_entries() {
  entries_.Clear();
}
inline ::logfile::LogOfferEntry* LogOffer::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:logfile.LogOffer.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::LogOfferEntry >*
LogOffer::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:logfile.LogOffer.entries)
  return &entries_;
}
inline const ::logfile::LogOfferEntry& LogOffer::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::logfile::LogOfferEntry& LogOffer::entries(int index) const {
  // @@protoc_insertion_point(field_get:logfile.LogOffer.entries)
  return _internal_entries(index);
}
inline ::logfile::LogOfferEntry* LogOffer::_internal_add_entries() {
  return entries_.Add();
}
inline ::logfile::LogOfferEntry* LogOffer::add_entries() {
  // @@protoc_insertion_point(field_add:logfile.LogOffer.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::logfile::LogOfferEntry >&
LogOffer::entries() const {
  // @@protoc_insertion_point(field_list:logfile.LogOffer.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logfile

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::logfile::LogOfferEntry_QUALITY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logfile::LogOfferEntry_QUALITY>() {
  return ::logfile::LogOfferEntry_QUALITY_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logfile_2eproto
