// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_mixed_team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fmixed_5fteam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fmixed_5fteam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fmixed_5fteam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fmixed_5fteam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fmixed_5fteam_2eproto;
namespace ssl {
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class RobotPlan;
class RobotPlanDefaultTypeInternal;
extern RobotPlanDefaultTypeInternal _RobotPlan_default_instance_;
class TeamPlan;
class TeamPlanDefaultTypeInternal;
extern TeamPlanDefaultTypeInternal _TeamPlan_default_instance_;
}  // namespace ssl
PROTOBUF_NAMESPACE_OPEN
template<> ::ssl::Location* Arena::CreateMaybeMessage<::ssl::Location>(Arena*);
template<> ::ssl::Pose* Arena::CreateMaybeMessage<::ssl::Pose>(Arena*);
template<> ::ssl::RobotPlan* Arena::CreateMaybeMessage<::ssl::RobotPlan>(Arena*);
template<> ::ssl::TeamPlan* Arena::CreateMaybeMessage<::ssl::TeamPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ssl {

enum RobotPlan_RobotRole : int {
  RobotPlan_RobotRole_Default = 0,
  RobotPlan_RobotRole_Goalie = 1,
  RobotPlan_RobotRole_Defense = 2,
  RobotPlan_RobotRole_Offense = 3
};
bool RobotPlan_RobotRole_IsValid(int value);
constexpr RobotPlan_RobotRole RobotPlan_RobotRole_RobotRole_MIN = RobotPlan_RobotRole_Default;
constexpr RobotPlan_RobotRole RobotPlan_RobotRole_RobotRole_MAX = RobotPlan_RobotRole_Offense;
constexpr int RobotPlan_RobotRole_RobotRole_ARRAYSIZE = RobotPlan_RobotRole_RobotRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotPlan_RobotRole_descriptor();
template<typename T>
inline const std::string& RobotPlan_RobotRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotPlan_RobotRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotPlan_RobotRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotPlan_RobotRole_descriptor(), enum_t_value);
}
inline bool RobotPlan_RobotRole_Parse(
    const std::string& name, RobotPlan_RobotRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotPlan_RobotRole>(
    RobotPlan_RobotRole_descriptor(), name, value);
}
// ===================================================================

class TeamPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssl.TeamPlan) */ {
 public:
  inline TeamPlan() : TeamPlan(nullptr) {};
  virtual ~TeamPlan();

  TeamPlan(const TeamPlan& from);
  TeamPlan(TeamPlan&& from) noexcept
    : TeamPlan() {
    *this = ::std::move(from);
  }

  inline TeamPlan& operator=(const TeamPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamPlan& operator=(TeamPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamPlan* internal_default_instance() {
    return reinterpret_cast<const TeamPlan*>(
               &_TeamPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeamPlan& a, TeamPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamPlan* New() const final {
    return CreateMaybeMessage<TeamPlan>(nullptr);
  }

  TeamPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamPlan& from);
  void MergeFrom(const TeamPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssl.TeamPlan";
  }
  protected:
  explicit TeamPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fmixed_5fteam_2eproto);
    return ::descriptor_table_ssl_5fmixed_5fteam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlansFieldNumber = 1,
  };
  // repeated .ssl.RobotPlan plans = 1;
  int plans_size() const;
  private:
  int _internal_plans_size() const;
  public:
  void clear_plans();
  ::ssl::RobotPlan* mutable_plans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssl::RobotPlan >*
      mutable_plans();
  private:
  const ::ssl::RobotPlan& _internal_plans(int index) const;
  ::ssl::RobotPlan* _internal_add_plans();
  public:
  const ::ssl::RobotPlan& plans(int index) const;
  ::ssl::RobotPlan* add_plans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssl::RobotPlan >&
      plans() const;

  // @@protoc_insertion_point(class_scope:ssl.TeamPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssl::RobotPlan > plans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssl_5fmixed_5fteam_2eproto;
};
// -------------------------------------------------------------------

class RobotPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssl.RobotPlan) */ {
 public:
  inline RobotPlan() : RobotPlan(nullptr) {};
  virtual ~RobotPlan();

  RobotPlan(const RobotPlan& from);
  RobotPlan(RobotPlan&& from) noexcept
    : RobotPlan() {
    *this = ::std::move(from);
  }

  inline RobotPlan& operator=(const RobotPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotPlan& operator=(RobotPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotPlan* internal_default_instance() {
    return reinterpret_cast<const RobotPlan*>(
               &_RobotPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotPlan& a, RobotPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotPlan* New() const final {
    return CreateMaybeMessage<RobotPlan>(nullptr);
  }

  RobotPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotPlan& from);
  void MergeFrom(const RobotPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssl.RobotPlan";
  }
  protected:
  explicit RobotPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fmixed_5fteam_2eproto);
    return ::descriptor_table_ssl_5fmixed_5fteam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RobotPlan_RobotRole RobotRole;
  static constexpr RobotRole Default =
    RobotPlan_RobotRole_Default;
  static constexpr RobotRole Goalie =
    RobotPlan_RobotRole_Goalie;
  static constexpr RobotRole Defense =
    RobotPlan_RobotRole_Defense;
  static constexpr RobotRole Offense =
    RobotPlan_RobotRole_Offense;
  static inline bool RobotRole_IsValid(int value) {
    return RobotPlan_RobotRole_IsValid(value);
  }
  static constexpr RobotRole RobotRole_MIN =
    RobotPlan_RobotRole_RobotRole_MIN;
  static constexpr RobotRole RobotRole_MAX =
    RobotPlan_RobotRole_RobotRole_MAX;
  static constexpr int RobotRole_ARRAYSIZE =
    RobotPlan_RobotRole_RobotRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RobotRole_descriptor() {
    return RobotPlan_RobotRole_descriptor();
  }
  template<typename T>
  static inline const std::string& RobotRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RobotRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RobotRole_Name.");
    return RobotPlan_RobotRole_Name(enum_t_value);
  }
  static inline bool RobotRole_Parse(const std::string& name,
      RobotRole* value) {
    return RobotPlan_RobotRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNavTargetFieldNumber = 3,
    kShotTargetFieldNumber = 4,
    kRobotIdFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // optional .ssl.Pose nav_target = 3;
  bool has_nav_target() const;
  private:
  bool _internal_has_nav_target() const;
  public:
  void clear_nav_target();
  const ::ssl::Pose& nav_target() const;
  ::ssl::Pose* release_nav_target();
  ::ssl::Pose* mutable_nav_target();
  void set_allocated_nav_target(::ssl::Pose* nav_target);
  private:
  const ::ssl::Pose& _internal_nav_target() const;
  ::ssl::Pose* _internal_mutable_nav_target();
  public:
  void unsafe_arena_set_allocated_nav_target(
      ::ssl::Pose* nav_target);
  ::ssl::Pose* unsafe_arena_release_nav_target();

  // optional .ssl.Location shot_target = 4;
  bool has_shot_target() const;
  private:
  bool _internal_has_shot_target() const;
  public:
  void clear_shot_target();
  const ::ssl::Location& shot_target() const;
  ::ssl::Location* release_shot_target();
  ::ssl::Location* mutable_shot_target();
  void set_allocated_shot_target(::ssl::Location* shot_target);
  private:
  const ::ssl::Location& _internal_shot_target() const;
  ::ssl::Location* _internal_mutable_shot_target();
  public:
  void unsafe_arena_set_allocated_shot_target(
      ::ssl::Location* shot_target);
  ::ssl::Location* unsafe_arena_release_shot_target();

  // required uint32 robot_id = 1;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ssl.RobotPlan.RobotRole role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::ssl::RobotPlan_RobotRole role() const;
  void set_role(::ssl::RobotPlan_RobotRole value);
  private:
  ::ssl::RobotPlan_RobotRole _internal_role() const;
  void _internal_set_role(::ssl::RobotPlan_RobotRole value);
  public:

  // @@protoc_insertion_point(class_scope:ssl.RobotPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ssl::Pose* nav_target_;
  ::ssl::Location* shot_target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  int role_;
  friend struct ::TableStruct_ssl_5fmixed_5fteam_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssl.Location) */ {
 public:
  inline Location() : Location(nullptr) {};
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssl.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fmixed_5fteam_2eproto);
    return ::descriptor_table_ssl_5fmixed_5fteam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ssl.Location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_ssl_5fmixed_5fteam_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssl.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssl.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fmixed_5fteam_2eproto);
    return ::descriptor_table_ssl_5fmixed_5fteam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocFieldNumber = 1,
    kHeadingFieldNumber = 2,
  };
  // optional .ssl.Location loc = 1;
  bool has_loc() const;
  private:
  bool _internal_has_loc() const;
  public:
  void clear_loc();
  const ::ssl::Location& loc() const;
  ::ssl::Location* release_loc();
  ::ssl::Location* mutable_loc();
  void set_allocated_loc(::ssl::Location* loc);
  private:
  const ::ssl::Location& _internal_loc() const;
  ::ssl::Location* _internal_mutable_loc();
  public:
  void unsafe_arena_set_allocated_loc(
      ::ssl::Location* loc);
  ::ssl::Location* unsafe_arena_release_loc();

  // optional float heading = 2;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:ssl.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ssl::Location* loc_;
  float heading_;
  friend struct ::TableStruct_ssl_5fmixed_5fteam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamPlan

// repeated .ssl.RobotPlan plans = 1;
inline int TeamPlan::_internal_plans_size() const {
  return plans_.size();
}
inline int TeamPlan::plans_size() const {
  return _internal_plans_size();
}
inline void TeamPlan::clear_plans() {
  plans_.Clear();
}
inline ::ssl::RobotPlan* TeamPlan::mutable_plans(int index) {
  // @@protoc_insertion_point(field_mutable:ssl.TeamPlan.plans)
  return plans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssl::RobotPlan >*
TeamPlan::mutable_plans() {
  // @@protoc_insertion_point(field_mutable_list:ssl.TeamPlan.plans)
  return &plans_;
}
inline const ::ssl::RobotPlan& TeamPlan::_internal_plans(int index) const {
  return plans_.Get(index);
}
inline const ::ssl::RobotPlan& TeamPlan::plans(int index) const {
  // @@protoc_insertion_point(field_get:ssl.TeamPlan.plans)
  return _internal_plans(index);
}
inline ::ssl::RobotPlan* TeamPlan::_internal_add_plans() {
  return plans_.Add();
}
inline ::ssl::RobotPlan* TeamPlan::add_plans() {
  // @@protoc_insertion_point(field_add:ssl.TeamPlan.plans)
  return _internal_add_plans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssl::RobotPlan >&
TeamPlan::plans() const {
  // @@protoc_insertion_point(field_list:ssl.TeamPlan.plans)
  return plans_;
}

// -------------------------------------------------------------------

// RobotPlan

// required uint32 robot_id = 1;
inline bool RobotPlan::_internal_has_robot_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotPlan::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void RobotPlan::clear_robot_id() {
  robot_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotPlan::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotPlan::robot_id() const {
  // @@protoc_insertion_point(field_get:ssl.RobotPlan.robot_id)
  return _internal_robot_id();
}
inline void RobotPlan::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  robot_id_ = value;
}
inline void RobotPlan::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:ssl.RobotPlan.robot_id)
}

// optional .ssl.RobotPlan.RobotRole role = 2;
inline bool RobotPlan::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotPlan::has_role() const {
  return _internal_has_role();
}
inline void RobotPlan::clear_role() {
  role_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ssl::RobotPlan_RobotRole RobotPlan::_internal_role() const {
  return static_cast< ::ssl::RobotPlan_RobotRole >(role_);
}
inline ::ssl::RobotPlan_RobotRole RobotPlan::role() const {
  // @@protoc_insertion_point(field_get:ssl.RobotPlan.role)
  return _internal_role();
}
inline void RobotPlan::_internal_set_role(::ssl::RobotPlan_RobotRole value) {
  assert(::ssl::RobotPlan_RobotRole_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  role_ = value;
}
inline void RobotPlan::set_role(::ssl::RobotPlan_RobotRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:ssl.RobotPlan.role)
}

// optional .ssl.Pose nav_target = 3;
inline bool RobotPlan::_internal_has_nav_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || nav_target_ != nullptr);
  return value;
}
inline bool RobotPlan::has_nav_target() const {
  return _internal_has_nav_target();
}
inline void RobotPlan::clear_nav_target() {
  if (nav_target_ != nullptr) nav_target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl::Pose& RobotPlan::_internal_nav_target() const {
  const ::ssl::Pose* p = nav_target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ssl::Pose*>(
      &::ssl::_Pose_default_instance_);
}
inline const ::ssl::Pose& RobotPlan::nav_target() const {
  // @@protoc_insertion_point(field_get:ssl.RobotPlan.nav_target)
  return _internal_nav_target();
}
inline void RobotPlan::unsafe_arena_set_allocated_nav_target(
    ::ssl::Pose* nav_target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nav_target_);
  }
  nav_target_ = nav_target;
  if (nav_target) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssl.RobotPlan.nav_target)
}
inline ::ssl::Pose* RobotPlan::release_nav_target() {
  auto temp = unsafe_arena_release_nav_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ssl::Pose* RobotPlan::unsafe_arena_release_nav_target() {
  // @@protoc_insertion_point(field_release:ssl.RobotPlan.nav_target)
  _has_bits_[0] &= ~0x00000001u;
  ::ssl::Pose* temp = nav_target_;
  nav_target_ = nullptr;
  return temp;
}
inline ::ssl::Pose* RobotPlan::_internal_mutable_nav_target() {
  _has_bits_[0] |= 0x00000001u;
  if (nav_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssl::Pose>(GetArena());
    nav_target_ = p;
  }
  return nav_target_;
}
inline ::ssl::Pose* RobotPlan::mutable_nav_target() {
  // @@protoc_insertion_point(field_mutable:ssl.RobotPlan.nav_target)
  return _internal_mutable_nav_target();
}
inline void RobotPlan::set_allocated_nav_target(::ssl::Pose* nav_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nav_target_;
  }
  if (nav_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nav_target);
    if (message_arena != submessage_arena) {
      nav_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nav_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nav_target_ = nav_target;
  // @@protoc_insertion_point(field_set_allocated:ssl.RobotPlan.nav_target)
}

// optional .ssl.Location shot_target = 4;
inline bool RobotPlan::_internal_has_shot_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || shot_target_ != nullptr);
  return value;
}
inline bool RobotPlan::has_shot_target() const {
  return _internal_has_shot_target();
}
inline void RobotPlan::clear_shot_target() {
  if (shot_target_ != nullptr) shot_target_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl::Location& RobotPlan::_internal_shot_target() const {
  const ::ssl::Location* p = shot_target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ssl::Location*>(
      &::ssl::_Location_default_instance_);
}
inline const ::ssl::Location& RobotPlan::shot_target() const {
  // @@protoc_insertion_point(field_get:ssl.RobotPlan.shot_target)
  return _internal_shot_target();
}
inline void RobotPlan::unsafe_arena_set_allocated_shot_target(
    ::ssl::Location* shot_target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shot_target_);
  }
  shot_target_ = shot_target;
  if (shot_target) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssl.RobotPlan.shot_target)
}
inline ::ssl::Location* RobotPlan::release_shot_target() {
  auto temp = unsafe_arena_release_shot_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ssl::Location* RobotPlan::unsafe_arena_release_shot_target() {
  // @@protoc_insertion_point(field_release:ssl.RobotPlan.shot_target)
  _has_bits_[0] &= ~0x00000002u;
  ::ssl::Location* temp = shot_target_;
  shot_target_ = nullptr;
  return temp;
}
inline ::ssl::Location* RobotPlan::_internal_mutable_shot_target() {
  _has_bits_[0] |= 0x00000002u;
  if (shot_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssl::Location>(GetArena());
    shot_target_ = p;
  }
  return shot_target_;
}
inline ::ssl::Location* RobotPlan::mutable_shot_target() {
  // @@protoc_insertion_point(field_mutable:ssl.RobotPlan.shot_target)
  return _internal_mutable_shot_target();
}
inline void RobotPlan::set_allocated_shot_target(::ssl::Location* shot_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shot_target_;
  }
  if (shot_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shot_target);
    if (message_arena != submessage_arena) {
      shot_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shot_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shot_target_ = shot_target;
  // @@protoc_insertion_point(field_set_allocated:ssl.RobotPlan.shot_target)
}

// -------------------------------------------------------------------

// Location

// required int32 x = 1;
inline bool Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Location::has_x() const {
  return _internal_has_x();
}
inline void Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::x() const {
  // @@protoc_insertion_point(field_get:ssl.Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Location::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ssl.Location.x)
}

// required int32 y = 2;
inline bool Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Location::has_y() const {
  return _internal_has_y();
}
inline void Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::y() const {
  // @@protoc_insertion_point(field_get:ssl.Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Location::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ssl.Location.y)
}

// -------------------------------------------------------------------

// Pose

// optional .ssl.Location loc = 1;
inline bool Pose::_internal_has_loc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || loc_ != nullptr);
  return value;
}
inline bool Pose::has_loc() const {
  return _internal_has_loc();
}
inline void Pose::clear_loc() {
  if (loc_ != nullptr) loc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl::Location& Pose::_internal_loc() const {
  const ::ssl::Location* p = loc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ssl::Location*>(
      &::ssl::_Location_default_instance_);
}
inline const ::ssl::Location& Pose::loc() const {
  // @@protoc_insertion_point(field_get:ssl.Pose.loc)
  return _internal_loc();
}
inline void Pose::unsafe_arena_set_allocated_loc(
    ::ssl::Location* loc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loc_);
  }
  loc_ = loc;
  if (loc) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssl.Pose.loc)
}
inline ::ssl::Location* Pose::release_loc() {
  auto temp = unsafe_arena_release_loc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ssl::Location* Pose::unsafe_arena_release_loc() {
  // @@protoc_insertion_point(field_release:ssl.Pose.loc)
  _has_bits_[0] &= ~0x00000001u;
  ::ssl::Location* temp = loc_;
  loc_ = nullptr;
  return temp;
}
inline ::ssl::Location* Pose::_internal_mutable_loc() {
  _has_bits_[0] |= 0x00000001u;
  if (loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssl::Location>(GetArena());
    loc_ = p;
  }
  return loc_;
}
inline ::ssl::Location* Pose::mutable_loc() {
  // @@protoc_insertion_point(field_mutable:ssl.Pose.loc)
  return _internal_mutable_loc();
}
inline void Pose::set_allocated_loc(::ssl::Location* loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loc_;
  }
  if (loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loc);
    if (message_arena != submessage_arena) {
      loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loc_ = loc;
  // @@protoc_insertion_point(field_set_allocated:ssl.Pose.loc)
}

// optional float heading = 2;
inline bool Pose::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pose::has_heading() const {
  return _internal_has_heading();
}
inline void Pose::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Pose::_internal_heading() const {
  return heading_;
}
inline float Pose::heading() const {
  // @@protoc_insertion_point(field_get:ssl.Pose.heading)
  return _internal_heading();
}
inline void Pose::_internal_set_heading(float value) {
  _has_bits_[0] |= 0x00000002u;
  heading_ = value;
}
inline void Pose::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:ssl.Pose.heading)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ssl::RobotPlan_RobotRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl::RobotPlan_RobotRole>() {
  return ::ssl::RobotPlan_RobotRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fmixed_5fteam_2eproto
