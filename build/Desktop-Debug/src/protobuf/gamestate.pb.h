// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamestate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gamestate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gamestate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_referee.pb.h"
#include "ssl_referee_game_event.pb.h"
#include "ssl_game_event_2019.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gamestate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gamestate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gamestate_2eproto;
namespace amun {
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
}  // namespace amun
PROTOBUF_NAMESPACE_OPEN
template<> ::amun::GameState* Arena::CreateMaybeMessage<::amun::GameState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amun {

enum GameState_State : int {
  GameState_State_Halt = 1,
  GameState_State_Stop = 2,
  GameState_State_Game = 3,
  GameState_State_GameForce = 4,
  GameState_State_KickoffYellowPrepare = 5,
  GameState_State_KickoffYellow = 6,
  GameState_State_PenaltyYellowPrepare = 7,
  GameState_State_PenaltyYellow = 8,
  GameState_State_PenaltyYellowRunning = 21,
  GameState_State_DirectYellow = 9,
  GameState_State_IndirectYellow = 10,
  GameState_State_BallPlacementYellow = 19,
  GameState_State_KickoffBluePrepare = 11,
  GameState_State_KickoffBlue = 12,
  GameState_State_PenaltyBluePrepare = 13,
  GameState_State_PenaltyBlue = 14,
  GameState_State_PenaltyBlueRunning = 22,
  GameState_State_DirectBlue = 15,
  GameState_State_IndirectBlue = 16,
  GameState_State_BallPlacementBlue = 20,
  GameState_State_TimeoutYellow = 17,
  GameState_State_TimeoutBlue = 18
};
bool GameState_State_IsValid(int value);
constexpr GameState_State GameState_State_State_MIN = GameState_State_Halt;
constexpr GameState_State GameState_State_State_MAX = GameState_State_PenaltyBlueRunning;
constexpr int GameState_State_State_ARRAYSIZE = GameState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_State_descriptor();
template<typename T>
inline const std::string& GameState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameState_State_descriptor(), enum_t_value);
}
inline bool GameState_State_Parse(
    const std::string& name, GameState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState_State>(
    GameState_State_descriptor(), name, value);
}
// ===================================================================

class GameState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amun.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {};
  virtual ~GameState();

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(nullptr);
  }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amun.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamestate_2eproto);
    return ::descriptor_table_gamestate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameState_State State;
  static constexpr State Halt =
    GameState_State_Halt;
  static constexpr State Stop =
    GameState_State_Stop;
  static constexpr State Game =
    GameState_State_Game;
  static constexpr State GameForce =
    GameState_State_GameForce;
  static constexpr State KickoffYellowPrepare =
    GameState_State_KickoffYellowPrepare;
  static constexpr State KickoffYellow =
    GameState_State_KickoffYellow;
  static constexpr State PenaltyYellowPrepare =
    GameState_State_PenaltyYellowPrepare;
  static constexpr State PenaltyYellow =
    GameState_State_PenaltyYellow;
  static constexpr State PenaltyYellowRunning =
    GameState_State_PenaltyYellowRunning;
  static constexpr State DirectYellow =
    GameState_State_DirectYellow;
  static constexpr State IndirectYellow =
    GameState_State_IndirectYellow;
  static constexpr State BallPlacementYellow =
    GameState_State_BallPlacementYellow;
  static constexpr State KickoffBluePrepare =
    GameState_State_KickoffBluePrepare;
  static constexpr State KickoffBlue =
    GameState_State_KickoffBlue;
  static constexpr State PenaltyBluePrepare =
    GameState_State_PenaltyBluePrepare;
  static constexpr State PenaltyBlue =
    GameState_State_PenaltyBlue;
  static constexpr State PenaltyBlueRunning =
    GameState_State_PenaltyBlueRunning;
  static constexpr State DirectBlue =
    GameState_State_DirectBlue;
  static constexpr State IndirectBlue =
    GameState_State_IndirectBlue;
  static constexpr State BallPlacementBlue =
    GameState_State_BallPlacementBlue;
  static constexpr State TimeoutYellow =
    GameState_State_TimeoutYellow;
  static constexpr State TimeoutBlue =
    GameState_State_TimeoutBlue;
  static inline bool State_IsValid(int value) {
    return GameState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    GameState_State_State_MIN;
  static constexpr State State_MAX =
    GameState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    GameState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return GameState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return GameState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return GameState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameEvent2019FieldNumber = 12,
    kYellowFieldNumber = 4,
    kBlueFieldNumber = 5,
    kDesignatedPositionFieldNumber = 6,
    kGameEventFieldNumber = 7,
    kStageFieldNumber = 1,
    kStageTimeLeftFieldNumber = 2,
    kGoalsFlippedFieldNumber = 8,
    kIsRealGameRunningFieldNumber = 9,
    kCurrentActionTimeRemainingFieldNumber = 10,
    kStateFieldNumber = 3,
    kNextStateFieldNumber = 11,
  };
  // repeated .gameController.GameEvent game_event_2019 = 12;
  int game_event_2019_size() const;
  private:
  int _internal_game_event_2019_size() const;
  public:
  void clear_game_event_2019();
  ::gameController::GameEvent* mutable_game_event_2019(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameController::GameEvent >*
      mutable_game_event_2019();
  private:
  const ::gameController::GameEvent& _internal_game_event_2019(int index) const;
  ::gameController::GameEvent* _internal_add_game_event_2019();
  public:
  const ::gameController::GameEvent& game_event_2019(int index) const;
  ::gameController::GameEvent* add_game_event_2019();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameController::GameEvent >&
      game_event_2019() const;

  // required .SSL_Referee.TeamInfo yellow = 4;
  bool has_yellow() const;
  private:
  bool _internal_has_yellow() const;
  public:
  void clear_yellow();
  const ::SSL_Referee_TeamInfo& yellow() const;
  ::SSL_Referee_TeamInfo* release_yellow();
  ::SSL_Referee_TeamInfo* mutable_yellow();
  void set_allocated_yellow(::SSL_Referee_TeamInfo* yellow);
  private:
  const ::SSL_Referee_TeamInfo& _internal_yellow() const;
  ::SSL_Referee_TeamInfo* _internal_mutable_yellow();
  public:
  void unsafe_arena_set_allocated_yellow(
      ::SSL_Referee_TeamInfo* yellow);
  ::SSL_Referee_TeamInfo* unsafe_arena_release_yellow();

  // required .SSL_Referee.TeamInfo blue = 5;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  const ::SSL_Referee_TeamInfo& blue() const;
  ::SSL_Referee_TeamInfo* release_blue();
  ::SSL_Referee_TeamInfo* mutable_blue();
  void set_allocated_blue(::SSL_Referee_TeamInfo* blue);
  private:
  const ::SSL_Referee_TeamInfo& _internal_blue() const;
  ::SSL_Referee_TeamInfo* _internal_mutable_blue();
  public:
  void unsafe_arena_set_allocated_blue(
      ::SSL_Referee_TeamInfo* blue);
  ::SSL_Referee_TeamInfo* unsafe_arena_release_blue();

  // optional .SSL_Referee.Point designated_position = 6;
  bool has_designated_position() const;
  private:
  bool _internal_has_designated_position() const;
  public:
  void clear_designated_position();
  const ::SSL_Referee_Point& designated_position() const;
  ::SSL_Referee_Point* release_designated_position();
  ::SSL_Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::SSL_Referee_Point* designated_position);
  private:
  const ::SSL_Referee_Point& _internal_designated_position() const;
  ::SSL_Referee_Point* _internal_mutable_designated_position();
  public:
  void unsafe_arena_set_allocated_designated_position(
      ::SSL_Referee_Point* designated_position);
  ::SSL_Referee_Point* unsafe_arena_release_designated_position();

  // optional .SSL_Referee_Game_Event game_event = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  PROTOBUF_DEPRECATED void clear_game_event();
  PROTOBUF_DEPRECATED const ::SSL_Referee_Game_Event& game_event() const;
  PROTOBUF_DEPRECATED ::SSL_Referee_Game_Event* release_game_event();
  PROTOBUF_DEPRECATED ::SSL_Referee_Game_Event* mutable_game_event();
  PROTOBUF_DEPRECATED void set_allocated_game_event(::SSL_Referee_Game_Event* game_event);
  private:
  const ::SSL_Referee_Game_Event& _internal_game_event() const;
  ::SSL_Referee_Game_Event* _internal_mutable_game_event();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_game_event(
      ::SSL_Referee_Game_Event* game_event);
  PROTOBUF_DEPRECATED ::SSL_Referee_Game_Event* unsafe_arena_release_game_event();

  // required .SSL_Referee.Stage stage = 1;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::SSL_Referee_Stage stage() const;
  void set_stage(::SSL_Referee_Stage value);
  private:
  ::SSL_Referee_Stage _internal_stage() const;
  void _internal_set_stage(::SSL_Referee_Stage value);
  public:

  // optional sint32 stage_time_left = 2;
  bool has_stage_time_left() const;
  private:
  bool _internal_has_stage_time_left() const;
  public:
  void clear_stage_time_left();
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left() const;
  void set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_time_left() const;
  void _internal_set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool goals_flipped = 8;
  bool has_goals_flipped() const;
  private:
  bool _internal_has_goals_flipped() const;
  public:
  void clear_goals_flipped();
  bool goals_flipped() const;
  void set_goals_flipped(bool value);
  private:
  bool _internal_goals_flipped() const;
  void _internal_set_goals_flipped(bool value);
  public:

  // optional bool is_real_game_running = 9;
  bool has_is_real_game_running() const;
  private:
  bool _internal_has_is_real_game_running() const;
  public:
  void clear_is_real_game_running();
  bool is_real_game_running() const;
  void set_is_real_game_running(bool value);
  private:
  bool _internal_is_real_game_running() const;
  void _internal_set_is_real_game_running(bool value);
  public:

  // optional int32 current_action_time_remaining = 10;
  bool has_current_action_time_remaining() const;
  private:
  bool _internal_has_current_action_time_remaining() const;
  public:
  void clear_current_action_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 current_action_time_remaining() const;
  void set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_action_time_remaining() const;
  void _internal_set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .amun.GameState.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::amun::GameState_State state() const;
  void set_state(::amun::GameState_State value);
  private:
  ::amun::GameState_State _internal_state() const;
  void _internal_set_state(::amun::GameState_State value);
  public:

  // optional .amun.GameState.State next_state = 11;
  bool has_next_state() const;
  private:
  bool _internal_has_next_state() const;
  public:
  void clear_next_state();
  ::amun::GameState_State next_state() const;
  void set_next_state(::amun::GameState_State value);
  private:
  ::amun::GameState_State _internal_next_state() const;
  void _internal_set_next_state(::amun::GameState_State value);
  public:

  // @@protoc_insertion_point(class_scope:amun.GameState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameController::GameEvent > game_event_2019_;
  ::SSL_Referee_TeamInfo* yellow_;
  ::SSL_Referee_TeamInfo* blue_;
  ::SSL_Referee_Point* designated_position_;
  ::SSL_Referee_Game_Event* game_event_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left_;
  bool goals_flipped_;
  bool is_real_game_running_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_action_time_remaining_;
  int state_;
  int next_state_;
  friend struct ::TableStruct_gamestate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// required .SSL_Referee.Stage stage = 1;
inline bool GameState::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameState::has_stage() const {
  return _internal_has_stage();
}
inline void GameState::clear_stage() {
  stage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::SSL_Referee_Stage GameState::_internal_stage() const {
  return static_cast< ::SSL_Referee_Stage >(stage_);
}
inline ::SSL_Referee_Stage GameState::stage() const {
  // @@protoc_insertion_point(field_get:amun.GameState.stage)
  return _internal_stage();
}
inline void GameState::_internal_set_stage(::SSL_Referee_Stage value) {
  assert(::SSL_Referee_Stage_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  stage_ = value;
}
inline void GameState::set_stage(::SSL_Referee_Stage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:amun.GameState.stage)
}

// optional sint32 stage_time_left = 2;
inline bool GameState::_internal_has_stage_time_left() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameState::has_stage_time_left() const {
  return _internal_has_stage_time_left();
}
inline void GameState::clear_stage_time_left() {
  stage_time_left_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::_internal_stage_time_left() const {
  return stage_time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::stage_time_left() const {
  // @@protoc_insertion_point(field_get:amun.GameState.stage_time_left)
  return _internal_stage_time_left();
}
inline void GameState::_internal_set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  stage_time_left_ = value;
}
inline void GameState::set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage_time_left(value);
  // @@protoc_insertion_point(field_set:amun.GameState.stage_time_left)
}

// required .amun.GameState.State state = 3;
inline bool GameState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GameState::has_state() const {
  return _internal_has_state();
}
inline void GameState::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::amun::GameState_State GameState::_internal_state() const {
  return static_cast< ::amun::GameState_State >(state_);
}
inline ::amun::GameState_State GameState::state() const {
  // @@protoc_insertion_point(field_get:amun.GameState.state)
  return _internal_state();
}
inline void GameState::_internal_set_state(::amun::GameState_State value) {
  assert(::amun::GameState_State_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  state_ = value;
}
inline void GameState::set_state(::amun::GameState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:amun.GameState.state)
}

// required .SSL_Referee.TeamInfo yellow = 4;
inline bool GameState::_internal_has_yellow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || yellow_ != nullptr);
  return value;
}
inline bool GameState::has_yellow() const {
  return _internal_has_yellow();
}
inline const ::SSL_Referee_TeamInfo& GameState::_internal_yellow() const {
  const ::SSL_Referee_TeamInfo* p = yellow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_TeamInfo*>(
      &::_SSL_Referee_TeamInfo_default_instance_);
}
inline const ::SSL_Referee_TeamInfo& GameState::yellow() const {
  // @@protoc_insertion_point(field_get:amun.GameState.yellow)
  return _internal_yellow();
}
inline void GameState::unsafe_arena_set_allocated_yellow(
    ::SSL_Referee_TeamInfo* yellow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yellow_);
  }
  yellow_ = yellow;
  if (yellow) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.GameState.yellow)
}
inline ::SSL_Referee_TeamInfo* GameState::release_yellow() {
  auto temp = unsafe_arena_release_yellow();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_TeamInfo* GameState::unsafe_arena_release_yellow() {
  // @@protoc_insertion_point(field_release:amun.GameState.yellow)
  _has_bits_[0] &= ~0x00000001u;
  ::SSL_Referee_TeamInfo* temp = yellow_;
  yellow_ = nullptr;
  return temp;
}
inline ::SSL_Referee_TeamInfo* GameState::_internal_mutable_yellow() {
  _has_bits_[0] |= 0x00000001u;
  if (yellow_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_TeamInfo>(GetArena());
    yellow_ = p;
  }
  return yellow_;
}
inline ::SSL_Referee_TeamInfo* GameState::mutable_yellow() {
  // @@protoc_insertion_point(field_mutable:amun.GameState.yellow)
  return _internal_mutable_yellow();
}
inline void GameState::set_allocated_yellow(::SSL_Referee_TeamInfo* yellow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(yellow_);
  }
  if (yellow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yellow)->GetArena();
    if (message_arena != submessage_arena) {
      yellow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  yellow_ = yellow;
  // @@protoc_insertion_point(field_set_allocated:amun.GameState.yellow)
}

// required .SSL_Referee.TeamInfo blue = 5;
inline bool GameState::_internal_has_blue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || blue_ != nullptr);
  return value;
}
inline bool GameState::has_blue() const {
  return _internal_has_blue();
}
inline const ::SSL_Referee_TeamInfo& GameState::_internal_blue() const {
  const ::SSL_Referee_TeamInfo* p = blue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_TeamInfo*>(
      &::_SSL_Referee_TeamInfo_default_instance_);
}
inline const ::SSL_Referee_TeamInfo& GameState::blue() const {
  // @@protoc_insertion_point(field_get:amun.GameState.blue)
  return _internal_blue();
}
inline void GameState::unsafe_arena_set_allocated_blue(
    ::SSL_Referee_TeamInfo* blue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue_);
  }
  blue_ = blue;
  if (blue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.GameState.blue)
}
inline ::SSL_Referee_TeamInfo* GameState::release_blue() {
  auto temp = unsafe_arena_release_blue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_TeamInfo* GameState::unsafe_arena_release_blue() {
  // @@protoc_insertion_point(field_release:amun.GameState.blue)
  _has_bits_[0] &= ~0x00000002u;
  ::SSL_Referee_TeamInfo* temp = blue_;
  blue_ = nullptr;
  return temp;
}
inline ::SSL_Referee_TeamInfo* GameState::_internal_mutable_blue() {
  _has_bits_[0] |= 0x00000002u;
  if (blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_TeamInfo>(GetArena());
    blue_ = p;
  }
  return blue_;
}
inline ::SSL_Referee_TeamInfo* GameState::mutable_blue() {
  // @@protoc_insertion_point(field_mutable:amun.GameState.blue)
  return _internal_mutable_blue();
}
inline void GameState::set_allocated_blue(::SSL_Referee_TeamInfo* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue_);
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue)->GetArena();
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:amun.GameState.blue)
}

// optional .SSL_Referee.Point designated_position = 6;
inline bool GameState::_internal_has_designated_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || designated_position_ != nullptr);
  return value;
}
inline bool GameState::has_designated_position() const {
  return _internal_has_designated_position();
}
inline const ::SSL_Referee_Point& GameState::_internal_designated_position() const {
  const ::SSL_Referee_Point* p = designated_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Point*>(
      &::_SSL_Referee_Point_default_instance_);
}
inline const ::SSL_Referee_Point& GameState::designated_position() const {
  // @@protoc_insertion_point(field_get:amun.GameState.designated_position)
  return _internal_designated_position();
}
inline void GameState::unsafe_arena_set_allocated_designated_position(
    ::SSL_Referee_Point* designated_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position_);
  }
  designated_position_ = designated_position;
  if (designated_position) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.GameState.designated_position)
}
inline ::SSL_Referee_Point* GameState::release_designated_position() {
  auto temp = unsafe_arena_release_designated_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_Point* GameState::unsafe_arena_release_designated_position() {
  // @@protoc_insertion_point(field_release:amun.GameState.designated_position)
  _has_bits_[0] &= ~0x00000004u;
  ::SSL_Referee_Point* temp = designated_position_;
  designated_position_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Point* GameState::_internal_mutable_designated_position() {
  _has_bits_[0] |= 0x00000004u;
  if (designated_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Point>(GetArena());
    designated_position_ = p;
  }
  return designated_position_;
}
inline ::SSL_Referee_Point* GameState::mutable_designated_position() {
  // @@protoc_insertion_point(field_mutable:amun.GameState.designated_position)
  return _internal_mutable_designated_position();
}
inline void GameState::set_allocated_designated_position(::SSL_Referee_Point* designated_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position_);
  }
  if (designated_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position)->GetArena();
    if (message_arena != submessage_arena) {
      designated_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:amun.GameState.designated_position)
}

// optional .SSL_Referee_Game_Event game_event = 7 [deprecated = true];
inline bool GameState::_internal_has_game_event() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || game_event_ != nullptr);
  return value;
}
inline bool GameState::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::SSL_Referee_Game_Event& GameState::_internal_game_event() const {
  const ::SSL_Referee_Game_Event* p = game_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Game_Event*>(
      &::_SSL_Referee_Game_Event_default_instance_);
}
inline const ::SSL_Referee_Game_Event& GameState::game_event() const {
  // @@protoc_insertion_point(field_get:amun.GameState.game_event)
  return _internal_game_event();
}
inline void GameState::unsafe_arena_set_allocated_game_event(
    ::SSL_Referee_Game_Event* game_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  game_event_ = game_event;
  if (game_event) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amun.GameState.game_event)
}
inline ::SSL_Referee_Game_Event* GameState::release_game_event() {
  auto temp = unsafe_arena_release_game_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_Game_Event* GameState::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:amun.GameState.game_event)
  _has_bits_[0] &= ~0x00000008u;
  ::SSL_Referee_Game_Event* temp = game_event_;
  game_event_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Game_Event* GameState::_internal_mutable_game_event() {
  _has_bits_[0] |= 0x00000008u;
  if (game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Game_Event>(GetArena());
    game_event_ = p;
  }
  return game_event_;
}
inline ::SSL_Referee_Game_Event* GameState::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable:amun.GameState.game_event)
  return _internal_mutable_game_event();
}
inline void GameState::set_allocated_game_event(::SSL_Referee_Game_Event* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event)->GetArena();
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:amun.GameState.game_event)
}

// optional bool goals_flipped = 8;
inline bool GameState::_internal_has_goals_flipped() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GameState::has_goals_flipped() const {
  return _internal_has_goals_flipped();
}
inline void GameState::clear_goals_flipped() {
  goals_flipped_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GameState::_internal_goals_flipped() const {
  return goals_flipped_;
}
inline bool GameState::goals_flipped() const {
  // @@protoc_insertion_point(field_get:amun.GameState.goals_flipped)
  return _internal_goals_flipped();
}
inline void GameState::_internal_set_goals_flipped(bool value) {
  _has_bits_[0] |= 0x00000040u;
  goals_flipped_ = value;
}
inline void GameState::set_goals_flipped(bool value) {
  _internal_set_goals_flipped(value);
  // @@protoc_insertion_point(field_set:amun.GameState.goals_flipped)
}

// optional bool is_real_game_running = 9;
inline bool GameState::_internal_has_is_real_game_running() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GameState::has_is_real_game_running() const {
  return _internal_has_is_real_game_running();
}
inline void GameState::clear_is_real_game_running() {
  is_real_game_running_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool GameState::_internal_is_real_game_running() const {
  return is_real_game_running_;
}
inline bool GameState::is_real_game_running() const {
  // @@protoc_insertion_point(field_get:amun.GameState.is_real_game_running)
  return _internal_is_real_game_running();
}
inline void GameState::_internal_set_is_real_game_running(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_real_game_running_ = value;
}
inline void GameState::set_is_real_game_running(bool value) {
  _internal_set_is_real_game_running(value);
  // @@protoc_insertion_point(field_set:amun.GameState.is_real_game_running)
}

// optional int32 current_action_time_remaining = 10;
inline bool GameState::_internal_has_current_action_time_remaining() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GameState::has_current_action_time_remaining() const {
  return _internal_has_current_action_time_remaining();
}
inline void GameState::clear_current_action_time_remaining() {
  current_action_time_remaining_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::_internal_current_action_time_remaining() const {
  return current_action_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:amun.GameState.current_action_time_remaining)
  return _internal_current_action_time_remaining();
}
inline void GameState::_internal_set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  current_action_time_remaining_ = value;
}
inline void GameState::set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_action_time_remaining(value);
  // @@protoc_insertion_point(field_set:amun.GameState.current_action_time_remaining)
}

// optional .amun.GameState.State next_state = 11;
inline bool GameState::_internal_has_next_state() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GameState::has_next_state() const {
  return _internal_has_next_state();
}
inline void GameState::clear_next_state() {
  next_state_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::amun::GameState_State GameState::_internal_next_state() const {
  return static_cast< ::amun::GameState_State >(next_state_);
}
inline ::amun::GameState_State GameState::next_state() const {
  // @@protoc_insertion_point(field_get:amun.GameState.next_state)
  return _internal_next_state();
}
inline void GameState::_internal_set_next_state(::amun::GameState_State value) {
  assert(::amun::GameState_State_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  next_state_ = value;
}
inline void GameState::set_next_state(::amun::GameState_State value) {
  _internal_set_next_state(value);
  // @@protoc_insertion_point(field_set:amun.GameState.next_state)
}

// repeated .gameController.GameEvent game_event_2019 = 12;
inline int GameState::_internal_game_event_2019_size() const {
  return game_event_2019_.size();
}
inline int GameState::game_event_2019_size() const {
  return _internal_game_event_2019_size();
}
inline ::gameController::GameEvent* GameState::mutable_game_event_2019(int index) {
  // @@protoc_insertion_point(field_mutable:amun.GameState.game_event_2019)
  return game_event_2019_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameController::GameEvent >*
GameState::mutable_game_event_2019() {
  // @@protoc_insertion_point(field_mutable_list:amun.GameState.game_event_2019)
  return &game_event_2019_;
}
inline const ::gameController::GameEvent& GameState::_internal_game_event_2019(int index) const {
  return game_event_2019_.Get(index);
}
inline const ::gameController::GameEvent& GameState::game_event_2019(int index) const {
  // @@protoc_insertion_point(field_get:amun.GameState.game_event_2019)
  return _internal_game_event_2019(index);
}
inline ::gameController::GameEvent* GameState::_internal_add_game_event_2019() {
  return game_event_2019_.Add();
}
inline ::gameController::GameEvent* GameState::add_game_event_2019() {
  // @@protoc_insertion_point(field_add:amun.GameState.game_event_2019)
  return _internal_add_game_event_2019();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameController::GameEvent >&
GameState::game_event_2019() const {
  // @@protoc_insertion_point(field_list:amun.GameState.game_event_2019)
  return game_event_2019_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace amun

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::amun::GameState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amun::GameState_State>() {
  return ::amun::GameState_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gamestate_2eproto
