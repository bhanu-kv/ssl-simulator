// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fwrapper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSL_WrapperPacket_ssl_5fwrapper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RadioResponse_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fmixed_5fteam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamPlan_ssl_5fmixed_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ball_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallModel_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallPosition_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robot_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotPosition_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimBall_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimRobot_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorState_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingAOI_world_2eproto;
namespace world {
class GeometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geometry> _instance;
} _Geometry_default_instance_;
class BallModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BallModel> _instance;
} _BallModel_default_instance_;
class DivisionDimensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DivisionDimensions> _instance;
} _DivisionDimensions_default_instance_;
class BallPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BallPosition> _instance;
} _BallPosition_default_instance_;
class BallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ball> _instance;
} _Ball_default_instance_;
class RobotPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotPosition> _instance;
} _RobotPosition_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot> _instance;
} _Robot_default_instance_;
class TrackingAOIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingAOI> _instance;
} _TrackingAOI_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class SimulatorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorState> _instance;
} _SimulatorState_default_instance_;
class SimBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimBall> _instance;
} _SimBall_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class SimRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimRobot> _instance;
} _SimRobot_default_instance_;
}  // namespace world
static void InitDefaultsscc_info_Ball_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_Ball_default_instance_;
    new (ptr) ::world::Ball();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::Ball::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ball_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ball_world_2eproto}, {
      &scc_info_BallPosition_world_2eproto.base,}};

static void InitDefaultsscc_info_BallModel_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_BallModel_default_instance_;
    new (ptr) ::world::BallModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::BallModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallModel_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BallModel_world_2eproto}, {}};

static void InitDefaultsscc_info_BallPosition_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_BallPosition_default_instance_;
    new (ptr) ::world::BallPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::BallPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallPosition_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BallPosition_world_2eproto}, {}};

static void InitDefaultsscc_info_DivisionDimensions_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_DivisionDimensions_default_instance_;
    new (ptr) ::world::DivisionDimensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::DivisionDimensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DivisionDimensions_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DivisionDimensions_world_2eproto}, {}};

static void InitDefaultsscc_info_Geometry_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_Geometry_default_instance_;
    new (ptr) ::world::Geometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::Geometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Geometry_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Geometry_world_2eproto}, {
      &scc_info_BallModel_world_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_Quaternion_default_instance_;
    new (ptr) ::world::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_world_2eproto}, {}};

static void InitDefaultsscc_info_Robot_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_Robot_default_instance_;
    new (ptr) ::world::Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::Robot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robot_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Robot_world_2eproto}, {
      &scc_info_RobotPosition_world_2eproto.base,}};

static void InitDefaultsscc_info_RobotPosition_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_RobotPosition_default_instance_;
    new (ptr) ::world::RobotPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::RobotPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotPosition_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotPosition_world_2eproto}, {}};

static void InitDefaultsscc_info_SimBall_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_SimBall_default_instance_;
    new (ptr) ::world::SimBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::SimBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimBall_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimBall_world_2eproto}, {}};

static void InitDefaultsscc_info_SimRobot_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_SimRobot_default_instance_;
    new (ptr) ::world::SimRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::SimRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimRobot_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimRobot_world_2eproto}, {
      &scc_info_Quaternion_world_2eproto.base,}};

static void InitDefaultsscc_info_SimulatorState_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_SimulatorState_default_instance_;
    new (ptr) ::world::SimulatorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::SimulatorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorState_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulatorState_world_2eproto}, {
      &scc_info_SimRobot_world_2eproto.base,
      &scc_info_SimBall_world_2eproto.base,}};

static void InitDefaultsscc_info_State_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_State_default_instance_;
    new (ptr) ::world::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_State_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_State_world_2eproto}, {
      &scc_info_Ball_world_2eproto.base,
      &scc_info_Robot_world_2eproto.base,
      &scc_info_RadioResponse_robot_2eproto.base,
      &scc_info_TeamPlan_ssl_5fmixed_5fteam_2eproto.base,
      &scc_info_TrackingAOI_world_2eproto.base,
      &scc_info_SimulatorState_world_2eproto.base,
      &scc_info_SSL_WrapperPacket_ssl_5fwrapper_2eproto.base,}};

static void InitDefaultsscc_info_TrackingAOI_world_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::world::_TrackingAOI_default_instance_;
    new (ptr) ::world::TrackingAOI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::world::TrackingAOI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingAOI_world_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackingAOI_world_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_world_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_world_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_world_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::world::Geometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::Geometry, line_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, field_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, field_height_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, boundary_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, goal_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, goal_depth_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, goal_wall_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, center_circle_radius_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, defense_radius_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, defense_stretch_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, free_kick_from_defense_dist_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, penalty_spot_from_field_line_dist_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, penalty_line_from_spot_dist_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, goal_height_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, defense_width_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, defense_height_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, type_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, division_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, ball_model_),
  PROTOBUF_FIELD_OFFSET(::world::Geometry, corner_block_cathetus_length_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  17,
  18,
  19,
  0,
  15,
  PROTOBUF_FIELD_OFFSET(::world::BallModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::BallModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::BallModel, fast_deceleration_),
  PROTOBUF_FIELD_OFFSET(::world::BallModel, slow_deceleration_),
  PROTOBUF_FIELD_OFFSET(::world::BallModel, switch_ratio_),
  PROTOBUF_FIELD_OFFSET(::world::BallModel, z_damping_),
  PROTOBUF_FIELD_OFFSET(::world::BallModel, xy_damping_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, field_width_a_),
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, field_height_a_),
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, field_width_b_),
  PROTOBUF_FIELD_OFFSET(::world::DivisionDimensions, field_height_b_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, time_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, derived_z_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, system_delay_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, time_diff_scaled_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, camera_id_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, area_),
  PROTOBUF_FIELD_OFFSET(::world::BallPosition, vision_processing_time_),
  0,
  1,
  2,
  8,
  3,
  4,
  5,
  6,
  7,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::world::Ball, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::Ball, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, p_z_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, v_z_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, touchdown_x_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, touchdown_y_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, is_bouncing_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, max_speed_),
  PROTOBUF_FIELD_OFFSET(::world::Ball, raw_),
  0,
  1,
  4,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, time_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, phi_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, system_delay_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, time_diff_scaled_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, omega_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, camera_id_),
  PROTOBUF_FIELD_OFFSET(::world::RobotPosition, vision_processing_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::world::Robot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::Robot, id_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, phi_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, omega_),
  PROTOBUF_FIELD_OFFSET(::world::Robot, raw_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, x1_),
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, y1_),
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, x2_),
  PROTOBUF_FIELD_OFFSET(::world::TrackingAOI, y2_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::world::State, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::State, time_),
  PROTOBUF_FIELD_OFFSET(::world::State, ball_),
  PROTOBUF_FIELD_OFFSET(::world::State, yellow_),
  PROTOBUF_FIELD_OFFSET(::world::State, blue_),
  PROTOBUF_FIELD_OFFSET(::world::State, radio_response_),
  PROTOBUF_FIELD_OFFSET(::world::State, is_simulated_),
  PROTOBUF_FIELD_OFFSET(::world::State, has_vision_data_),
  PROTOBUF_FIELD_OFFSET(::world::State, mixed_team_info_),
  PROTOBUF_FIELD_OFFSET(::world::State, tracking_aoi_),
  PROTOBUF_FIELD_OFFSET(::world::State, simple_tracking_yellow_),
  PROTOBUF_FIELD_OFFSET(::world::State, simple_tracking_blue_),
  PROTOBUF_FIELD_OFFSET(::world::State, simple_tracking_ball_),
  PROTOBUF_FIELD_OFFSET(::world::State, reality_),
  PROTOBUF_FIELD_OFFSET(::world::State, vision_frames_),
  PROTOBUF_FIELD_OFFSET(::world::State, vision_frame_times_),
  PROTOBUF_FIELD_OFFSET(::world::State, system_delay_),
  PROTOBUF_FIELD_OFFSET(::world::State, world_source_),
  4,
  0,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  5,
  8,
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, blue_robots_),
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, yellow_robots_),
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, ball_),
  PROTOBUF_FIELD_OFFSET(::world::SimulatorState, time_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::world::SimBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::SimBall, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, p_z_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, v_z_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, angular_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, angular_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimBall, angular_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, i_),
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, j_),
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, k_),
  PROTOBUF_FIELD_OFFSET(::world::Quaternion, real_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, id_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, p_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, p_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, p_z_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, rotation_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, v_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, v_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, v_z_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, r_x_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, r_y_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, r_z_),
  PROTOBUF_FIELD_OFFSET(::world::SimRobot, touches_ball_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::world::Geometry)},
  { 45, 55, sizeof(::world::BallModel)},
  { 60, 69, sizeof(::world::DivisionDimensions)},
  { 73, 89, sizeof(::world::BallPosition)},
  { 100, 116, sizeof(::world::Ball)},
  { 127, 143, sizeof(::world::RobotPosition)},
  { 154, 167, sizeof(::world::Robot)},
  { 175, 184, sizeof(::world::TrackingAOI)},
  { 188, 210, sizeof(::world::State)},
  { 227, 236, sizeof(::world::SimulatorState)},
  { 240, 254, sizeof(::world::SimBall)},
  { 263, 272, sizeof(::world::Quaternion)},
  { 276, 293, sizeof(::world::SimRobot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_Geometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_BallModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_DivisionDimensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_BallPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_Ball_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_RobotPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_Robot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_TrackingAOI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_SimulatorState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_SimBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::world::_SimRobot_default_instance_),
};

const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013world.proto\022\005world\032\013robot.proto\032\024ssl_m"
  "ixed_team.proto\032\021ssl_wrapper.proto\"\252\005\n\010G"
  "eometry\022\022\n\nline_width\030\001 \002(\002\022\023\n\013field_wid"
  "th\030\002 \002(\002\022\024\n\014field_height\030\003 \002(\002\022\026\n\016bounda"
  "ry_width\030\004 \002(\002\022\022\n\ngoal_width\030\006 \002(\002\022\022\n\ngo"
  "al_depth\030\007 \002(\002\022\027\n\017goal_wall_width\030\010 \002(\002\022"
  "\034\n\024center_circle_radius\030\t \002(\002\022\026\n\016defense"
  "_radius\030\n \002(\002\022\027\n\017defense_stretch\030\013 \002(\002\022#"
  "\n\033free_kick_from_defense_dist\030\014 \002(\002\022)\n!p"
  "enalty_spot_from_field_line_dist\030\r \002(\002\022#"
  "\n\033penalty_line_from_spot_dist\030\016 \002(\002\022\023\n\013g"
  "oal_height\030\017 \002(\002\022\030\n\rdefense_width\030\020 \001(\002:"
  "\0012\022\031\n\016defense_height\030\021 \001(\002:\0011\0225\n\004type\030\022 "
  "\001(\0162\034.world.Geometry.GeometryType:\tTYPE_"
  "2014\022-\n\010division\030\023 \001(\0162\030.world.Geometry."
  "Division:\001A\022$\n\nball_model\030\024 \001(\0132\020.world."
  "BallModel\022$\n\034corner_block_cathetus_lengt"
  "h\030\025 \001(\002\",\n\014GeometryType\022\r\n\tTYPE_2014\020\001\022\r"
  "\n\tTYPE_2018\020\002\"\030\n\010Division\022\005\n\001A\020\001\022\005\n\001B\020\002\""
  "~\n\tBallModel\022\031\n\021fast_deceleration\030\001 \001(\002\022"
  "\031\n\021slow_deceleration\030\002 \001(\002\022\024\n\014switch_rat"
  "io\030\003 \001(\002\022\021\n\tz_damping\030\004 \001(\002\022\022\n\nxy_dampin"
  "g\030\005 \001(\002\"r\n\022DivisionDimensions\022\025\n\rfield_w"
  "idth_a\030\001 \002(\002\022\026\n\016field_height_a\030\002 \002(\002\022\025\n\r"
  "field_width_b\030\003 \002(\002\022\026\n\016field_height_b\030\004 "
  "\002(\002\"\324\001\n\014BallPosition\022\014\n\004time\030\001 \002(\003\022\013\n\003p_"
  "x\030\002 \002(\002\022\013\n\003p_y\030\003 \002(\002\022\021\n\tderived_z\030\n \001(\002\022"
  "\013\n\003v_x\030\005 \001(\002\022\013\n\003v_y\030\006 \001(\002\022\024\n\014system_dela"
  "y\030\007 \001(\002\022\030\n\020time_diff_scaled\030\010 \001(\002\022\021\n\tcam"
  "era_id\030\t \001(\r\022\014\n\004area\030\013 \001(\002\022\036\n\026vision_pro"
  "cessing_time\030\014 \001(\003\"\310\001\n\004Ball\022\013\n\003p_x\030\001 \002(\002"
  "\022\013\n\003p_y\030\002 \002(\002\022\013\n\003p_z\030\006 \001(\002\022\013\n\003v_x\030\003 \002(\002\022"
  "\013\n\003v_y\030\004 \002(\002\022\013\n\003v_z\030\007 \001(\002\022\023\n\013touchdown_x"
  "\030\010 \001(\002\022\023\n\013touchdown_y\030\t \001(\002\022\023\n\013is_bounci"
  "ng\030\n \001(\010\022\021\n\tmax_speed\030\013 \001(\002\022 \n\003raw\030\005 \003(\013"
  "2\023.world.BallPosition\"\320\001\n\rRobotPosition\022"
  "\014\n\004time\030\001 \002(\003\022\013\n\003p_x\030\002 \002(\002\022\013\n\003p_y\030\003 \002(\002\022"
  "\013\n\003phi\030\004 \002(\002\022\013\n\003v_x\030\005 \001(\002\022\013\n\003v_y\030\006 \001(\002\022\024"
  "\n\014system_delay\030\007 \001(\002\022\030\n\020time_diff_scaled"
  "\030\010 \001(\002\022\r\n\005omega\030\t \001(\002\022\021\n\tcamera_id\030\n \001(\r"
  "\022\036\n\026vision_processing_time\030\013 \001(\003\"\206\001\n\005Rob"
  "ot\022\n\n\002id\030\001 \002(\r\022\013\n\003p_x\030\002 \002(\002\022\013\n\003p_y\030\003 \002(\002"
  "\022\013\n\003phi\030\004 \002(\002\022\013\n\003v_x\030\005 \002(\002\022\013\n\003v_y\030\006 \002(\002\022"
  "\r\n\005omega\030\007 \002(\002\022!\n\003raw\030\010 \003(\0132\024.world.Robo"
  "tPosition\"=\n\013TrackingAOI\022\n\n\002x1\030\001 \002(\002\022\n\n\002"
  "y1\030\002 \002(\002\022\n\n\002x2\030\003 \002(\002\022\n\n\002y2\030\004 \002(\002\"\315\004\n\005Sta"
  "te\022\014\n\004time\030\001 \002(\003\022\031\n\004ball\030\002 \001(\0132\013.world.B"
  "all\022\034\n\006yellow\030\003 \003(\0132\014.world.Robot\022\032\n\004blu"
  "e\030\004 \003(\0132\014.world.Robot\022,\n\016radio_response\030"
  "\005 \003(\0132\024.robot.RadioResponse\022\024\n\014is_simula"
  "ted\030\006 \001(\010\022\027\n\017has_vision_data\030\007 \001(\010\022&\n\017mi"
  "xed_team_info\030\010 \001(\0132\r.ssl.TeamPlan\022(\n\014tr"
  "acking_aoi\030\t \001(\0132\022.world.TrackingAOI\022,\n\026"
  "simple_tracking_yellow\030\013 \003(\0132\014.world.Rob"
  "ot\022*\n\024simple_tracking_blue\030\014 \003(\0132\014.world"
  ".Robot\022)\n\024simple_tracking_ball\030\021 \001(\0132\013.w"
  "orld.Ball\022&\n\007reality\030\r \003(\0132\025.world.Simul"
  "atorState\022)\n\rvision_frames\030\n \003(\0132\022.SSL_W"
  "rapperPacket\022\032\n\022vision_frame_times\030\016 \003(\003"
  "\022\024\n\014system_delay\030\017 \001(\003\022(\n\014world_source\030\020"
  " \001(\0162\022.world.WorldSource\"\212\001\n\016SimulatorSt"
  "ate\022$\n\013blue_robots\030\001 \003(\0132\017.world.SimRobo"
  "t\022&\n\ryellow_robots\030\002 \003(\0132\017.world.SimRobo"
  "t\022\034\n\004ball\030\003 \001(\0132\016.world.SimBall\022\014\n\004time\030"
  "\004 \001(\003\"\220\001\n\007SimBall\022\013\n\003p_x\030\001 \002(\002\022\013\n\003p_y\030\002 "
  "\002(\002\022\013\n\003p_z\030\003 \002(\002\022\013\n\003v_x\030\004 \002(\002\022\013\n\003v_y\030\005 \002"
  "(\002\022\013\n\003v_z\030\006 \002(\002\022\021\n\tangular_x\030\007 \001(\002\022\021\n\tan"
  "gular_y\030\010 \001(\002\022\021\n\tangular_z\030\t \001(\002\";\n\nQuat"
  "ernion\022\t\n\001i\030\001 \002(\002\022\t\n\001j\030\002 \002(\002\022\t\n\001k\030\003 \002(\002\022"
  "\014\n\004real\030\004 \002(\002\"\306\001\n\010SimRobot\022\n\n\002id\030\001 \002(\r\022\013"
  "\n\003p_x\030\002 \002(\002\022\013\n\003p_y\030\003 \002(\002\022\013\n\003p_z\030\004 \002(\002\022#\n"
  "\010rotation\030\005 \002(\0132\021.world.Quaternion\022\013\n\003v_"
  "x\030\006 \002(\002\022\013\n\003v_y\030\007 \002(\002\022\013\n\003v_z\030\010 \002(\002\022\013\n\003r_x"
  "\030\t \002(\002\022\013\n\003r_y\030\n \002(\002\022\013\n\003r_z\030\013 \002(\002\022\024\n\014touc"
  "hes_ball\030\014 \001(\010*N\n\013WorldSource\022\027\n\023INTERNA"
  "L_SIMULATION\020\001\022\027\n\023EXTERNAL_SIMULATION\020\002\022"
  "\r\n\tREAL_LIFE\020\003B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_world_2eproto_deps[3] = {
  &::descriptor_table_robot_2eproto,
  &::descriptor_table_ssl_5fmixed_5fteam_2eproto,
  &::descriptor_table_ssl_5fwrapper_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_world_2eproto_sccs[13] = {
  &scc_info_Ball_world_2eproto.base,
  &scc_info_BallModel_world_2eproto.base,
  &scc_info_BallPosition_world_2eproto.base,
  &scc_info_DivisionDimensions_world_2eproto.base,
  &scc_info_Geometry_world_2eproto.base,
  &scc_info_Quaternion_world_2eproto.base,
  &scc_info_Robot_world_2eproto.base,
  &scc_info_RobotPosition_world_2eproto.base,
  &scc_info_SimBall_world_2eproto.base,
  &scc_info_SimRobot_world_2eproto.base,
  &scc_info_SimulatorState_world_2eproto.base,
  &scc_info_State_world_2eproto.base,
  &scc_info_TrackingAOI_world_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_world_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto = {
  false, false, descriptor_table_protodef_world_2eproto, "world.proto", 3059,
  &descriptor_table_world_2eproto_once, descriptor_table_world_2eproto_sccs, descriptor_table_world_2eproto_deps, 13, 3,
  schemas, file_default_instances, TableStruct_world_2eproto::offsets,
  file_level_metadata_world_2eproto, 13, file_level_enum_descriptors_world_2eproto, file_level_service_descriptors_world_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_world_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_world_2eproto)), true);
namespace world {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_GeometryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[0];
}
bool Geometry_GeometryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Geometry_GeometryType Geometry::TYPE_2014;
constexpr Geometry_GeometryType Geometry::TYPE_2018;
constexpr Geometry_GeometryType Geometry::GeometryType_MIN;
constexpr Geometry_GeometryType Geometry::GeometryType_MAX;
constexpr int Geometry::GeometryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_Division_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[1];
}
bool Geometry_Division_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Geometry_Division Geometry::A;
constexpr Geometry_Division Geometry::B;
constexpr Geometry_Division Geometry::Division_MIN;
constexpr Geometry_Division Geometry::Division_MAX;
constexpr int Geometry::Division_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[2];
}
bool WorldSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::world::_Geometry_default_instance_._instance.get_mutable()->ball_model_ = const_cast< ::world::BallModel*>(
      ::world::BallModel::internal_default_instance());
}
class Geometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Geometry>()._has_bits_);
  static void set_has_line_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boundary_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_goal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goal_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_goal_wall_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_center_circle_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_defense_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_defense_stretch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_free_kick_from_defense_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_penalty_spot_from_field_line_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_penalty_line_from_spot_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_goal_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_defense_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_defense_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::world::BallModel& ball_model(const Geometry* msg);
  static void set_has_ball_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_corner_block_cathetus_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00007ffe) ^ 0x00007ffe) != 0;
  }
};

const ::world::BallModel&
Geometry::_Internal::ball_model(const Geometry* msg) {
  return *msg->ball_model_;
}
Geometry::Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball_model()) {
    ball_model_ = new ::world::BallModel(*from.ball_model_);
  } else {
    ball_model_ = nullptr;
  }
  ::memcpy(&line_width_, &from.line_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&division_) -
    reinterpret_cast<char*>(&line_width_)) + sizeof(division_));
  // @@protoc_insertion_point(copy_constructor:world.Geometry)
}

void Geometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Geometry_world_2eproto.base);
  ::memset(&ball_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&corner_block_cathetus_length_) -
      reinterpret_cast<char*>(&ball_model_)) + sizeof(corner_block_cathetus_length_));
  defense_width_ = 2;
  defense_height_ = 1;
  type_ = 1;
  division_ = 1;
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:world.Geometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Geometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_model_;
}

void Geometry::ArenaDtor(void* object) {
  Geometry* _this = reinterpret_cast< Geometry* >(object);
  (void)_this;
}
void Geometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geometry& Geometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geometry_world_2eproto.base);
  return *internal_default_instance();
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:world.Geometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ball_model_ != nullptr);
    ball_model_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&line_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_wall_width_) -
        reinterpret_cast<char*>(&line_width_)) + sizeof(goal_wall_width_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&center_circle_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&corner_block_cathetus_length_) -
        reinterpret_cast<char*>(&center_circle_radius_)) + sizeof(corner_block_cathetus_length_));
  }
  if (cached_has_bits & 0x000f0000u) {
    defense_width_ = 2;
    defense_height_ = 1;
    type_ = 1;
    division_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float line_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_line_width(&has_bits);
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float field_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_field_width(&has_bits);
          field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float field_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_field_height(&has_bits);
          field_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float boundary_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_boundary_width(&has_bits);
          boundary_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float goal_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_goal_width(&has_bits);
          goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float goal_depth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_goal_depth(&has_bits);
          goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float goal_wall_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_goal_wall_width(&has_bits);
          goal_wall_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float center_circle_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_center_circle_radius(&has_bits);
          center_circle_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float defense_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_defense_radius(&has_bits);
          defense_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float defense_stretch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_defense_stretch(&has_bits);
          defense_stretch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float free_kick_from_defense_dist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_free_kick_from_defense_dist(&has_bits);
          free_kick_from_defense_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float penalty_spot_from_field_line_dist = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_penalty_spot_from_field_line_dist(&has_bits);
          penalty_spot_from_field_line_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float penalty_line_from_spot_dist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_penalty_line_from_spot_dist(&has_bits);
          penalty_line_from_spot_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float goal_height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_goal_height(&has_bits);
          goal_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float defense_width = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_defense_width(&has_bits);
          defense_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float defense_height = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_defense_height(&has_bits);
          defense_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .world.Geometry.GeometryType type = 18 [default = TYPE_2014];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::world::Geometry_GeometryType_IsValid(val))) {
            _internal_set_type(static_cast<::world::Geometry_GeometryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .world.Geometry.Division division = 19 [default = A];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::world::Geometry_Division_IsValid(val))) {
            _internal_set_division(static_cast<::world::Geometry_Division>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .world.BallModel ball_model = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float corner_block_cathetus_length = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_corner_block_cathetus_length(&has_bits);
          corner_block_cathetus_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.Geometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float line_width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_line_width(), target);
  }

  // required float field_width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_field_width(), target);
  }

  // required float field_height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_field_height(), target);
  }

  // required float boundary_width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_boundary_width(), target);
  }

  // required float goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_goal_width(), target);
  }

  // required float goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_goal_depth(), target);
  }

  // required float goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_goal_wall_width(), target);
  }

  // required float center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_center_circle_radius(), target);
  }

  // required float defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_defense_radius(), target);
  }

  // required float defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_defense_stretch(), target);
  }

  // required float free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_free_kick_from_defense_dist(), target);
  }

  // required float penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_penalty_spot_from_field_line_dist(), target);
  }

  // required float penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_penalty_line_from_spot_dist(), target);
  }

  // required float goal_height = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_goal_height(), target);
  }

  // optional float defense_width = 16 [default = 2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_defense_width(), target);
  }

  // optional float defense_height = 17 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_defense_height(), target);
  }

  // optional .world.Geometry.GeometryType type = 18 [default = TYPE_2014];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_type(), target);
  }

  // optional .world.Geometry.Division division = 19 [default = A];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_division(), target);
  }

  // optional .world.BallModel ball_model = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ball_model(this), target, stream);
  }

  // optional float corner_block_cathetus_length = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_corner_block_cathetus_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.Geometry)
  return target;
}

size_t Geometry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.Geometry)
  size_t total_size = 0;

  if (_internal_has_line_width()) {
    // required float line_width = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_field_width()) {
    // required float field_width = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_field_height()) {
    // required float field_height = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_boundary_width()) {
    // required float boundary_width = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_goal_width()) {
    // required float goal_width = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_goal_depth()) {
    // required float goal_depth = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_goal_wall_width()) {
    // required float goal_wall_width = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_center_circle_radius()) {
    // required float center_circle_radius = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_defense_radius()) {
    // required float defense_radius = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_defense_stretch()) {
    // required float defense_stretch = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_free_kick_from_defense_dist()) {
    // required float free_kick_from_defense_dist = 12;
    total_size += 1 + 4;
  }

  if (_internal_has_penalty_spot_from_field_line_dist()) {
    // required float penalty_spot_from_field_line_dist = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_penalty_line_from_spot_dist()) {
    // required float penalty_line_from_spot_dist = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_goal_height()) {
    // required float goal_height = 15;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.Geometry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007ffe) ^ 0x00007ffe) == 0) {  // All required fields are present.
    // required float line_width = 1;
    total_size += 1 + 4;

    // required float field_width = 2;
    total_size += 1 + 4;

    // required float field_height = 3;
    total_size += 1 + 4;

    // required float boundary_width = 4;
    total_size += 1 + 4;

    // required float goal_width = 6;
    total_size += 1 + 4;

    // required float goal_depth = 7;
    total_size += 1 + 4;

    // required float goal_wall_width = 8;
    total_size += 1 + 4;

    // required float center_circle_radius = 9;
    total_size += 1 + 4;

    // required float defense_radius = 10;
    total_size += 1 + 4;

    // required float defense_stretch = 11;
    total_size += 1 + 4;

    // required float free_kick_from_defense_dist = 12;
    total_size += 1 + 4;

    // required float penalty_spot_from_field_line_dist = 13;
    total_size += 1 + 4;

    // required float penalty_line_from_spot_dist = 14;
    total_size += 1 + 4;

    // required float goal_height = 15;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .world.BallModel ball_model = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_model_);
  }

  // optional float corner_block_cathetus_length = 21;
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 + 4;
  }

  if (cached_has_bits & 0x000f0000u) {
    // optional float defense_width = 16 [default = 2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float defense_height = 17 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional .world.Geometry.GeometryType type = 18 [default = TYPE_2014];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .world.Geometry.Division division = 19 [default = A];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_division());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.Geometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ball_model()->::world::BallModel::MergeFrom(from._internal_ball_model());
    }
    if (cached_has_bits & 0x00000002u) {
      line_width_ = from.line_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_height_ = from.field_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      goal_wall_width_ = from.goal_wall_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      center_circle_radius_ = from.center_circle_radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      defense_radius_ = from.defense_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      defense_stretch_ = from.defense_stretch_;
    }
    if (cached_has_bits & 0x00000800u) {
      free_kick_from_defense_dist_ = from.free_kick_from_defense_dist_;
    }
    if (cached_has_bits & 0x00001000u) {
      penalty_spot_from_field_line_dist_ = from.penalty_spot_from_field_line_dist_;
    }
    if (cached_has_bits & 0x00002000u) {
      penalty_line_from_spot_dist_ = from.penalty_line_from_spot_dist_;
    }
    if (cached_has_bits & 0x00004000u) {
      goal_height_ = from.goal_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      corner_block_cathetus_length_ = from.corner_block_cathetus_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      defense_width_ = from.defense_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      defense_height_ = from.defense_height_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      division_ = from.division_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Geometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geometry, corner_block_cathetus_length_)
      + sizeof(Geometry::corner_block_cathetus_length_)
      - PROTOBUF_FIELD_OFFSET(Geometry, ball_model_)>(
          reinterpret_cast<char*>(&ball_model_),
          reinterpret_cast<char*>(&other->ball_model_));
  swap(defense_width_, other->defense_width_);
  swap(defense_height_, other->defense_height_);
  swap(type_, other->type_);
  swap(division_, other->division_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Geometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BallModel::InitAsDefaultInstance() {
}
class BallModel::_Internal {
 public:
  using HasBits = decltype(std::declval<BallModel>()._has_bits_);
  static void set_has_fast_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slow_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_switch_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xy_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BallModel::BallModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.BallModel)
}
BallModel::BallModel(const BallModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fast_deceleration_, &from.fast_deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&xy_damping_) -
    reinterpret_cast<char*>(&fast_deceleration_)) + sizeof(xy_damping_));
  // @@protoc_insertion_point(copy_constructor:world.BallModel)
}

void BallModel::SharedCtor() {
  ::memset(&fast_deceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xy_damping_) -
      reinterpret_cast<char*>(&fast_deceleration_)) + sizeof(xy_damping_));
}

BallModel::~BallModel() {
  // @@protoc_insertion_point(destructor:world.BallModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BallModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BallModel::ArenaDtor(void* object) {
  BallModel* _this = reinterpret_cast< BallModel* >(object);
  (void)_this;
}
void BallModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BallModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallModel& BallModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BallModel_world_2eproto.base);
  return *internal_default_instance();
}


void BallModel::Clear() {
// @@protoc_insertion_point(message_clear_start:world.BallModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fast_deceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xy_damping_) -
        reinterpret_cast<char*>(&fast_deceleration_)) + sizeof(xy_damping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BallModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fast_deceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fast_deceleration(&has_bits);
          fast_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slow_deceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_slow_deceleration(&has_bits);
          slow_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float switch_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_switch_ratio(&has_bits);
          switch_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z_damping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_z_damping(&has_bits);
          z_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xy_damping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_xy_damping(&has_bits);
          xy_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BallModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.BallModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fast_deceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fast_deceleration(), target);
  }

  // optional float slow_deceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_slow_deceleration(), target);
  }

  // optional float switch_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_switch_ratio(), target);
  }

  // optional float z_damping = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z_damping(), target);
  }

  // optional float xy_damping = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_xy_damping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.BallModel)
  return target;
}

size_t BallModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.BallModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float fast_deceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float slow_deceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float switch_ratio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z_damping = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float xy_damping = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.BallModel)
  GOOGLE_DCHECK_NE(&from, this);
  const BallModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BallModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.BallModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.BallModel)
    MergeFrom(*source);
  }
}

void BallModel::MergeFrom(const BallModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.BallModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fast_deceleration_ = from.fast_deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      slow_deceleration_ = from.slow_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      switch_ratio_ = from.switch_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_damping_ = from.z_damping_;
    }
    if (cached_has_bits & 0x00000010u) {
      xy_damping_ = from.xy_damping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.BallModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallModel::CopyFrom(const BallModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.BallModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallModel::IsInitialized() const {
  return true;
}

void BallModel::InternalSwap(BallModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallModel, xy_damping_)
      + sizeof(BallModel::xy_damping_)
      - PROTOBUF_FIELD_OFFSET(BallModel, fast_deceleration_)>(
          reinterpret_cast<char*>(&fast_deceleration_),
          reinterpret_cast<char*>(&other->fast_deceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BallModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DivisionDimensions::InitAsDefaultInstance() {
}
class DivisionDimensions::_Internal {
 public:
  using HasBits = decltype(std::declval<DivisionDimensions>()._has_bits_);
  static void set_has_field_width_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_height_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_width_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_height_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

DivisionDimensions::DivisionDimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.DivisionDimensions)
}
DivisionDimensions::DivisionDimensions(const DivisionDimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_width_a_, &from.field_width_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_height_b_) -
    reinterpret_cast<char*>(&field_width_a_)) + sizeof(field_height_b_));
  // @@protoc_insertion_point(copy_constructor:world.DivisionDimensions)
}

void DivisionDimensions::SharedCtor() {
  ::memset(&field_width_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_height_b_) -
      reinterpret_cast<char*>(&field_width_a_)) + sizeof(field_height_b_));
}

DivisionDimensions::~DivisionDimensions() {
  // @@protoc_insertion_point(destructor:world.DivisionDimensions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DivisionDimensions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DivisionDimensions::ArenaDtor(void* object) {
  DivisionDimensions* _this = reinterpret_cast< DivisionDimensions* >(object);
  (void)_this;
}
void DivisionDimensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DivisionDimensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DivisionDimensions& DivisionDimensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DivisionDimensions_world_2eproto.base);
  return *internal_default_instance();
}


void DivisionDimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:world.DivisionDimensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&field_width_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_height_b_) -
        reinterpret_cast<char*>(&field_width_a_)) + sizeof(field_height_b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivisionDimensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float field_width_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_field_width_a(&has_bits);
          field_width_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float field_height_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_field_height_a(&has_bits);
          field_height_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float field_width_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_field_width_b(&has_bits);
          field_width_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float field_height_b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_field_height_b(&has_bits);
          field_height_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DivisionDimensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.DivisionDimensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float field_width_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_field_width_a(), target);
  }

  // required float field_height_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_field_height_a(), target);
  }

  // required float field_width_b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_field_width_b(), target);
  }

  // required float field_height_b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_field_height_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.DivisionDimensions)
  return target;
}

size_t DivisionDimensions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.DivisionDimensions)
  size_t total_size = 0;

  if (_internal_has_field_width_a()) {
    // required float field_width_a = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_field_height_a()) {
    // required float field_height_a = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_field_width_b()) {
    // required float field_width_b = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_field_height_b()) {
    // required float field_height_b = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t DivisionDimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.DivisionDimensions)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float field_width_a = 1;
    total_size += 1 + 4;

    // required float field_height_a = 2;
    total_size += 1 + 4;

    // required float field_width_b = 3;
    total_size += 1 + 4;

    // required float field_height_b = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DivisionDimensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.DivisionDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  const DivisionDimensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DivisionDimensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.DivisionDimensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.DivisionDimensions)
    MergeFrom(*source);
  }
}

void DivisionDimensions::MergeFrom(const DivisionDimensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.DivisionDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      field_width_a_ = from.field_width_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_height_a_ = from.field_height_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_width_b_ = from.field_width_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_height_b_ = from.field_height_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DivisionDimensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.DivisionDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivisionDimensions::CopyFrom(const DivisionDimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.DivisionDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivisionDimensions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DivisionDimensions::InternalSwap(DivisionDimensions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DivisionDimensions, field_height_b_)
      + sizeof(DivisionDimensions::field_height_b_)
      - PROTOBUF_FIELD_OFFSET(DivisionDimensions, field_width_a_)>(
          reinterpret_cast<char*>(&field_width_a_),
          reinterpret_cast<char*>(&other->field_width_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DivisionDimensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BallPosition::InitAsDefaultInstance() {
}
class BallPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<BallPosition>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_derived_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_system_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_diff_scaled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vision_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BallPosition::BallPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.BallPosition)
}
BallPosition::BallPosition(const BallPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&time_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:world.BallPosition)
}

void BallPosition::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&time_)) + sizeof(area_));
}

BallPosition::~BallPosition() {
  // @@protoc_insertion_point(destructor:world.BallPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BallPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BallPosition::ArenaDtor(void* object) {
  BallPosition* _this = reinterpret_cast< BallPosition* >(object);
  (void)_this;
}
void BallPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BallPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallPosition& BallPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BallPosition_world_2eproto.base);
  return *internal_default_instance();
}


void BallPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:world.BallPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&time_)) + sizeof(camera_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&derived_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&area_) -
        reinterpret_cast<char*>(&derived_z_)) + sizeof(area_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BallPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float p_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float system_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_system_delay(&has_bits);
          system_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float time_diff_scaled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_time_diff_scaled(&has_bits);
          time_diff_scaled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 camera_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float derived_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_derived_z(&has_bits);
          derived_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float area = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_area(&has_bits);
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 vision_processing_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_vision_processing_time(&has_bits);
          vision_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BallPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.BallPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // required float p_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_x(), target);
  }

  // required float p_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_y(), target);
  }

  // optional float v_x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_x(), target);
  }

  // optional float v_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_y(), target);
  }

  // optional float system_delay = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_system_delay(), target);
  }

  // optional float time_diff_scaled = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_time_diff_scaled(), target);
  }

  // optional uint32 camera_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_camera_id(), target);
  }

  // optional float derived_z = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_derived_z(), target);
  }

  // optional float area = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_area(), target);
  }

  // optional int64 vision_processing_time = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_vision_processing_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.BallPosition)
  return target;
}

size_t BallPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.BallPosition)
  size_t total_size = 0;

  if (_internal_has_time()) {
    // required int64 time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_p_x()) {
    // required float p_x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t BallPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.BallPosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required float p_x = 2;
    total_size += 1 + 4;

    // required float p_y = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional float v_x = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float system_delay = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float time_diff_scaled = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 camera_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camera_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float derived_z = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 vision_processing_time = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_vision_processing_time());
    }

    // optional float area = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.BallPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const BallPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BallPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.BallPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.BallPosition)
    MergeFrom(*source);
  }
}

void BallPosition::MergeFrom(const BallPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.BallPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      system_delay_ = from.system_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_diff_scaled_ = from.time_diff_scaled_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      derived_z_ = from.derived_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      vision_processing_time_ = from.vision_processing_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      area_ = from.area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.BallPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPosition::CopyFrom(const BallPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.BallPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPosition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BallPosition::InternalSwap(BallPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallPosition, area_)
      + sizeof(BallPosition::area_)
      - PROTOBUF_FIELD_OFFSET(BallPosition, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BallPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ball::InitAsDefaultInstance() {
}
class Ball::_Internal {
 public:
  using HasBits = decltype(std::declval<Ball>()._has_bits_);
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_touchdown_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_touchdown_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_bouncing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Ball::Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.Ball)
}
Ball::Ball(const Ball& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      raw_(from.raw_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p_x_, &from.p_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_speed_) -
    reinterpret_cast<char*>(&p_x_)) + sizeof(max_speed_));
  // @@protoc_insertion_point(copy_constructor:world.Ball)
}

void Ball::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ball_world_2eproto.base);
  ::memset(&p_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_speed_) -
      reinterpret_cast<char*>(&p_x_)) + sizeof(max_speed_));
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:world.Ball)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ball::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ball::ArenaDtor(void* object) {
  Ball* _this = reinterpret_cast< Ball* >(object);
  (void)_this;
}
void Ball::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ball::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ball& Ball::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ball_world_2eproto.base);
  return *internal_default_instance();
}


void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:world.Ball)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&p_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touchdown_y_) -
        reinterpret_cast<char*>(&p_x_)) + sizeof(touchdown_y_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&is_bouncing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_speed_) -
        reinterpret_cast<char*>(&is_bouncing_)) + sizeof(max_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ball::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float p_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .world.BallPosition raw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float p_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_p_z(&has_bits);
          p_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_v_z(&has_bits);
          v_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float touchdown_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_touchdown_x(&has_bits);
          touchdown_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float touchdown_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_touchdown_y(&has_bits);
          touchdown_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_bouncing = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_bouncing(&has_bits);
          is_bouncing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ball::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.Ball)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float p_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_p_x(), target);
  }

  // required float p_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_y(), target);
  }

  // required float v_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_v_x(), target);
  }

  // required float v_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_v_y(), target);
  }

  // repeated .world.BallPosition raw = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raw_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_raw(i), target, stream);
  }

  // optional float p_z = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_p_z(), target);
  }

  // optional float v_z = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_z(), target);
  }

  // optional float touchdown_x = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_touchdown_x(), target);
  }

  // optional float touchdown_y = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_touchdown_y(), target);
  }

  // optional bool is_bouncing = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_bouncing(), target);
  }

  // optional float max_speed = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_max_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.Ball)
  return target;
}

size_t Ball::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.Ball)
  size_t total_size = 0;

  if (_internal_has_p_x()) {
    // required float p_x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_v_x()) {
    // required float v_x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_v_y()) {
    // required float v_y = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.Ball)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float p_x = 1;
    total_size += 1 + 4;

    // required float p_y = 2;
    total_size += 1 + 4;

    // required float v_x = 3;
    total_size += 1 + 4;

    // required float v_y = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world.BallPosition raw = 5;
  total_size += 1UL * this->_internal_raw_size();
  for (const auto& msg : this->raw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional float p_z = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float v_z = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float touchdown_x = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float touchdown_y = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_bouncing = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float max_speed = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ball::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.Ball)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ball>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.Ball)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.Ball)
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.Ball)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_.MergeFrom(from.raw_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      p_z_ = from.p_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_z_ = from.v_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      touchdown_x_ = from.touchdown_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      touchdown_y_ = from.touchdown_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_bouncing_ = from.is_bouncing_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_speed_ = from.max_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ball::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(raw_)) return false;
  return true;
}

void Ball::InternalSwap(Ball* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_.InternalSwap(&other->raw_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ball, max_speed_)
      + sizeof(Ball::max_speed_)
      - PROTOBUF_FIELD_OFFSET(Ball, p_x_)>(
          reinterpret_cast<char*>(&p_x_),
          reinterpret_cast<char*>(&other->p_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ball::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotPosition::InitAsDefaultInstance() {
}
class RobotPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotPosition>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_system_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_diff_scaled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_omega(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vision_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RobotPosition::RobotPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.RobotPosition)
}
RobotPosition::RobotPosition(const RobotPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:world.RobotPosition)
}

void RobotPosition::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(camera_id_));
}

RobotPosition::~RobotPosition() {
  // @@protoc_insertion_point(destructor:world.RobotPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotPosition::ArenaDtor(void* object) {
  RobotPosition* _this = reinterpret_cast< RobotPosition* >(object);
  (void)_this;
}
void RobotPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotPosition& RobotPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotPosition_world_2eproto.base);
  return *internal_default_instance();
}


void RobotPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:world.RobotPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_diff_scaled_) -
        reinterpret_cast<char*>(&time_)) + sizeof(time_diff_scaled_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&omega_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&omega_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float p_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float phi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_phi(&has_bits);
          phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float system_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_system_delay(&has_bits);
          system_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float time_diff_scaled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_time_diff_scaled(&has_bits);
          time_diff_scaled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float omega = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_omega(&has_bits);
          omega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 camera_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 vision_processing_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_vision_processing_time(&has_bits);
          vision_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.RobotPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // required float p_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_x(), target);
  }

  // required float p_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_y(), target);
  }

  // required float phi = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_phi(), target);
  }

  // optional float v_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_x(), target);
  }

  // optional float v_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_y(), target);
  }

  // optional float system_delay = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_system_delay(), target);
  }

  // optional float time_diff_scaled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_time_diff_scaled(), target);
  }

  // optional float omega = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_omega(), target);
  }

  // optional uint32 camera_id = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_camera_id(), target);
  }

  // optional int64 vision_processing_time = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_vision_processing_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.RobotPosition)
  return target;
}

size_t RobotPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.RobotPosition)
  size_t total_size = 0;

  if (_internal_has_time()) {
    // required int64 time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_p_x()) {
    // required float p_x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_phi()) {
    // required float phi = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RobotPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.RobotPosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required float p_x = 2;
    total_size += 1 + 4;

    // required float p_y = 3;
    total_size += 1 + 4;

    // required float phi = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional float v_x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float system_delay = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float time_diff_scaled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float omega = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 vision_processing_time = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_vision_processing_time());
    }

    // optional uint32 camera_id = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camera_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.RobotPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.RobotPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.RobotPosition)
    MergeFrom(*source);
  }
}

void RobotPosition::MergeFrom(const RobotPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.RobotPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_ = from.phi_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      system_delay_ = from.system_delay_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_diff_scaled_ = from.time_diff_scaled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      omega_ = from.omega_;
    }
    if (cached_has_bits & 0x00000200u) {
      vision_processing_time_ = from.vision_processing_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.RobotPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPosition::CopyFrom(const RobotPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.RobotPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPosition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotPosition::InternalSwap(RobotPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotPosition, camera_id_)
      + sizeof(RobotPosition::camera_id_)
      - PROTOBUF_FIELD_OFFSET(RobotPosition, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
}
class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_omega(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Robot::Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      raw_(from.raw_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&omega_) -
    reinterpret_cast<char*>(&id_)) + sizeof(omega_));
  // @@protoc_insertion_point(copy_constructor:world.Robot)
}

void Robot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_world_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&id_)) + sizeof(omega_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:world.Robot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot::ArenaDtor(void* object) {
  Robot* _this = reinterpret_cast< Robot* >(object);
  (void)_this;
}
void Robot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot& Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_world_2eproto.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:world.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&omega_) -
        reinterpret_cast<char*>(&id_)) + sizeof(omega_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float p_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float phi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_phi(&has_bits);
          phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float omega = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_omega(&has_bits);
          omega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .world.RobotPosition raw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required float p_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_x(), target);
  }

  // required float p_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_y(), target);
  }

  // required float phi = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_phi(), target);
  }

  // required float v_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_x(), target);
  }

  // required float v_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_y(), target);
  }

  // required float omega = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_omega(), target);
  }

  // repeated .world.RobotPosition raw = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raw_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_raw(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.Robot)
  return target;
}

size_t Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.Robot)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_p_x()) {
    // required float p_x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_phi()) {
    // required float phi = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_v_x()) {
    // required float v_x = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_v_y()) {
    // required float v_y = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_omega()) {
    // required float omega = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.Robot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required float p_x = 2;
    total_size += 1 + 4;

    // required float p_y = 3;
    total_size += 1 + 4;

    // required float phi = 4;
    total_size += 1 + 4;

    // required float v_x = 5;
    total_size += 1 + 4;

    // required float v_y = 6;
    total_size += 1 + 4;

    // required float omega = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world.RobotPosition raw = 8;
  total_size += 1UL * this->_internal_raw_size();
  for (const auto& msg : this->raw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_.MergeFrom(from.raw_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_ = from.phi_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      omega_ = from.omega_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(raw_)) return false;
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raw_.InternalSwap(&other->raw_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, omega_)
      + sizeof(Robot::omega_)
      - PROTOBUF_FIELD_OFFSET(Robot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackingAOI::InitAsDefaultInstance() {
}
class TrackingAOI::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingAOI>()._has_bits_);
  static void set_has_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

TrackingAOI::TrackingAOI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.TrackingAOI)
}
TrackingAOI::TrackingAOI(const TrackingAOI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&y2_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
  // @@protoc_insertion_point(copy_constructor:world.TrackingAOI)
}

void TrackingAOI::SharedCtor() {
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y2_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
}

TrackingAOI::~TrackingAOI() {
  // @@protoc_insertion_point(destructor:world.TrackingAOI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingAOI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingAOI::ArenaDtor(void* object) {
  TrackingAOI* _this = reinterpret_cast< TrackingAOI* >(object);
  (void)_this;
}
void TrackingAOI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingAOI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingAOI& TrackingAOI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingAOI_world_2eproto.base);
  return *internal_default_instance();
}


void TrackingAOI::Clear() {
// @@protoc_insertion_point(message_clear_start:world.TrackingAOI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y2_) -
        reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingAOI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x1(&has_bits);
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y1(&has_bits);
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float x2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x2(&has_bits);
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y2(&has_bits);
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingAOI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.TrackingAOI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x1(), target);
  }

  // required float y1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y1(), target);
  }

  // required float x2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x2(), target);
  }

  // required float y2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.TrackingAOI)
  return target;
}

size_t TrackingAOI::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.TrackingAOI)
  size_t total_size = 0;

  if (_internal_has_x1()) {
    // required float x1 = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y1()) {
    // required float y1 = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_x2()) {
    // required float x2 = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y2()) {
    // required float y2 = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TrackingAOI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.TrackingAOI)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x1 = 1;
    total_size += 1 + 4;

    // required float y1 = 2;
    total_size += 1 + 4;

    // required float x2 = 3;
    total_size += 1 + 4;

    // required float y2 = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingAOI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.TrackingAOI)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingAOI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingAOI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.TrackingAOI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.TrackingAOI)
    MergeFrom(*source);
  }
}

void TrackingAOI::MergeFrom(const TrackingAOI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.TrackingAOI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000002u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000004u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000008u) {
      y2_ = from.y2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingAOI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.TrackingAOI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingAOI::CopyFrom(const TrackingAOI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.TrackingAOI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingAOI::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrackingAOI::InternalSwap(TrackingAOI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingAOI, y2_)
      + sizeof(TrackingAOI::y2_)
      - PROTOBUF_FIELD_OFFSET(TrackingAOI, x1_)>(
          reinterpret_cast<char*>(&x1_),
          reinterpret_cast<char*>(&other->x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingAOI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::world::_State_default_instance_._instance.get_mutable()->ball_ = const_cast< ::world::Ball*>(
      ::world::Ball::internal_default_instance());
  ::world::_State_default_instance_._instance.get_mutable()->mixed_team_info_ = const_cast< ::ssl::TeamPlan*>(
      ::ssl::TeamPlan::internal_default_instance());
  ::world::_State_default_instance_._instance.get_mutable()->tracking_aoi_ = const_cast< ::world::TrackingAOI*>(
      ::world::TrackingAOI::internal_default_instance());
  ::world::_State_default_instance_._instance.get_mutable()->simple_tracking_ball_ = const_cast< ::world::Ball*>(
      ::world::Ball::internal_default_instance());
}
class State::_Internal {
 public:
  using HasBits = decltype(std::declval<State>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::world::Ball& ball(const State* msg);
  static void set_has_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_simulated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_vision_data(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ssl::TeamPlan& mixed_team_info(const State* msg);
  static void set_has_mixed_team_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::world::TrackingAOI& tracking_aoi(const State* msg);
  static void set_has_tracking_aoi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::world::Ball& simple_tracking_ball(const State* msg);
  static void set_has_simple_tracking_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_system_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_world_source(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::world::Ball&
State::_Internal::ball(const State* msg) {
  return *msg->ball_;
}
const ::ssl::TeamPlan&
State::_Internal::mixed_team_info(const State* msg) {
  return *msg->mixed_team_info_;
}
const ::world::TrackingAOI&
State::_Internal::tracking_aoi(const State* msg) {
  return *msg->tracking_aoi_;
}
const ::world::Ball&
State::_Internal::simple_tracking_ball(const State* msg) {
  return *msg->simple_tracking_ball_;
}
void State::clear_radio_response() {
  radio_response_.Clear();
}
void State::clear_mixed_team_info() {
  if (mixed_team_info_ != nullptr) mixed_team_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void State::clear_vision_frames() {
  vision_frames_.Clear();
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  yellow_(arena),
  blue_(arena),
  radio_response_(arena),
  vision_frames_(arena),
  simple_tracking_yellow_(arena),
  simple_tracking_blue_(arena),
  reality_(arena),
  vision_frame_times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      yellow_(from.yellow_),
      blue_(from.blue_),
      radio_response_(from.radio_response_),
      vision_frames_(from.vision_frames_),
      simple_tracking_yellow_(from.simple_tracking_yellow_),
      simple_tracking_blue_(from.simple_tracking_blue_),
      reality_(from.reality_),
      vision_frame_times_(from.vision_frame_times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball()) {
    ball_ = new ::world::Ball(*from.ball_);
  } else {
    ball_ = nullptr;
  }
  if (from._internal_has_mixed_team_info()) {
    mixed_team_info_ = new ::ssl::TeamPlan(*from.mixed_team_info_);
  } else {
    mixed_team_info_ = nullptr;
  }
  if (from._internal_has_tracking_aoi()) {
    tracking_aoi_ = new ::world::TrackingAOI(*from.tracking_aoi_);
  } else {
    tracking_aoi_ = nullptr;
  }
  if (from._internal_has_simple_tracking_ball()) {
    simple_tracking_ball_ = new ::world::Ball(*from.simple_tracking_ball_);
  } else {
    simple_tracking_ball_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_source_) -
    reinterpret_cast<char*>(&time_)) + sizeof(world_source_));
  // @@protoc_insertion_point(copy_constructor:world.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_world_2eproto.base);
  ::memset(&ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_vision_data_) -
      reinterpret_cast<char*>(&ball_)) + sizeof(has_vision_data_));
  world_source_ = 1;
}

State::~State() {
  // @@protoc_insertion_point(destructor:world.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_;
  if (this != internal_default_instance()) delete mixed_team_info_;
  if (this != internal_default_instance()) delete tracking_aoi_;
  if (this != internal_default_instance()) delete simple_tracking_ball_;
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_world_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:world.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_.Clear();
  blue_.Clear();
  radio_response_.Clear();
  vision_frames_.Clear();
  simple_tracking_yellow_.Clear();
  simple_tracking_blue_.Clear();
  reality_.Clear();
  vision_frame_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ball_ != nullptr);
      ball_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mixed_team_info_ != nullptr);
      mixed_team_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tracking_aoi_ != nullptr);
      tracking_aoi_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(simple_tracking_ball_ != nullptr);
      simple_tracking_ball_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_vision_data_) -
        reinterpret_cast<char*>(&time_)) + sizeof(has_vision_data_));
  }
  world_source_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.Ball ball = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .world.Robot yellow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world.Robot blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .robot.RadioResponse radio_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radio_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_simulated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_simulated(&has_bits);
          is_simulated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_vision_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_has_vision_data(&has_bits);
          has_vision_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssl.TeamPlan mixed_team_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed_team_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.TrackingAOI tracking_aoi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_aoi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SSL_WrapperPacket vision_frames = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vision_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world.Robot simple_tracking_yellow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_tracking_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world.Robot simple_tracking_blue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_tracking_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world.SimulatorState reality = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reality(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 vision_frame_times = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vision_frame_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vision_frame_times(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_delay = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_system_delay(&has_bits);
          system_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.WorldSource world_source = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::world::WorldSource_IsValid(val))) {
            _internal_set_world_source(static_cast<::world::WorldSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .world.Ball simple_tracking_ball = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_tracking_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // optional .world.Ball ball = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ball(this), target, stream);
  }

  // repeated .world.Robot yellow = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yellow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_yellow(i), target, stream);
  }

  // repeated .world.Robot blue = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_blue(i), target, stream);
  }

  // repeated .robot.RadioResponse radio_response = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radio_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_radio_response(i), target, stream);
  }

  // optional bool is_simulated = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_simulated(), target);
  }

  // optional bool has_vision_data = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_vision_data(), target);
  }

  // optional .ssl.TeamPlan mixed_team_info = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mixed_team_info(this), target, stream);
  }

  // optional .world.TrackingAOI tracking_aoi = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tracking_aoi(this), target, stream);
  }

  // repeated .SSL_WrapperPacket vision_frames = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vision_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_vision_frames(i), target, stream);
  }

  // repeated .world.Robot simple_tracking_yellow = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simple_tracking_yellow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_simple_tracking_yellow(i), target, stream);
  }

  // repeated .world.Robot simple_tracking_blue = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simple_tracking_blue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_simple_tracking_blue(i), target, stream);
  }

  // repeated .world.SimulatorState reality = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reality_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_reality(i), target, stream);
  }

  // repeated int64 vision_frame_times = 14;
  for (int i = 0, n = this->_internal_vision_frame_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_vision_frame_times(i), target);
  }

  // optional int64 system_delay = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_system_delay(), target);
  }

  // optional .world.WorldSource world_source = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_world_source(), target);
  }

  // optional .world.Ball simple_tracking_ball = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::simple_tracking_ball(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.State)
  size_t total_size = 0;

  // required int64 time = 1;
  if (_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world.Robot yellow = 3;
  total_size += 1UL * this->_internal_yellow_size();
  for (const auto& msg : this->yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world.Robot blue = 4;
  total_size += 1UL * this->_internal_blue_size();
  for (const auto& msg : this->blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .robot.RadioResponse radio_response = 5;
  total_size += 1UL * this->_internal_radio_response_size();
  for (const auto& msg : this->radio_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_WrapperPacket vision_frames = 10;
  total_size += 1UL * this->_internal_vision_frames_size();
  for (const auto& msg : this->vision_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world.Robot simple_tracking_yellow = 11;
  total_size += 1UL * this->_internal_simple_tracking_yellow_size();
  for (const auto& msg : this->simple_tracking_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world.Robot simple_tracking_blue = 12;
  total_size += 1UL * this->_internal_simple_tracking_blue_size();
  for (const auto& msg : this->simple_tracking_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world.SimulatorState reality = 13;
  total_size += 1UL * this->_internal_reality_size();
  for (const auto& msg : this->reality_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 vision_frame_times = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->vision_frame_times_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vision_frame_times_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .world.Ball ball = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_);
    }

    // optional .ssl.TeamPlan mixed_team_info = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mixed_team_info_);
    }

    // optional .world.TrackingAOI tracking_aoi = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracking_aoi_);
    }

    // optional .world.Ball simple_tracking_ball = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_tracking_ball_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional int64 system_delay = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_system_delay());
    }

    // optional bool is_simulated = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_vision_data = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional .world.WorldSource world_source = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_world_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_.MergeFrom(from.yellow_);
  blue_.MergeFrom(from.blue_);
  radio_response_.MergeFrom(from.radio_response_);
  vision_frames_.MergeFrom(from.vision_frames_);
  simple_tracking_yellow_.MergeFrom(from.simple_tracking_yellow_);
  simple_tracking_blue_.MergeFrom(from.simple_tracking_blue_);
  reality_.MergeFrom(from.reality_);
  vision_frame_times_.MergeFrom(from.vision_frame_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ball()->::world::Ball::MergeFrom(from._internal_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mixed_team_info()->::ssl::TeamPlan::MergeFrom(from._internal_mixed_team_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tracking_aoi()->::world::TrackingAOI::MergeFrom(from._internal_tracking_aoi());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_simple_tracking_ball()->::world::Ball::MergeFrom(from._internal_simple_tracking_ball());
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      system_delay_ = from.system_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_simulated_ = from.is_simulated_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_vision_data_ = from.has_vision_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_world_source(from._internal_world_source());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(yellow_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blue_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(radio_response_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vision_frames_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(simple_tracking_yellow_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(simple_tracking_blue_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reality_)) return false;
  if (_internal_has_ball()) {
    if (!ball_->IsInitialized()) return false;
  }
  if (_internal_has_mixed_team_info()) {
    if (!mixed_team_info_->IsInitialized()) return false;
  }
  if (_internal_has_tracking_aoi()) {
    if (!tracking_aoi_->IsInitialized()) return false;
  }
  if (_internal_has_simple_tracking_ball()) {
    if (!simple_tracking_ball_->IsInitialized()) return false;
  }
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yellow_.InternalSwap(&other->yellow_);
  blue_.InternalSwap(&other->blue_);
  radio_response_.InternalSwap(&other->radio_response_);
  vision_frames_.InternalSwap(&other->vision_frames_);
  simple_tracking_yellow_.InternalSwap(&other->simple_tracking_yellow_);
  simple_tracking_blue_.InternalSwap(&other->simple_tracking_blue_);
  reality_.InternalSwap(&other->reality_);
  vision_frame_times_.InternalSwap(&other->vision_frame_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, has_vision_data_)
      + sizeof(State::has_vision_data_)
      - PROTOBUF_FIELD_OFFSET(State, ball_)>(
          reinterpret_cast<char*>(&ball_),
          reinterpret_cast<char*>(&other->ball_));
  swap(world_source_, other->world_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorState::InitAsDefaultInstance() {
  ::world::_SimulatorState_default_instance_._instance.get_mutable()->ball_ = const_cast< ::world::SimBall*>(
      ::world::SimBall::internal_default_instance());
}
class SimulatorState::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorState>()._has_bits_);
  static const ::world::SimBall& ball(const SimulatorState* msg);
  static void set_has_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::world::SimBall&
SimulatorState::_Internal::ball(const SimulatorState* msg) {
  return *msg->ball_;
}
SimulatorState::SimulatorState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blue_robots_(arena),
  yellow_robots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.SimulatorState)
}
SimulatorState::SimulatorState(const SimulatorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      blue_robots_(from.blue_robots_),
      yellow_robots_(from.yellow_robots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball()) {
    ball_ = new ::world::SimBall(*from.ball_);
  } else {
    ball_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:world.SimulatorState)
}

void SimulatorState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorState_world_2eproto.base);
  ::memset(&ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&ball_)) + sizeof(time_));
}

SimulatorState::~SimulatorState() {
  // @@protoc_insertion_point(destructor:world.SimulatorState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_;
}

void SimulatorState::ArenaDtor(void* object) {
  SimulatorState* _this = reinterpret_cast< SimulatorState* >(object);
  (void)_this;
}
void SimulatorState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorState& SimulatorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorState_world_2eproto.base);
  return *internal_default_instance();
}


void SimulatorState::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SimulatorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blue_robots_.Clear();
  yellow_robots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ball_ != nullptr);
    ball_->Clear();
  }
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .world.SimRobot blue_robots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blue_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .world.SimRobot yellow_robots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yellow_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .world.SimBall ball = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SimulatorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .world.SimRobot blue_robots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blue_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blue_robots(i), target, stream);
  }

  // repeated .world.SimRobot yellow_robots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yellow_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_yellow_robots(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .world.SimBall ball = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ball(this), target, stream);
  }

  // optional int64 time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SimulatorState)
  return target;
}

size_t SimulatorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SimulatorState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .world.SimRobot blue_robots = 1;
  total_size += 1UL * this->_internal_blue_robots_size();
  for (const auto& msg : this->blue_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .world.SimRobot yellow_robots = 2;
  total_size += 1UL * this->_internal_yellow_robots_size();
  for (const auto& msg : this->yellow_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .world.SimBall ball = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_);
    }

    // optional int64 time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.SimulatorState)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.SimulatorState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.SimulatorState)
    MergeFrom(*source);
  }
}

void SimulatorState::MergeFrom(const SimulatorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.SimulatorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blue_robots_.MergeFrom(from.blue_robots_);
  yellow_robots_.MergeFrom(from.yellow_robots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ball()->::world::SimBall::MergeFrom(from._internal_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.SimulatorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorState::CopyFrom(const SimulatorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SimulatorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blue_robots_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(yellow_robots_)) return false;
  if (_internal_has_ball()) {
    if (!ball_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorState::InternalSwap(SimulatorState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blue_robots_.InternalSwap(&other->blue_robots_);
  yellow_robots_.InternalSwap(&other->yellow_robots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorState, time_)
      + sizeof(SimulatorState::time_)
      - PROTOBUF_FIELD_OFFSET(SimulatorState, ball_)>(
          reinterpret_cast<char*>(&ball_),
          reinterpret_cast<char*>(&other->ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimBall::InitAsDefaultInstance() {
}
class SimBall::_Internal {
 public:
  using HasBits = decltype(std::declval<SimBall>()._has_bits_);
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_angular_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_angular_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_angular_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

SimBall::SimBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.SimBall)
}
SimBall::SimBall(const SimBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p_x_, &from.p_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&p_x_)) + sizeof(angular_z_));
  // @@protoc_insertion_point(copy_constructor:world.SimBall)
}

void SimBall::SharedCtor() {
  ::memset(&p_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_z_) -
      reinterpret_cast<char*>(&p_x_)) + sizeof(angular_z_));
}

SimBall::~SimBall() {
  // @@protoc_insertion_point(destructor:world.SimBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimBall::ArenaDtor(void* object) {
  SimBall* _this = reinterpret_cast< SimBall* >(object);
  (void)_this;
}
void SimBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimBall& SimBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimBall_world_2eproto.base);
  return *internal_default_instance();
}


void SimBall::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SimBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&p_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_y_) -
        reinterpret_cast<char*>(&p_x_)) + sizeof(angular_y_));
  }
  angular_z_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float p_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_z(&has_bits);
          p_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_z(&has_bits);
          v_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angular_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_angular_x(&has_bits);
          angular_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angular_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_angular_y(&has_bits);
          angular_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angular_z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_angular_z(&has_bits);
          angular_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SimBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float p_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_p_x(), target);
  }

  // required float p_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_y(), target);
  }

  // required float p_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_z(), target);
  }

  // required float v_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_v_x(), target);
  }

  // required float v_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_y(), target);
  }

  // required float v_z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_z(), target);
  }

  // optional float angular_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_angular_x(), target);
  }

  // optional float angular_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_angular_y(), target);
  }

  // optional float angular_z = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_angular_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SimBall)
  return target;
}

size_t SimBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.SimBall)
  size_t total_size = 0;

  if (_internal_has_p_x()) {
    // required float p_x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_p_z()) {
    // required float p_z = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_v_x()) {
    // required float v_x = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_v_y()) {
    // required float v_y = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_v_z()) {
    // required float v_z = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SimBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SimBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float p_x = 1;
    total_size += 1 + 4;

    // required float p_y = 2;
    total_size += 1 + 4;

    // required float p_z = 3;
    total_size += 1 + 4;

    // required float v_x = 4;
    total_size += 1 + 4;

    // required float v_y = 5;
    total_size += 1 + 4;

    // required float v_z = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000c0u) {
    // optional float angular_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float angular_y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float angular_z = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.SimBall)
  GOOGLE_DCHECK_NE(&from, this);
  const SimBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.SimBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.SimBall)
    MergeFrom(*source);
  }
}

void SimBall::MergeFrom(const SimBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.SimBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_z_ = from.p_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_z_ = from.v_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      angular_x_ = from.angular_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      angular_y_ = from.angular_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_angular_z(from._internal_angular_z());
  }
}

void SimBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.SimBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimBall::CopyFrom(const SimBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SimBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SimBall::InternalSwap(SimBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimBall, angular_z_)
      + sizeof(SimBall::angular_z_)
      - PROTOBUF_FIELD_OFFSET(SimBall, p_x_)>(
          reinterpret_cast<char*>(&p_x_),
          reinterpret_cast<char*>(&other->p_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<Quaternion>()._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_j(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_real(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&i_, &from.i_,
    static_cast<size_t>(reinterpret_cast<char*>(&real_) -
    reinterpret_cast<char*>(&i_)) + sizeof(real_));
  // @@protoc_insertion_point(copy_constructor:world.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&i_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_) -
      reinterpret_cast<char*>(&i_)) + sizeof(real_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:world.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_world_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:world.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&i_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&real_) -
        reinterpret_cast<char*>(&i_)) + sizeof(real_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float j = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_j(&has_bits);
          j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float real = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_real(&has_bits);
          real_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float i = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_i(), target);
  }

  // required float j = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_j(), target);
  }

  // required float k = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_k(), target);
  }

  // required float real = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_real(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.Quaternion)
  return target;
}

size_t Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.Quaternion)
  size_t total_size = 0;

  if (_internal_has_i()) {
    // required float i = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_j()) {
    // required float j = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_k()) {
    // required float k = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_real()) {
    // required float real = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.Quaternion)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float i = 1;
    total_size += 1 + 4;

    // required float j = 2;
    total_size += 1 + 4;

    // required float k = 3;
    total_size += 1 + 4;

    // required float real = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000002u) {
      j_ = from.j_;
    }
    if (cached_has_bits & 0x00000004u) {
      k_ = from.k_;
    }
    if (cached_has_bits & 0x00000008u) {
      real_ = from.real_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, real_)
      + sizeof(Quaternion::real_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, i_)>(
          reinterpret_cast<char*>(&i_),
          reinterpret_cast<char*>(&other->i_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimRobot::InitAsDefaultInstance() {
  ::world::_SimRobot_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::world::Quaternion*>(
      ::world::Quaternion::internal_default_instance());
}
class SimRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<SimRobot>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::world::Quaternion& rotation(const SimRobot* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_v_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_r_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_r_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_r_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_touches_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

const ::world::Quaternion&
SimRobot::_Internal::rotation(const SimRobot* msg) {
  return *msg->rotation_;
}
SimRobot::SimRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:world.SimRobot)
}
SimRobot::SimRobot(const SimRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    rotation_ = new ::world::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&touches_ball_) -
    reinterpret_cast<char*>(&id_)) + sizeof(touches_ball_));
  // @@protoc_insertion_point(copy_constructor:world.SimRobot)
}

void SimRobot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimRobot_world_2eproto.base);
  ::memset(&rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touches_ball_) -
      reinterpret_cast<char*>(&rotation_)) + sizeof(touches_ball_));
}

SimRobot::~SimRobot() {
  // @@protoc_insertion_point(destructor:world.SimRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rotation_;
}

void SimRobot::ArenaDtor(void* object) {
  SimRobot* _this = reinterpret_cast< SimRobot* >(object);
  (void)_this;
}
void SimRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimRobot& SimRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimRobot_world_2eproto.base);
  return *internal_default_instance();
}


void SimRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SimRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rotation_ != nullptr);
    rotation_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_z_) -
        reinterpret_cast<char*>(&id_)) + sizeof(v_z_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&r_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touches_ball_) -
        reinterpret_cast<char*>(&r_x_)) + sizeof(touches_ball_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float p_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float p_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_p_z(&has_bits);
          p_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .world.Quaternion rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float v_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float v_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_v_z(&has_bits);
          v_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float r_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_r_x(&has_bits);
          r_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float r_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_r_y(&has_bits);
          r_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float r_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_r_z(&has_bits);
          r_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool touches_ball = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_touches_ball(&has_bits);
          touches_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SimRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required float p_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_x(), target);
  }

  // required float p_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_y(), target);
  }

  // required float p_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_p_z(), target);
  }

  // required .world.Quaternion rotation = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rotation(this), target, stream);
  }

  // required float v_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_x(), target);
  }

  // required float v_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_y(), target);
  }

  // required float v_z = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_v_z(), target);
  }

  // required float r_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_r_x(), target);
  }

  // required float r_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_r_y(), target);
  }

  // required float r_z = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_r_z(), target);
  }

  // optional bool touches_ball = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_touches_ball(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SimRobot)
  return target;
}

size_t SimRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:world.SimRobot)
  size_t total_size = 0;

  if (_internal_has_rotation()) {
    // required .world.Quaternion rotation = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_p_x()) {
    // required float p_x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_p_y()) {
    // required float p_y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_p_z()) {
    // required float p_z = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_v_x()) {
    // required float v_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_v_y()) {
    // required float v_y = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_v_z()) {
    // required float v_z = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_r_x()) {
    // required float r_x = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_r_y()) {
    // required float r_y = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_r_z()) {
    // required float r_z = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SimRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SimRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required .world.Quaternion rotation = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);

    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required float p_x = 2;
    total_size += 1 + 4;

    // required float p_y = 3;
    total_size += 1 + 4;

    // required float p_z = 4;
    total_size += 1 + 4;

    // required float v_x = 6;
    total_size += 1 + 4;

    // required float v_y = 7;
    total_size += 1 + 4;

    // required float v_z = 8;
    total_size += 1 + 4;

    // required float r_x = 9;
    total_size += 1 + 4;

    // required float r_y = 10;
    total_size += 1 + 4;

    // required float r_z = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool touches_ball = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:world.SimRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const SimRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:world.SimRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:world.SimRobot)
    MergeFrom(*source);
  }
}

void SimRobot::MergeFrom(const SimRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:world.SimRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rotation()->::world::Quaternion::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      p_y_ = from.p_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      p_z_ = from.p_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      v_z_ = from.v_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      r_x_ = from.r_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      r_y_ = from.r_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      r_z_ = from.r_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      touches_ball_ = from.touches_ball_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:world.SimRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimRobot::CopyFrom(const SimRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SimRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_rotation()) {
    if (!rotation_->IsInitialized()) return false;
  }
  return true;
}

void SimRobot::InternalSwap(SimRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimRobot, touches_ball_)
      + sizeof(SimRobot::touches_ball_)
      - PROTOBUF_FIELD_OFFSET(SimRobot, rotation_)>(
          reinterpret_cast<char*>(&rotation_),
          reinterpret_cast<char*>(&other->rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace world
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::world::Geometry* Arena::CreateMaybeMessage< ::world::Geometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::Geometry >(arena);
}
template<> PROTOBUF_NOINLINE ::world::BallModel* Arena::CreateMaybeMessage< ::world::BallModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::BallModel >(arena);
}
template<> PROTOBUF_NOINLINE ::world::DivisionDimensions* Arena::CreateMaybeMessage< ::world::DivisionDimensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::DivisionDimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::world::BallPosition* Arena::CreateMaybeMessage< ::world::BallPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::BallPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::world::Ball* Arena::CreateMaybeMessage< ::world::Ball >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::Ball >(arena);
}
template<> PROTOBUF_NOINLINE ::world::RobotPosition* Arena::CreateMaybeMessage< ::world::RobotPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::RobotPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::world::Robot* Arena::CreateMaybeMessage< ::world::Robot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::Robot >(arena);
}
template<> PROTOBUF_NOINLINE ::world::TrackingAOI* Arena::CreateMaybeMessage< ::world::TrackingAOI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::TrackingAOI >(arena);
}
template<> PROTOBUF_NOINLINE ::world::State* Arena::CreateMaybeMessage< ::world::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::State >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SimulatorState* Arena::CreateMaybeMessage< ::world::SimulatorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SimulatorState >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SimBall* Arena::CreateMaybeMessage< ::world::SimBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SimBall >(arena);
}
template<> PROTOBUF_NOINLINE ::world::Quaternion* Arena::CreateMaybeMessage< ::world::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SimRobot* Arena::CreateMaybeMessage< ::world::SimRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SimRobot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
