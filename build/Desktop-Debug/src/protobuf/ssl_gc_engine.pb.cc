// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_engine.proto

#include "ssl_gc_engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ball_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Robot_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotId_ssl_5fgc_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fengine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_ssl_5fgc_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class GcState_TeamStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcState_TeamStateEntry_DoNotUse> _instance;
} _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcState_AutoRefStateEntry_DoNotUse> _instance;
} _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TrackersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcState_TrackersEntry_DoNotUse> _instance;
} _GcState_TrackersEntry_DoNotUse_default_instance_;
class GcStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcState> _instance;
} _GcState_default_instance_;
class GcStateTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcStateTeam> _instance;
} _GcStateTeam_default_instance_;
class TeamAdvantageChoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamAdvantageChoice> _instance;
} _TeamAdvantageChoice_default_instance_;
class GcStateAutoRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcStateAutoRef> _instance;
} _GcStateAutoRef_default_instance_;
class GcStateTrackerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcStateTracker> _instance;
} _GcStateTracker_default_instance_;
class BallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ball> _instance;
} _Ball_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot> _instance;
} _Robot_default_instance_;
class ContinueActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContinueAction> _instance;
} _ContinueAction_default_instance_;
class ContinueHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContinueHint> _instance;
} _ContinueHint_default_instance_;
static void InitDefaultsscc_info_Ball_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ball_default_instance_;
    new (ptr) ::Ball();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ball::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ball_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ball_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_Vector3_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ContinueAction_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContinueAction_default_instance_;
    new (ptr) ::ContinueAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContinueAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContinueAction_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ContinueHint_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContinueHint_default_instance_;
    new (ptr) ::ContinueHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContinueHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContinueHint_ssl_5fgc_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_GcState_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_default_instance_;
    new (ptr) ::GcState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GcState_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GcState_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_AutoRefStateEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_AutoRefStateEntry_DoNotUse();
  }
  ::GcState_AutoRefStateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_TeamStateEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_TeamStateEntry_DoNotUse();
  }
  ::GcState_TeamStateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_TrackersEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_TrackersEntry_DoNotUse();
  }
  ::GcState_TrackersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateAutoRef_default_instance_;
    new (ptr) ::GcStateAutoRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateAutoRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto}, {}};

static void InitDefaultsscc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateTeam_default_instance_;
    new (ptr) ::GcStateTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateTracker_default_instance_;
    new (ptr) ::GcStateTracker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateTracker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_Ball_ssl_5fgc_5fengine_2eproto.base,
      &scc_info_Robot_ssl_5fgc_5fengine_2eproto.base,}};

static void InitDefaultsscc_info_Robot_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Robot_default_instance_;
    new (ptr) ::Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Robot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Robot_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Robot_ssl_5fgc_5fengine_2eproto}, {
      &scc_info_RobotId_ssl_5fgc_5fcommon_2eproto.base,
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamAdvantageChoice_default_instance_;
    new (ptr) ::TeamAdvantageChoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamAdvantageChoice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgc_5fengine_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fengine_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fengine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgc_5fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcState, team_state_),
  PROTOBUF_FIELD_OFFSET(::GcState, auto_ref_state_),
  PROTOBUF_FIELD_OFFSET(::GcState, trackers_),
  PROTOBUF_FIELD_OFFSET(::GcState, continue_actions_),
  PROTOBUF_FIELD_OFFSET(::GcState, continue_hints_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, connected_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, connection_verified_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, remote_control_connected_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, remote_control_connection_verified_),
  PROTOBUF_FIELD_OFFSET(::GcStateTeam, advantage_choice_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeamAdvantageChoice, choice_),
  0,
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcStateAutoRef, connection_verified_),
  0,
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, source_name_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, uuid_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, ball_),
  PROTOBUF_FIELD_OFFSET(::GcStateTracker, robots_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Ball, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Ball, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Ball, pos_),
  PROTOBUF_FIELD_OFFSET(::Ball, vel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Robot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Robot, id_),
  PROTOBUF_FIELD_OFFSET(::Robot, pos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ContinueAction, type_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, for_team_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, continuation_issues_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, ready_at_),
  PROTOBUF_FIELD_OFFSET(::ContinueAction, state_),
  1,
  2,
  ~0u,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::ContinueHint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContinueHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ContinueHint, message_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GcState_TeamStateEntry_DoNotUse)},
  { 9, 16, sizeof(::GcState_AutoRefStateEntry_DoNotUse)},
  { 18, 25, sizeof(::GcState_TrackersEntry_DoNotUse)},
  { 27, -1, sizeof(::GcState)},
  { 37, 47, sizeof(::GcStateTeam)},
  { 52, 58, sizeof(::TeamAdvantageChoice)},
  { 59, 65, sizeof(::GcStateAutoRef)},
  { 66, 75, sizeof(::GcStateTracker)},
  { 79, 86, sizeof(::Ball)},
  { 88, 95, sizeof(::Robot)},
  { 97, 107, sizeof(::ContinueAction)},
  { 112, 118, sizeof(::ContinueHint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcState_TeamStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcState_AutoRefStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcState_TrackersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcStateTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeamAdvantageChoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcStateAutoRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GcStateTracker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Ball_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Robot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContinueAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContinueHint_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgc_5fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ssl_gc_engine.proto\032\025ssl_gc_geometry.p"
  "roto\032\023ssl_gc_common.proto\032\037google/protob"
  "uf/timestamp.proto\"\235\003\n\007GcState\022+\n\nteam_s"
  "tate\030\001 \003(\0132\027.GcState.TeamStateEntry\0222\n\016a"
  "uto_ref_state\030\002 \003(\0132\032.GcState.AutoRefSta"
  "teEntry\022(\n\010trackers\030\003 \003(\0132\026.GcState.Trac"
  "kersEntry\022)\n\020continue_actions\030\004 \003(\0132\017.Co"
  "ntinueAction\022%\n\016continue_hints\030\005 \003(\0132\r.C"
  "ontinueHint\032>\n\016TeamStateEntry\022\013\n\003key\030\001 \001"
  "(\t\022\033\n\005value\030\002 \001(\0132\014.GcStateTeam:\0028\001\032D\n\021A"
  "utoRefStateEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002"
  " \001(\0132\017.GcStateAutoRef:\0028\001\032/\n\rTrackersEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\273\001\n\013G"
  "cStateTeam\022\021\n\tconnected\030\001 \001(\010\022\033\n\023connect"
  "ion_verified\030\002 \001(\010\022 \n\030remote_control_con"
  "nected\030\003 \001(\010\022*\n\"remote_control_connectio"
  "n_verified\030\004 \001(\010\022.\n\020advantage_choice\030\005 \001"
  "(\0132\024.TeamAdvantageChoice\"v\n\023TeamAdvantag"
  "eChoice\0224\n\006choice\030\001 \001(\0162$.TeamAdvantageC"
  "hoice.AdvantageChoice\")\n\017AdvantageChoice"
  "\022\010\n\004STOP\020\000\022\014\n\010CONTINUE\020\001\"-\n\016GcStateAutoR"
  "ef\022\033\n\023connection_verified\030\001 \001(\010\"`\n\016GcSta"
  "teTracker\022\023\n\013source_name\030\001 \001(\t\022\014\n\004uuid\030\004"
  " \001(\t\022\023\n\004ball\030\002 \001(\0132\005.Ball\022\026\n\006robots\030\003 \003("
  "\0132\006.Robot\"4\n\004Ball\022\025\n\003pos\030\001 \001(\0132\010.Vector3"
  "\022\025\n\003vel\030\002 \001(\0132\010.Vector3\"4\n\005Robot\022\024\n\002id\030\001"
  " \001(\0132\010.RobotId\022\025\n\003pos\030\002 \001(\0132\010.Vector2\"\304\005"
  "\n\016ContinueAction\022\"\n\004type\030\001 \002(\0162\024.Continu"
  "eAction.Type\022\027\n\010for_team\030\002 \002(\0162\005.Team\022\033\n"
  "\023continuation_issues\030\003 \003(\t\022,\n\010ready_at\030\004"
  " \001(\0132\032.google.protobuf.Timestamp\022$\n\005stat"
  "e\030\005 \001(\0162\025.ContinueAction.State\"\235\003\n\004Type\022"
  "\020\n\014TYPE_UNKNOWN\020\000\022\010\n\004HALT\020\001\022\024\n\020RESUME_FR"
  "OM_HALT\020\n\022\r\n\tSTOP_GAME\020\002\022\017\n\013FORCE_START\020"
  "\013\022\r\n\tFREE_KICK\020\021\022\020\n\014NEXT_COMMAND\020\003\022\030\n\024BA"
  "LL_PLACEMENT_START\020\004\022\031\n\025BALL_PLACEMENT_C"
  "ANCEL\020\t\022\033\n\027BALL_PLACEMENT_COMPLETE\020\016\022\027\n\023"
  "BALL_PLACEMENT_FAIL\020\017\022\021\n\rTIMEOUT_START\020\005"
  "\022\020\n\014TIMEOUT_STOP\020\006\022\024\n\020BOT_SUBSTITUTION\020\007"
  "\022\016\n\nNEXT_STAGE\020\010\022\014\n\010END_GAME\020\020\022\017\n\013ACCEPT"
  "_GOAL\020\014\022\017\n\013REJECT_GOAL\020\024\022\020\n\014NORMAL_START"
  "\020\r\022\024\n\020CHALLENGE_ACCEPT\020\022\022\024\n\020CHALLENGE_RE"
  "JECT\020\023\"d\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\013\n\007BL"
  "OCKED\020\001\022\013\n\007WAITING\020\002\022\016\n\nREADY_AUTO\020\003\022\020\n\014"
  "READY_MANUAL\020\004\022\014\n\010DISABLED\020\005\"\037\n\014Continue"
  "Hint\022\017\n\007message\030\001 \002(\tB@Z>github.com/Robo"
  "Cup-SSL/ssl-game-controller/internal/app"
  "/engine"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgc_5fengine_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgc_5fengine_2eproto_sccs[12] = {
  &scc_info_Ball_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcState_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcState_AutoRefStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcState_TeamStateEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcState_TrackersEntry_DoNotUse_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_Robot_ssl_5fgc_5fengine_2eproto.base,
  &scc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgc_5fengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fengine_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgc_5fengine_2eproto, "ssl_gc_engine.proto", 1887,
  &descriptor_table_ssl_5fgc_5fengine_2eproto_once, descriptor_table_ssl_5fgc_5fengine_2eproto_sccs, descriptor_table_ssl_5fgc_5fengine_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_ssl_5fgc_5fengine_2eproto::offsets,
  file_level_metadata_ssl_5fgc_5fengine_2eproto, 12, file_level_enum_descriptors_ssl_5fgc_5fengine_2eproto, file_level_service_descriptors_ssl_5fgc_5fengine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgc_5fengine_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgc_5fengine_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamAdvantageChoice_AdvantageChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fengine_2eproto[0];
}
bool TeamAdvantageChoice_AdvantageChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::STOP;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::CONTINUE;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MIN;
constexpr TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MAX;
constexpr int TeamAdvantageChoice::AdvantageChoice_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fengine_2eproto[1];
}
bool ContinueAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContinueAction_Type ContinueAction::TYPE_UNKNOWN;
constexpr ContinueAction_Type ContinueAction::HALT;
constexpr ContinueAction_Type ContinueAction::RESUME_FROM_HALT;
constexpr ContinueAction_Type ContinueAction::STOP_GAME;
constexpr ContinueAction_Type ContinueAction::FORCE_START;
constexpr ContinueAction_Type ContinueAction::FREE_KICK;
constexpr ContinueAction_Type ContinueAction::NEXT_COMMAND;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_START;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_CANCEL;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_COMPLETE;
constexpr ContinueAction_Type ContinueAction::BALL_PLACEMENT_FAIL;
constexpr ContinueAction_Type ContinueAction::TIMEOUT_START;
constexpr ContinueAction_Type ContinueAction::TIMEOUT_STOP;
constexpr ContinueAction_Type ContinueAction::BOT_SUBSTITUTION;
constexpr ContinueAction_Type ContinueAction::NEXT_STAGE;
constexpr ContinueAction_Type ContinueAction::END_GAME;
constexpr ContinueAction_Type ContinueAction::ACCEPT_GOAL;
constexpr ContinueAction_Type ContinueAction::REJECT_GOAL;
constexpr ContinueAction_Type ContinueAction::NORMAL_START;
constexpr ContinueAction_Type ContinueAction::CHALLENGE_ACCEPT;
constexpr ContinueAction_Type ContinueAction::CHALLENGE_REJECT;
constexpr ContinueAction_Type ContinueAction::Type_MIN;
constexpr ContinueAction_Type ContinueAction::Type_MAX;
constexpr int ContinueAction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContinueAction_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fengine_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fengine_2eproto[2];
}
bool ContinueAction_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContinueAction_State ContinueAction::STATE_UNKNOWN;
constexpr ContinueAction_State ContinueAction::BLOCKED;
constexpr ContinueAction_State ContinueAction::WAITING;
constexpr ContinueAction_State ContinueAction::READY_AUTO;
constexpr ContinueAction_State ContinueAction::READY_MANUAL;
constexpr ContinueAction_State ContinueAction::DISABLED;
constexpr ContinueAction_State ContinueAction::State_MIN;
constexpr ContinueAction_State ContinueAction::State_MAX;
constexpr int ContinueAction::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse() {}
GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(const GcState_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_TeamStateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse() {}
GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_AutoRefStateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse() {}
GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcState_TrackersEntry_DoNotUse::MergeFrom(const GcState_TrackersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcState_TrackersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GcState_TrackersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GcState::InitAsDefaultInstance() {
}
class GcState::_Internal {
 public:
};

GcState::GcState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_state_(arena),
  auto_ref_state_(arena),
  trackers_(arena),
  continue_actions_(arena),
  continue_hints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GcState)
}
GcState::GcState(const GcState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      continue_actions_(from.continue_actions_),
      continue_hints_(from.continue_hints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  trackers_.MergeFrom(from.trackers_);
  // @@protoc_insertion_point(copy_constructor:GcState)
}

void GcState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GcState_ssl_5fgc_5fengine_2eproto.base);
}

GcState::~GcState() {
  // @@protoc_insertion_point(destructor:GcState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GcState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GcState::ArenaDtor(void* object) {
  GcState* _this = reinterpret_cast< GcState* >(object);
  (void)_this;
}
void GcState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcState& GcState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcState_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GcState::Clear() {
// @@protoc_insertion_point(message_clear_start:GcState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_state_.Clear();
  auto_ref_state_.Clear();
  trackers_.Clear();
  continue_actions_.Clear();
  continue_hints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .GcStateTeam> team_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&team_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .GcStateAutoRef> auto_ref_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&auto_ref_state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> trackers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&trackers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ContinueAction continue_actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_continue_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ContinueHint continue_hints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_continue_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  if (!this->_internal_team_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "GcState.TeamStateEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_team_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::const_iterator
          it = this->_internal_team_state().begin();
          it != this->_internal_team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GcState_TeamStateEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::const_iterator
          it = this->_internal_team_state().begin();
          it != this->_internal_team_state().end(); ++it) {
        target = GcState_TeamStateEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  if (!this->_internal_auto_ref_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "GcState.AutoRefStateEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_auto_ref_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_auto_ref_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::const_iterator
          it = this->_internal_auto_ref_state().begin();
          it != this->_internal_auto_ref_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GcState_AutoRefStateEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::const_iterator
          it = this->_internal_auto_ref_state().begin();
          it != this->_internal_auto_ref_state().end(); ++it) {
        target = GcState_AutoRefStateEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> trackers = 3;
  if (!this->_internal_trackers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_trackers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_trackers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_trackers().begin();
          it != this->_internal_trackers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GcState_TrackersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_trackers().begin();
          it != this->_internal_trackers().end(); ++it) {
        target = GcState_TrackersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .ContinueAction continue_actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_continue_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_continue_actions(i), target, stream);
  }

  // repeated .ContinueHint continue_hints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_continue_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_continue_hints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcState)
  return target;
}

size_t GcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateTeam >::const_iterator
      it = this->_internal_team_state().begin();
      it != this->_internal_team_state().end(); ++it) {
    total_size += GcState_TeamStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_auto_ref_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::GcStateAutoRef >::const_iterator
      it = this->_internal_auto_ref_state().begin();
      it != this->_internal_auto_ref_state().end(); ++it) {
    total_size += GcState_AutoRefStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> trackers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trackers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_trackers().begin();
      it != this->_internal_trackers().end(); ++it) {
    total_size += GcState_TrackersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ContinueAction continue_actions = 4;
  total_size += 1UL * this->_internal_continue_actions_size();
  for (const auto& msg : this->continue_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ContinueHint continue_hints = 5;
  total_size += 1UL * this->_internal_continue_hints_size();
  for (const auto& msg : this->continue_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcState)
  GOOGLE_DCHECK_NE(&from, this);
  const GcState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GcState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcState)
    MergeFrom(*source);
  }
}

void GcState::MergeFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  trackers_.MergeFrom(from.trackers_);
  continue_actions_.MergeFrom(from.continue_actions_);
  continue_hints_.MergeFrom(from.continue_hints_);
}

void GcState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcState::CopyFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(continue_actions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(continue_hints_)) return false;
  return true;
}

void GcState::InternalSwap(GcState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  team_state_.Swap(&other->team_state_);
  auto_ref_state_.Swap(&other->auto_ref_state_);
  trackers_.Swap(&other->trackers_);
  continue_actions_.InternalSwap(&other->continue_actions_);
  continue_hints_.InternalSwap(&other->continue_hints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GcStateTeam::InitAsDefaultInstance() {
  ::_GcStateTeam_default_instance_._instance.get_mutable()->advantage_choice_ = const_cast< ::TeamAdvantageChoice*>(
      ::TeamAdvantageChoice::internal_default_instance());
}
class GcStateTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateTeam>()._has_bits_);
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remote_control_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_control_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TeamAdvantageChoice& advantage_choice(const GcStateTeam* msg);
  static void set_has_advantage_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TeamAdvantageChoice&
GcStateTeam::_Internal::advantage_choice(const GcStateTeam* msg) {
  return *msg->advantage_choice_;
}
GcStateTeam::GcStateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GcStateTeam)
}
GcStateTeam::GcStateTeam(const GcStateTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advantage_choice()) {
    advantage_choice_ = new ::TeamAdvantageChoice(*from.advantage_choice_);
  } else {
    advantage_choice_ = nullptr;
  }
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_control_connection_verified_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  // @@protoc_insertion_point(copy_constructor:GcStateTeam)
}

void GcStateTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto.base);
  ::memset(&advantage_choice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&advantage_choice_)) + sizeof(remote_control_connection_verified_));
}

GcStateTeam::~GcStateTeam() {
  // @@protoc_insertion_point(destructor:GcStateTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GcStateTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advantage_choice_;
}

void GcStateTeam::ArenaDtor(void* object) {
  GcStateTeam* _this = reinterpret_cast< GcStateTeam* >(object);
  (void)_this;
}
void GcStateTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcStateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcStateTeam& GcStateTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcStateTeam_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GcStateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(advantage_choice_ != nullptr);
    advantage_choice_->Clear();
  }
  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connection_verified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connection_verified(&has_bits);
          connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remote_control_connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remote_control_connected(&has_bits);
          remote_control_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remote_control_connection_verified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_remote_control_connection_verified(&has_bits);
          remote_control_connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TeamAdvantageChoice advantage_choice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_advantage_choice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcStateTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_connection_verified(), target);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_remote_control_connected(), target);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_remote_control_connection_verified(), target);
  }

  // optional .TeamAdvantageChoice advantage_choice = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::advantage_choice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTeam)
  return target;
}

size_t GcStateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TeamAdvantageChoice advantage_choice = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *advantage_choice_);
    }

    // optional bool connected = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool connection_verified = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connected = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connection_verified = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GcStateTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateTeam)
    MergeFrom(*source);
  }
}

void GcStateTeam::MergeFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_advantage_choice()->::TeamAdvantageChoice::MergeFrom(from._internal_advantage_choice());
    }
    if (cached_has_bits & 0x00000002u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      connection_verified_ = from.connection_verified_;
    }
    if (cached_has_bits & 0x00000008u) {
      remote_control_connected_ = from.remote_control_connected_;
    }
    if (cached_has_bits & 0x00000010u) {
      remote_control_connection_verified_ = from.remote_control_connection_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GcStateTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTeam::CopyFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTeam::IsInitialized() const {
  return true;
}

void GcStateTeam::InternalSwap(GcStateTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcStateTeam, remote_control_connection_verified_)
      + sizeof(GcStateTeam::remote_control_connection_verified_)
      - PROTOBUF_FIELD_OFFSET(GcStateTeam, advantage_choice_)>(
          reinterpret_cast<char*>(&advantage_choice_),
          reinterpret_cast<char*>(&other->advantage_choice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamAdvantageChoice::InitAsDefaultInstance() {
}
class TeamAdvantageChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamAdvantageChoice>()._has_bits_);
  static void set_has_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TeamAdvantageChoice::TeamAdvantageChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeamAdvantageChoice)
}
TeamAdvantageChoice::TeamAdvantageChoice(const TeamAdvantageChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  choice_ = from.choice_;
  // @@protoc_insertion_point(copy_constructor:TeamAdvantageChoice)
}

void TeamAdvantageChoice::SharedCtor() {
  choice_ = 0;
}

TeamAdvantageChoice::~TeamAdvantageChoice() {
  // @@protoc_insertion_point(destructor:TeamAdvantageChoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamAdvantageChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TeamAdvantageChoice::ArenaDtor(void* object) {
  TeamAdvantageChoice* _this = reinterpret_cast< TeamAdvantageChoice* >(object);
  (void)_this;
}
void TeamAdvantageChoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamAdvantageChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamAdvantageChoice& TeamAdvantageChoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamAdvantageChoice_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void TeamAdvantageChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamAdvantageChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamAdvantageChoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TeamAdvantageChoice_AdvantageChoice_IsValid(val))) {
            _internal_set_choice(static_cast<::TeamAdvantageChoice_AdvantageChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamAdvantageChoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamAdvantageChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamAdvantageChoice)
  return target;
}

size_t TeamAdvantageChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamAdvantageChoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_choice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamAdvantageChoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamAdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAdvantageChoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamAdvantageChoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamAdvantageChoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamAdvantageChoice)
    MergeFrom(*source);
  }
}

void TeamAdvantageChoice::MergeFrom(const TeamAdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamAdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_choice()) {
    _internal_set_choice(from._internal_choice());
  }
}

void TeamAdvantageChoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamAdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAdvantageChoice::CopyFrom(const TeamAdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamAdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAdvantageChoice::IsInitialized() const {
  return true;
}

void TeamAdvantageChoice::InternalSwap(TeamAdvantageChoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(choice_, other->choice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamAdvantageChoice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GcStateAutoRef::InitAsDefaultInstance() {
}
class GcStateAutoRef::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateAutoRef>()._has_bits_);
  static void set_has_connection_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcStateAutoRef::GcStateAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GcStateAutoRef)
}
GcStateAutoRef::GcStateAutoRef(const GcStateAutoRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_verified_ = from.connection_verified_;
  // @@protoc_insertion_point(copy_constructor:GcStateAutoRef)
}

void GcStateAutoRef::SharedCtor() {
  connection_verified_ = false;
}

GcStateAutoRef::~GcStateAutoRef() {
  // @@protoc_insertion_point(destructor:GcStateAutoRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GcStateAutoRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GcStateAutoRef::ArenaDtor(void* object) {
  GcStateAutoRef* _this = reinterpret_cast< GcStateAutoRef* >(object);
  (void)_this;
}
void GcStateAutoRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcStateAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcStateAutoRef& GcStateAutoRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcStateAutoRef_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GcStateAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_verified_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateAutoRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool connection_verified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connection_verified(&has_bits);
          connection_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcStateAutoRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connection_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateAutoRef)
  return target;
}

size_t GcStateAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateAutoRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool connection_verified = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateAutoRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateAutoRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GcStateAutoRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateAutoRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateAutoRef)
    MergeFrom(*source);
  }
}

void GcStateAutoRef::MergeFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_verified()) {
    _internal_set_connection_verified(from._internal_connection_verified());
  }
}

void GcStateAutoRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateAutoRef::CopyFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateAutoRef::IsInitialized() const {
  return true;
}

void GcStateAutoRef::InternalSwap(GcStateAutoRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connection_verified_, other->connection_verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateAutoRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GcStateTracker::InitAsDefaultInstance() {
  ::_GcStateTracker_default_instance_._instance.get_mutable()->ball_ = const_cast< ::Ball*>(
      ::Ball::internal_default_instance());
}
class GcStateTracker::_Internal {
 public:
  using HasBits = decltype(std::declval<GcStateTracker>()._has_bits_);
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Ball& ball(const GcStateTracker* msg);
  static void set_has_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Ball&
GcStateTracker::_Internal::ball(const GcStateTracker* msg) {
  return *msg->ball_;
}
GcStateTracker::GcStateTracker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GcStateTracker)
}
GcStateTracker::GcStateTracker(const GcStateTracker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robots_(from.robots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_name()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  if (from._internal_has_ball()) {
    ball_ = new ::Ball(*from.ball_);
  } else {
    ball_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GcStateTracker)
}

void GcStateTracker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ball_ = nullptr;
}

GcStateTracker::~GcStateTracker() {
  // @@protoc_insertion_point(destructor:GcStateTracker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GcStateTracker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ball_;
}

void GcStateTracker::ArenaDtor(void* object) {
  GcStateTracker* _this = reinterpret_cast< GcStateTracker* >(object);
  (void)_this;
}
void GcStateTracker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcStateTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcStateTracker& GcStateTracker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcStateTracker_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void GcStateTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ball_ != nullptr);
      ball_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcStateTracker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GcStateTracker.source_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Ball ball = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Robot robots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GcStateTracker.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcStateTracker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTracker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GcStateTracker.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // optional .Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ball(this), target, stream);
  }

  // repeated .Robot robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_robots(i), target, stream);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GcStateTracker.uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTracker)
  return target;
}

size_t GcStateTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTracker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Robot robots = 3;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional string uuid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .Ball ball = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTracker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTracker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GcStateTracker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateTracker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateTracker)
    MergeFrom(*source);
  }
}

void GcStateTracker::MergeFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_.MergeFrom(from.robots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ball()->::Ball::MergeFrom(from._internal_ball());
    }
  }
}

void GcStateTracker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTracker::CopyFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTracker::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_)) return false;
  if (_internal_has_ball()) {
    if (!ball_->IsInitialized()) return false;
  }
  return true;
}

void GcStateTracker::InternalSwap(GcStateTracker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robots_.InternalSwap(&other->robots_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ball_, other->ball_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcStateTracker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ball::InitAsDefaultInstance() {
  ::_Ball_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  ::_Ball_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
}
class Ball::_Internal {
 public:
  using HasBits = decltype(std::declval<Ball>()._has_bits_);
  static const ::Vector3& pos(const Ball* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const Ball* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Vector3&
Ball::_Internal::pos(const Ball* msg) {
  return *msg->pos_;
}
const ::Vector3&
Ball::_Internal::vel(const Ball* msg) {
  return *msg->vel_;
}
void Ball::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Ball::clear_vel() {
  if (vel_ != nullptr) vel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Ball::Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Ball)
}
Ball::Ball(const Ball& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Ball)
}

void Ball::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ball_ssl_5fgc_5fengine_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(vel_));
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:Ball)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ball::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void Ball::ArenaDtor(void* object) {
  Ball* _this = reinterpret_cast< Ball* >(object);
  (void)_this;
}
void Ball::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ball::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ball& Ball::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ball_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:Ball)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ball::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ball::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ball)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball)
  return target;
}

size_t Ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ball)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector3 pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .Vector3 vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vel_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ball::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ball)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ball>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ball)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ball)
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ball)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::Vector3::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vel()->::Vector3::MergeFrom(from._internal_vel());
    }
  }
}

void Ball::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  return true;
}

void Ball::InternalSwap(Ball* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ball, vel_)
      + sizeof(Ball::vel_)
      - PROTOBUF_FIELD_OFFSET(Ball, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ball::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::_Robot_default_instance_._instance.get_mutable()->id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
  ::_Robot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._has_bits_);
  static const ::RobotId& id(const Robot* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& pos(const Robot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RobotId&
Robot::_Internal::id(const Robot* msg) {
  return *msg->id_;
}
const ::Vector2&
Robot::_Internal::pos(const Robot* msg) {
  return *msg->pos_;
}
void Robot::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Robot::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Robot::Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RobotId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Robot)
}

void Robot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_ssl_5fgc_5fengine_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pos_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:Robot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete pos_;
}

void Robot::ArenaDtor(void* object) {
  Robot* _this = reinterpret_cast< Robot* >(object);
  (void)_this;
}
void Robot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot& Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .RobotId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector2 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .RobotId id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .Vector2 pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RobotId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::Vector2::MergeFrom(from._internal_pos());
    }
  }
}

void Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, pos_)
      + sizeof(Robot::pos_)
      - PROTOBUF_FIELD_OFFSET(Robot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContinueAction::InitAsDefaultInstance() {
  ::_ContinueAction_default_instance_._instance.get_mutable()->ready_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ContinueAction::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinueAction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_for_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& ready_at(const ContinueAction* msg);
  static void set_has_ready_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ContinueAction::_Internal::ready_at(const ContinueAction* msg) {
  return *msg->ready_at_;
}
void ContinueAction::clear_ready_at() {
  if (ready_at_ != nullptr) ready_at_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ContinueAction::ContinueAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  continuation_issues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ContinueAction)
}
ContinueAction::ContinueAction(const ContinueAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      continuation_issues_(from.continuation_issues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ready_at()) {
    ready_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.ready_at_);
  } else {
    ready_at_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ContinueAction)
}

void ContinueAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto.base);
  ::memset(&ready_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&ready_at_)) + sizeof(state_));
}

ContinueAction::~ContinueAction() {
  // @@protoc_insertion_point(destructor:ContinueAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContinueAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ready_at_;
}

void ContinueAction::ArenaDtor(void* object) {
  ContinueAction* _this = reinterpret_cast< ContinueAction* >(object);
  (void)_this;
}
void ContinueAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContinueAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContinueAction& ContinueAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContinueAction_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void ContinueAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  continuation_issues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ready_at_ != nullptr);
    ready_at_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ContinueAction.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ContinueAction_Type_IsValid(val))) {
            _internal_set_type(static_cast<::ContinueAction_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .Team for_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_for_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string continuation_issues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_continuation_issues();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ContinueAction.continuation_issues");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp ready_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ContinueAction.State state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ContinueAction_State_IsValid(val))) {
            _internal_set_state(static_cast<::ContinueAction_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContinueAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContinueAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ContinueAction.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_for_team(), target);
  }

  // repeated string continuation_issues = 3;
  for (int i = 0, n = this->_internal_continuation_issues_size(); i < n; i++) {
    const auto& s = this->_internal_continuation_issues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContinueAction.continuation_issues");
    target = stream->WriteString(3, s, target);
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ready_at(this), target, stream);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueAction)
  return target;
}

size_t ContinueAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ContinueAction)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_for_team()) {
    // required .Team for_team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  return total_size;
}
size_t ContinueAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueAction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .Team for_team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string continuation_issues = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(continuation_issues_.size());
  for (int i = 0, n = continuation_issues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      continuation_issues_.Get(i));
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ready_at_);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinueAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContinueAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinueAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContinueAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContinueAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContinueAction)
    MergeFrom(*source);
  }
}

void ContinueAction::MergeFrom(const ContinueAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContinueAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  continuation_issues_.MergeFrom(from.continuation_issues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ready_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_ready_at());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      for_team_ = from.for_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContinueAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContinueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueAction::CopyFrom(const ContinueAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueAction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ContinueAction::InternalSwap(ContinueAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  continuation_issues_.InternalSwap(&other->continuation_issues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinueAction, state_)
      + sizeof(ContinueAction::state_)
      - PROTOBUF_FIELD_OFFSET(ContinueAction, ready_at_)>(
          reinterpret_cast<char*>(&ready_at_),
          reinterpret_cast<char*>(&other->ready_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContinueHint::InitAsDefaultInstance() {
}
class ContinueHint::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinueHint>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ContinueHint::ContinueHint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ContinueHint)
}
ContinueHint::ContinueHint(const ContinueHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ContinueHint)
}

void ContinueHint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContinueHint::~ContinueHint() {
  // @@protoc_insertion_point(destructor:ContinueHint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContinueHint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContinueHint::ArenaDtor(void* object) {
  ContinueHint* _this = reinterpret_cast< ContinueHint* >(object);
  (void)_this;
}
void ContinueHint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContinueHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContinueHint& ContinueHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContinueHint_ssl_5fgc_5fengine_2eproto.base);
  return *internal_default_instance();
}


void ContinueHint::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ContinueHint.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContinueHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContinueHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContinueHint.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueHint)
  return target;
}

size_t ContinueHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueHint)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinueHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContinueHint)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinueHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContinueHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContinueHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContinueHint)
    MergeFrom(*source);
  }
}

void ContinueHint::MergeFrom(const ContinueHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContinueHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void ContinueHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContinueHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueHint::CopyFrom(const ContinueHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueHint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ContinueHint::InternalSwap(ContinueHint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueHint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_TeamStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_AutoRefStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_AutoRefStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState_TrackersEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_TrackersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState_TrackersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GcState* Arena::CreateMaybeMessage< ::GcState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcState >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateTeam* Arena::CreateMaybeMessage< ::GcStateTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamAdvantageChoice* Arena::CreateMaybeMessage< ::TeamAdvantageChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamAdvantageChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateAutoRef* Arena::CreateMaybeMessage< ::GcStateAutoRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateAutoRef >(arena);
}
template<> PROTOBUF_NOINLINE ::GcStateTracker* Arena::CreateMaybeMessage< ::GcStateTracker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcStateTracker >(arena);
}
template<> PROTOBUF_NOINLINE ::Ball* Arena::CreateMaybeMessage< ::Ball >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ball >(arena);
}
template<> PROTOBUF_NOINLINE ::Robot* Arena::CreateMaybeMessage< ::Robot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot >(arena);
}
template<> PROTOBUF_NOINLINE ::ContinueAction* Arena::CreateMaybeMessage< ::ContinueAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContinueAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ContinueHint* Arena::CreateMaybeMessage< ::ContinueHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContinueHint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
