// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#include "ssl_game_controller_auto_ref.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fevent_5f2019_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<38> scc_info_GameEvent_ssl_5fgame_5fevent_5f2019_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto;
namespace gameController {
class AutoRefRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoRefRegistration> _instance;
} _AutoRefRegistration_default_instance_;
class AutoRefToControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoRefToController> _instance;
} _AutoRefToController_default_instance_;
class ControllerToAutoRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerToAutoRef> _instance;
  const ::gameController::ControllerReply* controller_reply_;
} _ControllerToAutoRef_default_instance_;
}  // namespace gameController
static void InitDefaultsscc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_AutoRefRegistration_default_instance_;
    new (ptr) ::gameController::AutoRefRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::AutoRefRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_AutoRefToController_default_instance_;
    new (ptr) ::gameController::AutoRefToController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::AutoRefToController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,
      &scc_info_GameEvent_ssl_5fgame_5fevent_5f2019_2eproto.base,}};

static void InitDefaultsscc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gameController::_ControllerToAutoRef_default_instance_;
    new (ptr) ::gameController::ControllerToAutoRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gameController::ControllerToAutoRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto}, {
      &scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefRegistration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefRegistration, identifier_),
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefRegistration, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefToController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefToController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefToController, signature_),
  PROTOBUF_FIELD_OFFSET(::gameController::AutoRefToController, game_event_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToAutoRef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gameController::ControllerToAutoRefDefaultTypeInternal, controller_reply_),
  PROTOBUF_FIELD_OFFSET(::gameController::ControllerToAutoRef, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gameController::AutoRefRegistration)},
  { 9, 16, sizeof(::gameController::AutoRefToController)},
  { 18, -1, sizeof(::gameController::ControllerToAutoRef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_AutoRefRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_AutoRefToController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gameController::_ControllerToAutoRef_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ssl_game_controller_auto_ref.proto\022\016ga"
  "meController\032 ssl_game_controller_common"
  ".proto\032\031ssl_game_event_2019.proto\"W\n\023Aut"
  "oRefRegistration\022\022\n\nidentifier\030\001 \002(\t\022,\n\t"
  "signature\030\002 \001(\0132\031.gameController.Signatu"
  "re\"~\n\023AutoRefToController\022,\n\tsignature\030\001"
  " \001(\0132\031.gameController.Signature\022-\n\ngame_"
  "event\030\002 \001(\0132\031.gameController.GameEventJ\004"
  "\010\003\020\004J\004\010\004\020\005\"Y\n\023ControllerToAutoRef\022;\n\020con"
  "troller_reply\030\001 \001(\0132\037.gameController.Con"
  "trollerReplyH\000B\005\n\003msg"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgame_5fevent_5f2019_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_sccs[3] = {
  &scc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base,
  &scc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base,
  &scc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, "ssl_game_controller_auto_ref.proto", 421,
  &descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_once, descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_sccs, descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::offsets,
  file_level_metadata_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, 3, file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, file_level_service_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto)), true);
namespace gameController {

// ===================================================================

void AutoRefRegistration::InitAsDefaultInstance() {
  ::gameController::_AutoRefRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::gameController::Signature*>(
      ::gameController::Signature::internal_default_instance());
}
class AutoRefRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefRegistration>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gameController::Signature& signature(const AutoRefRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::gameController::Signature&
AutoRefRegistration::_Internal::signature(const AutoRefRegistration* msg) {
  return *msg->signature_;
}
void AutoRefRegistration::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AutoRefRegistration::AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.AutoRefRegistration)
}
AutoRefRegistration::AutoRefRegistration(const AutoRefRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::gameController::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gameController.AutoRefRegistration)
}

void AutoRefRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_ = nullptr;
}

AutoRefRegistration::~AutoRefRegistration() {
  // @@protoc_insertion_point(destructor:gameController.AutoRefRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void AutoRefRegistration::ArenaDtor(void* object) {
  AutoRefRegistration* _this = reinterpret_cast< AutoRefRegistration* >(object);
  (void)_this;
}
void AutoRefRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoRefRegistration& AutoRefRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoRefRegistration_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  return *internal_default_instance();
}


void AutoRefRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.AutoRefRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gameController.AutoRefRegistration.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gameController.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.AutoRefRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gameController.AutoRefRegistration.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional .gameController.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.AutoRefRegistration)
  return target;
}

size_t AutoRefRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.AutoRefRegistration)
  size_t total_size = 0;

  // required string identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gameController.Signature signature = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.AutoRefRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.AutoRefRegistration)
    MergeFrom(*source);
  }
}

void AutoRefRegistration::MergeFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::gameController::Signature::MergeFrom(from._internal_signature());
    }
  }
}

void AutoRefRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefRegistration::CopyFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefRegistration::InternalSwap(AutoRefRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoRefToController::InitAsDefaultInstance() {
  ::gameController::_AutoRefToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::gameController::Signature*>(
      ::gameController::Signature::internal_default_instance());
  ::gameController::_AutoRefToController_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::gameController::GameEvent*>(
      ::gameController::GameEvent::internal_default_instance());
}
class AutoRefToController::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefToController>()._has_bits_);
  static const ::gameController::Signature& signature(const AutoRefToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gameController::GameEvent& game_event(const AutoRefToController* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gameController::Signature&
AutoRefToController::_Internal::signature(const AutoRefToController* msg) {
  return *msg->signature_;
}
const ::gameController::GameEvent&
AutoRefToController::_Internal::game_event(const AutoRefToController* msg) {
  return *msg->game_event_;
}
void AutoRefToController::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AutoRefToController::clear_game_event() {
  if (game_event_ != nullptr) game_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AutoRefToController::AutoRefToController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.AutoRefToController)
}
AutoRefToController::AutoRefToController(const AutoRefToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    signature_ = new ::gameController::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_game_event()) {
    game_event_ = new ::gameController::GameEvent(*from.game_event_);
  } else {
    game_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gameController.AutoRefToController)
}

void AutoRefToController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_event_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(game_event_));
}

AutoRefToController::~AutoRefToController() {
  // @@protoc_insertion_point(destructor:gameController.AutoRefToController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefToController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete game_event_;
}

void AutoRefToController::ArenaDtor(void* object) {
  AutoRefToController* _this = reinterpret_cast< AutoRefToController* >(object);
  (void)_this;
}
void AutoRefToController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoRefToController& AutoRefToController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoRefToController_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  return *internal_default_instance();
}


void AutoRefToController::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.AutoRefToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != nullptr);
      game_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefToController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gameController.Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gameController.GameEvent game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefToController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.AutoRefToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gameController.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signature(this), target, stream);
  }

  // optional .gameController.GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.AutoRefToController)
  return target;
}

size_t AutoRefToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.AutoRefToController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gameController.Signature signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .gameController.GameEvent game_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefToController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefToController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefToController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.AutoRefToController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.AutoRefToController)
    MergeFrom(*source);
  }
}

void AutoRefToController::MergeFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_signature()->::gameController::Signature::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_event()->::gameController::GameEvent::MergeFrom(from._internal_game_event());
    }
  }
}

void AutoRefToController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefToController::CopyFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_game_event()) {
    if (!game_event_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefToController::InternalSwap(AutoRefToController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoRefToController, game_event_)
      + sizeof(AutoRefToController::game_event_)
      - PROTOBUF_FIELD_OFFSET(AutoRefToController, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefToController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControllerToAutoRef::InitAsDefaultInstance() {
  ::gameController::_ControllerToAutoRef_default_instance_.controller_reply_ = const_cast< ::gameController::ControllerReply*>(
      ::gameController::ControllerReply::internal_default_instance());
}
class ControllerToAutoRef::_Internal {
 public:
  static const ::gameController::ControllerReply& controller_reply(const ControllerToAutoRef* msg);
};

const ::gameController::ControllerReply&
ControllerToAutoRef::_Internal::controller_reply(const ControllerToAutoRef* msg) {
  return *msg->msg_.controller_reply_;
}
void ControllerToAutoRef::set_allocated_controller_reply(::gameController::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply)->GetArena();
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:gameController.ControllerToAutoRef.controller_reply)
}
void ControllerToAutoRef::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArena() == nullptr) {
      delete msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
ControllerToAutoRef::ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gameController.ControllerToAutoRef)
}
ControllerToAutoRef::ControllerToAutoRef(const ControllerToAutoRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::gameController::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gameController.ControllerToAutoRef)
}

void ControllerToAutoRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  clear_has_msg();
}

ControllerToAutoRef::~ControllerToAutoRef() {
  // @@protoc_insertion_point(destructor:gameController.ControllerToAutoRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerToAutoRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToAutoRef::ArenaDtor(void* object) {
  ControllerToAutoRef* _this = reinterpret_cast< ControllerToAutoRef* >(object);
  (void)_this;
}
void ControllerToAutoRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerToAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerToAutoRef& ControllerToAutoRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerToAutoRef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.base);
  return *internal_default_instance();
}


void ControllerToAutoRef::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:gameController.ControllerToAutoRef)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArena() == nullptr) {
        delete msg_.controller_reply_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:gameController.ControllerToAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToAutoRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gameController.ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerToAutoRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameController.ControllerToAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gameController.ControllerReply controller_reply = 1;
  if (_internal_has_controller_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameController.ControllerToAutoRef)
  return target;
}

size_t ControllerToAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameController.ControllerToAutoRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .gameController.ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToAutoRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameController.ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToAutoRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerToAutoRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameController.ControllerToAutoRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameController.ControllerToAutoRef)
    MergeFrom(*source);
  }
}

void ControllerToAutoRef::MergeFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameController.ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::gameController::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToAutoRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameController.ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToAutoRef::CopyFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameController.ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToAutoRef::IsInitialized() const {
  return true;
}

void ControllerToAutoRef::InternalSwap(ControllerToAutoRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToAutoRef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gameController
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameController::AutoRefRegistration* Arena::CreateMaybeMessage< ::gameController::AutoRefRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::AutoRefRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::gameController::AutoRefToController* Arena::CreateMaybeMessage< ::gameController::AutoRefToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::AutoRefToController >(arena);
}
template<> PROTOBUF_NOINLINE ::gameController::ControllerToAutoRef* Arena::CreateMaybeMessage< ::gameController::ControllerToAutoRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameController::ControllerToAutoRef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
