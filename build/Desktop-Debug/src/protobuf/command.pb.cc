// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_GeometryCameraCalibration_ssl_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandAmun_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandControl_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandDebuggerInput_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandDebuggerInputDisable_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandDebuggerInputLine_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandPlayback_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandRecord_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandReferee_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandReplay_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CommandSimulator_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommandStrategy_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyChangeOption_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyClose_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyLoad_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyTriggerDebugger_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommandTracking_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommandTransceiver_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flag_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostAddress_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PauseSimulatorCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotMoveCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorNetworking_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorSetup_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorWorstCaseVision_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransceiverConfiguration_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualFieldTransform_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRequest_logfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadioCommand_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Team_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallModel_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Geometry_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorState_world_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingAOI_world_2eproto;
namespace amun {
class RobotMoveCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMoveCommand> _instance;
} _RobotMoveCommand_default_instance_;
class SimulatorSetupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorSetup> _instance;
} _SimulatorSetup_default_instance_;
class SimulatorWorstCaseVisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorWorstCaseVision> _instance;
} _SimulatorWorstCaseVision_default_instance_;
class CommandSimulatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandSimulator> _instance;
} _CommandSimulator_default_instance_;
class CommandRefereeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandReferee> _instance;
} _CommandReferee_default_instance_;
class CommandStrategyAutomaticEntrypoints_EntrypointForStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyAutomaticEntrypoints_EntrypointForStage> _instance;
} _CommandStrategyAutomaticEntrypoints_EntrypointForStage_default_instance_;
class CommandStrategyAutomaticEntrypointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyAutomaticEntrypoints> _instance;
} _CommandStrategyAutomaticEntrypoints_default_instance_;
class CommandStrategyLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyLoad> _instance;
} _CommandStrategyLoad_default_instance_;
class CommandStrategyCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyClose> _instance;
} _CommandStrategyClose_default_instance_;
class CommandStrategyTriggerDebuggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyTriggerDebugger> _instance;
} _CommandStrategyTriggerDebugger_default_instance_;
class CommandStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategy> _instance;
} _CommandStrategy_default_instance_;
class CommandControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandControl> _instance;
} _CommandControl_default_instance_;
class TransceiverConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransceiverConfiguration> _instance;
} _TransceiverConfiguration_default_instance_;
class HostAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostAddress> _instance;
} _HostAddress_default_instance_;
class SimulatorNetworkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorNetworking> _instance;
} _SimulatorNetworking_default_instance_;
class CommandTransceiverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandTransceiver> _instance;
} _CommandTransceiver_default_instance_;
class VirtualFieldTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualFieldTransform> _instance;
} _VirtualFieldTransform_default_instance_;
class CommandTrackingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandTracking> _instance;
} _CommandTracking_default_instance_;
class CommandStrategyChangeOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandStrategyChangeOption> _instance;
} _CommandStrategyChangeOption_default_instance_;
class CommandAmunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandAmun> _instance;
} _CommandAmun_default_instance_;
class CommandDebuggerInputDisableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandDebuggerInputDisable> _instance;
} _CommandDebuggerInputDisable_default_instance_;
class CommandDebuggerInputLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandDebuggerInputLine> _instance;
} _CommandDebuggerInputLine_default_instance_;
class CommandDebuggerInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandDebuggerInput> _instance;
} _CommandDebuggerInput_default_instance_;
class PauseSimulatorCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseSimulatorCommand> _instance;
} _PauseSimulatorCommand_default_instance_;
class CommandReplayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandReplay> _instance;
} _CommandReplay_default_instance_;
class FlagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Flag> _instance;
} _Flag_default_instance_;
class CommandPlaybackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandPlayback> _instance;
} _CommandPlayback_default_instance_;
class CommandRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandRecord> _instance;
} _CommandRecord_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
}  // namespace amun
static void InitDefaultsscc_info_Command_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_Command_default_instance_;
    new (ptr) ::amun::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_Command_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_Command_command_2eproto}, {
      &scc_info_CommandSimulator_command_2eproto.base,
      &scc_info_CommandReferee_command_2eproto.base,
      &scc_info_Team_robot_2eproto.base,
      &scc_info_CommandStrategy_command_2eproto.base,
      &scc_info_CommandControl_command_2eproto.base,
      &scc_info_CommandTransceiver_command_2eproto.base,
      &scc_info_CommandTracking_command_2eproto.base,
      &scc_info_CommandAmun_command_2eproto.base,
      &scc_info_HostAddress_command_2eproto.base,
      &scc_info_RobotMoveCommand_command_2eproto.base,
      &scc_info_CommandDebuggerInput_command_2eproto.base,
      &scc_info_PauseSimulatorCommand_command_2eproto.base,
      &scc_info_CommandReplay_command_2eproto.base,
      &scc_info_CommandPlayback_command_2eproto.base,
      &scc_info_CommandRecord_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandAmun_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandAmun_default_instance_;
    new (ptr) ::amun::CommandAmun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandAmun::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandAmun_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandAmun_command_2eproto}, {
      &scc_info_CommandStrategyChangeOption_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandControl_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandControl_default_instance_;
    new (ptr) ::amun::CommandControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandControl_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandControl_command_2eproto}, {
      &scc_info_RadioCommand_robot_2eproto.base,}};

static void InitDefaultsscc_info_CommandDebuggerInput_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandDebuggerInput_default_instance_;
    new (ptr) ::amun::CommandDebuggerInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandDebuggerInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandDebuggerInput_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommandDebuggerInput_command_2eproto}, {
      &scc_info_CommandDebuggerInputDisable_command_2eproto.base,
      &scc_info_CommandDebuggerInputLine_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandDebuggerInputDisable_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandDebuggerInputDisable_default_instance_;
    new (ptr) ::amun::CommandDebuggerInputDisable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandDebuggerInputDisable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandDebuggerInputDisable_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandDebuggerInputDisable_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandDebuggerInputLine_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandDebuggerInputLine_default_instance_;
    new (ptr) ::amun::CommandDebuggerInputLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandDebuggerInputLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandDebuggerInputLine_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandDebuggerInputLine_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandPlayback_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandPlayback_default_instance_;
    new (ptr) ::amun::CommandPlayback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandPlayback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandPlayback_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommandPlayback_command_2eproto}, {
      &scc_info_Flag_command_2eproto.base,
      &scc_info_LogRequest_logfile_2eproto.base,}};

static void InitDefaultsscc_info_CommandRecord_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandRecord_default_instance_;
    new (ptr) ::amun::CommandRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandRecord_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandRecord_command_2eproto}, {
      &scc_info_Flag_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandReferee_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandReferee_default_instance_;
    new (ptr) ::amun::CommandReferee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandReferee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandReferee_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandReferee_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandReplay_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandReplay_default_instance_;
    new (ptr) ::amun::CommandReplay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandReplay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandReplay_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandReplay_command_2eproto}, {
      &scc_info_CommandStrategy_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandSimulator_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandSimulator_default_instance_;
    new (ptr) ::amun::CommandSimulator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandSimulator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CommandSimulator_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CommandSimulator_command_2eproto}, {
      &scc_info_SimulatorSetup_command_2eproto.base,
      &scc_info_SimulatorWorstCaseVision_command_2eproto.base,
      &scc_info_RealismConfigErForce_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto.base,
      &scc_info_SimulatorState_world_2eproto.base,
      &scc_info_SimulatorControl_ssl_5fsimulation_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_CommandStrategy_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategy_default_instance_;
    new (ptr) ::amun::CommandStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommandStrategy_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommandStrategy_command_2eproto}, {
      &scc_info_CommandStrategyLoad_command_2eproto.base,
      &scc_info_CommandStrategyClose_command_2eproto.base,
      &scc_info_CommandStrategyTriggerDebugger_command_2eproto.base,
      &scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandStrategyAutomaticEntrypoints_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyAutomaticEntrypoints_default_instance_;
    new (ptr) ::amun::CommandStrategyAutomaticEntrypoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyAutomaticEntrypoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandStrategyAutomaticEntrypoints_command_2eproto}, {
      &scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto.base,}};

static void InitDefaultsscc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyAutomaticEntrypoints_EntrypointForStage_default_instance_;
    new (ptr) ::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandStrategyChangeOption_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyChangeOption_default_instance_;
    new (ptr) ::amun::CommandStrategyChangeOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyChangeOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyChangeOption_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandStrategyChangeOption_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandStrategyClose_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyClose_default_instance_;
    new (ptr) ::amun::CommandStrategyClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyClose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyClose_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandStrategyClose_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandStrategyLoad_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyLoad_default_instance_;
    new (ptr) ::amun::CommandStrategyLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyLoad_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandStrategyLoad_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandStrategyTriggerDebugger_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandStrategyTriggerDebugger_default_instance_;
    new (ptr) ::amun::CommandStrategyTriggerDebugger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandStrategyTriggerDebugger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandStrategyTriggerDebugger_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandStrategyTriggerDebugger_command_2eproto}, {}};

static void InitDefaultsscc_info_CommandTracking_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandTracking_default_instance_;
    new (ptr) ::amun::CommandTracking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandTracking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommandTracking_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommandTracking_command_2eproto}, {
      &scc_info_TrackingAOI_world_2eproto.base,
      &scc_info_VirtualFieldTransform_command_2eproto.base,
      &scc_info_Geometry_world_2eproto.base,
      &scc_info_BallModel_world_2eproto.base,}};

static void InitDefaultsscc_info_CommandTransceiver_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_CommandTransceiver_default_instance_;
    new (ptr) ::amun::CommandTransceiver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::CommandTransceiver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommandTransceiver_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommandTransceiver_command_2eproto}, {
      &scc_info_TransceiverConfiguration_command_2eproto.base,
      &scc_info_HostAddress_command_2eproto.base,
      &scc_info_SimulatorNetworking_command_2eproto.base,}};

static void InitDefaultsscc_info_Flag_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_Flag_default_instance_;
    new (ptr) ::amun::Flag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::Flag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flag_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Flag_command_2eproto}, {}};

static void InitDefaultsscc_info_HostAddress_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_HostAddress_default_instance_;
    new (ptr) ::amun::HostAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::HostAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostAddress_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostAddress_command_2eproto}, {}};

static void InitDefaultsscc_info_PauseSimulatorCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_PauseSimulatorCommand_default_instance_;
    new (ptr) ::amun::PauseSimulatorCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::PauseSimulatorCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PauseSimulatorCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PauseSimulatorCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_RobotMoveCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_RobotMoveCommand_default_instance_;
    new (ptr) ::amun::RobotMoveCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::RobotMoveCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotMoveCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotMoveCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_SimulatorNetworking_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_SimulatorNetworking_default_instance_;
    new (ptr) ::amun::SimulatorNetworking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::SimulatorNetworking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorNetworking_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulatorNetworking_command_2eproto}, {}};

static void InitDefaultsscc_info_SimulatorSetup_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_SimulatorSetup_default_instance_;
    new (ptr) ::amun::SimulatorSetup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::SimulatorSetup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulatorSetup_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulatorSetup_command_2eproto}, {
      &scc_info_Geometry_world_2eproto.base,
      &scc_info_SSL_GeometryCameraCalibration_ssl_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SimulatorWorstCaseVision_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_SimulatorWorstCaseVision_default_instance_;
    new (ptr) ::amun::SimulatorWorstCaseVision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::SimulatorWorstCaseVision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorWorstCaseVision_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulatorWorstCaseVision_command_2eproto}, {}};

static void InitDefaultsscc_info_TransceiverConfiguration_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_TransceiverConfiguration_default_instance_;
    new (ptr) ::amun::TransceiverConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::TransceiverConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransceiverConfiguration_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransceiverConfiguration_command_2eproto}, {}};

static void InitDefaultsscc_info_VirtualFieldTransform_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amun::_VirtualFieldTransform_default_instance_;
    new (ptr) ::amun::VirtualFieldTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amun::VirtualFieldTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualFieldTransform_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualFieldTransform_command_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_command_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_command_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_command_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::amun::RobotMoveCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::RobotMoveCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::RobotMoveCommand, id_),
  PROTOBUF_FIELD_OFFSET(::amun::RobotMoveCommand, p_x_),
  PROTOBUF_FIELD_OFFSET(::amun::RobotMoveCommand, p_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorSetup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorSetup, geometry_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorSetup, camera_setup_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorWorstCaseVision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorWorstCaseVision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorWorstCaseVision, min_robot_detection_time_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorWorstCaseVision, min_ball_detection_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, enable_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, simulator_setup_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, vision_worst_case_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, realism_config_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, set_simulator_state_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandSimulator, ssl_control_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, active_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, command_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, use_internal_autoref_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReferee, use_automatic_robot_exchange_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage, stage_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage, entry_point_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyAutomaticEntrypoints, mapping_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyLoad, filename_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyLoad, entry_point_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyTriggerDebugger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, load_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, close_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, reload_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, auto_reload_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, enable_debug_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, debug_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, performance_mode_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, start_profiling_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, finish_and_save_profile_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, tournament_mode_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategy, automatic_entrypoints_),
  1,
  2,
  5,
  6,
  7,
  3,
  8,
  9,
  0,
  10,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::CommandControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandControl, commands_),
  PROTOBUF_FIELD_OFFSET(::amun::TransceiverConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::TransceiverConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::TransceiverConfiguration, channel_),
  0,
  PROTOBUF_FIELD_OFFSET(::amun::HostAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::HostAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::HostAddress, host_),
  PROTOBUF_FIELD_OFFSET(::amun::HostAddress, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, control_simulator_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, control_blue_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, control_yellow_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, port_blue_),
  PROTOBUF_FIELD_OFFSET(::amun::SimulatorNetworking, port_yellow_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, enable_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, charge_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, configuration_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, network_configuration_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, use_network_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTransceiver, simulator_configuration_),
  3,
  4,
  0,
  1,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, a11_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, a12_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, a21_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, a22_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, offsetx_),
  PROTOBUF_FIELD_OFFSET(::amun::VirtualFieldTransform, offsety_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, aoi_enabled_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, aoi_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, system_delay_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, reset_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, enable_virtual_field_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, field_transform_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, virtual_geometry_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, tracking_replay_enabled_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandTracking, ball_model_),
  5,
  0,
  4,
  6,
  7,
  1,
  2,
  8,
  3,
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyChangeOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyChangeOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyChangeOption, name_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandStrategyChangeOption, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, vision_port_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, referee_port_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, tracker_port_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandAmun, change_option_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInputDisable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInputLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInputLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInputLine, line_),
  0,
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInput, strategy_type_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInput, disable_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandDebuggerInput, queue_line_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::amun::PauseSimulatorCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::PauseSimulatorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::PauseSimulatorCommand, reason_),
  PROTOBUF_FIELD_OFFSET(::amun::PauseSimulatorCommand, pause_),
  PROTOBUF_FIELD_OFFSET(::amun::PauseSimulatorCommand, toggle_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, enable_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, enable_blue_strategy_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, blue_strategy_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, enable_yellow_strategy_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandReplay, yellow_strategy_),
  2,
  3,
  0,
  4,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amun::Flag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, seek_time_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, seek_packet_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, seek_time_backwards_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, playback_speed_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, toggle_paused_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, run_playback_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, log_path_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, instant_replay_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, export_vision_log_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, get_uid_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, find_logfile_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandPlayback, playback_limit_),
  6,
  7,
  8,
  9,
  2,
  10,
  3,
  4,
  0,
  5,
  1,
  11,
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, use_logfile_location_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, save_backlog_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, run_logging_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, for_replay_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, request_backlog_),
  PROTOBUF_FIELD_OFFSET(::amun::CommandRecord, overwrite_record_filename_),
  2,
  1,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::amun::Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amun::Command, simulator_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, referee_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, set_team_blue_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, set_team_yellow_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, strategy_blue_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, strategy_yellow_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, strategy_autoref_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, control_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, transceiver_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, tracking_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, amun_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, mixed_team_destination_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, robot_move_blue_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, robot_move_yellow_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, debugger_input_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, pause_simulator_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, replay_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, playback_),
  PROTOBUF_FIELD_OFFSET(::amun::Command, record_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  12,
  13,
  14,
  15,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::amun::RobotMoveCommand)},
  { 11, 18, sizeof(::amun::SimulatorSetup)},
  { 20, 27, sizeof(::amun::SimulatorWorstCaseVision)},
  { 29, 40, sizeof(::amun::CommandSimulator)},
  { 46, 55, sizeof(::amun::CommandReferee)},
  { 59, 66, sizeof(::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage)},
  { 68, -1, sizeof(::amun::CommandStrategyAutomaticEntrypoints)},
  { 74, 81, sizeof(::amun::CommandStrategyLoad)},
  { 83, -1, sizeof(::amun::CommandStrategyClose)},
  { 88, -1, sizeof(::amun::CommandStrategyTriggerDebugger)},
  { 93, 109, sizeof(::amun::CommandStrategy)},
  { 120, -1, sizeof(::amun::CommandControl)},
  { 126, 132, sizeof(::amun::TransceiverConfiguration)},
  { 133, 140, sizeof(::amun::HostAddress)},
  { 142, 152, sizeof(::amun::SimulatorNetworking)},
  { 157, 168, sizeof(::amun::CommandTransceiver)},
  { 174, 185, sizeof(::amun::VirtualFieldTransform)},
  { 191, 205, sizeof(::amun::CommandTracking)},
  { 214, 221, sizeof(::amun::CommandStrategyChangeOption)},
  { 223, 232, sizeof(::amun::CommandAmun)},
  { 236, -1, sizeof(::amun::CommandDebuggerInputDisable)},
  { 241, 247, sizeof(::amun::CommandDebuggerInputLine)},
  { 248, 256, sizeof(::amun::CommandDebuggerInput)},
  { 259, 267, sizeof(::amun::PauseSimulatorCommand)},
  { 270, 280, sizeof(::amun::CommandReplay)},
  { 285, -1, sizeof(::amun::Flag)},
  { 290, 307, sizeof(::amun::CommandPlayback)},
  { 319, 330, sizeof(::amun::CommandRecord)},
  { 336, 360, sizeof(::amun::Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_RobotMoveCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_SimulatorSetup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_SimulatorWorstCaseVision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandSimulator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandReferee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyAutomaticEntrypoints_EntrypointForStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyAutomaticEntrypoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyTriggerDebugger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_TransceiverConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_HostAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_SimulatorNetworking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandTransceiver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_VirtualFieldTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandTracking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandStrategyChangeOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandAmun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandDebuggerInputDisable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandDebuggerInputLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandDebuggerInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_PauseSimulatorCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandReplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_Flag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandPlayback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_CommandRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amun::_Command_default_instance_),
};

const char descriptor_table_protodef_command_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcommand.proto\022\004amun\032\013world.proto\032\013robo"
  "t.proto\032\rlogfile.proto\032\022ssl_geometry.pro"
  "to\032\034ssl_simulation_control.proto\032+ssl_si"
  "mulation_custom_erforce_realism.proto\032\021s"
  "sl_referee.proto\"8\n\020RobotMoveCommand\022\n\n\002"
  "id\030\001 \002(\r\022\013\n\003p_x\030\002 \001(\002\022\013\n\003p_y\030\003 \001(\002\"i\n\016Si"
  "mulatorSetup\022!\n\010geometry\030\001 \002(\0132\017.world.G"
  "eometry\0224\n\014camera_setup\030\002 \003(\0132\036.SSL_Geom"
  "etryCameraCalibration\"]\n\030SimulatorWorstC"
  "aseVision\022 \n\030min_robot_detection_time\030\001 "
  "\001(\002\022\037\n\027min_ball_detection_time\030\002 \001(\002\"\236\002\n"
  "\020CommandSimulator\022\016\n\006enable\030\001 \001(\010\022-\n\017sim"
  "ulator_setup\030\002 \001(\0132\024.amun.SimulatorSetup"
  "\0229\n\021vision_worst_case\030\003 \001(\0132\036.amun.Simul"
  "atorWorstCaseVision\022-\n\016realism_config\030\004 "
  "\001(\0132\025.RealismConfigErForce\0222\n\023set_simula"
  "tor_state\030\005 \001(\0132\025.world.SimulatorState\022-"
  "\n\013ssl_control\030\006 \001(\0132\030.sslsim.SimulatorCo"
  "ntrol\"u\n\016CommandReferee\022\016\n\006active\030\001 \001(\010\022"
  "\017\n\007command\030\002 \001(\014\022\034\n\024use_internal_autoref"
  "\030\003 \001(\010\022$\n\034use_automatic_robot_exchange\030\004"
  " \001(\010\"\302\001\n#CommandStrategyAutomaticEntrypo"
  "ints\022M\n\007mapping\030\001 \003(\0132<.amun.CommandStra"
  "tegyAutomaticEntrypoints.EntrypointForSt"
  "age\032L\n\022EntrypointForStage\022!\n\005stage\030\001 \002(\016"
  "2\022.SSL_Referee.Stage\022\023\n\013entry_point\030\002 \002("
  "\t\"<\n\023CommandStrategyLoad\022\020\n\010filename\030\001 \002"
  "(\t\022\023\n\013entry_point\030\002 \001(\t\"\026\n\024CommandStrate"
  "gyClose\" \n\036CommandStrategyTriggerDebugge"
  "r\"\214\003\n\017CommandStrategy\022\'\n\004load\030\001 \001(\0132\031.am"
  "un.CommandStrategyLoad\022)\n\005close\030\002 \001(\0132\032."
  "amun.CommandStrategyClose\022\016\n\006reload\030\003 \001("
  "\010\022\023\n\013auto_reload\030\004 \001(\010\022\024\n\014enable_debug\030\005"
  " \001(\010\0223\n\005debug\030\006 \001(\0132$.amun.CommandStrate"
  "gyTriggerDebugger\022\030\n\020performance_mode\030\007 "
  "\001(\010\022\027\n\017start_profiling\030\010 \001(\010\022\037\n\027finish_a"
  "nd_save_profile\030\t \001(\t\022\027\n\017tournament_mode"
  "\030\n \001(\010\022H\n\025automatic_entrypoints\030\013 \001(\0132)."
  "amun.CommandStrategyAutomaticEntrypoints"
  "\"7\n\016CommandControl\022%\n\010commands\030\001 \003(\0132\023.r"
  "obot.RadioCommand\"+\n\030TransceiverConfigur"
  "ation\022\017\n\007channel\030\001 \002(\r\")\n\013HostAddress\022\014\n"
  "\004host\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\"\206\001\n\023SimulatorN"
  "etworking\022\031\n\021control_simulator\030\001 \002(\010\022\024\n\014"
  "control_blue\030\002 \002(\010\022\026\n\016control_yellow\030\003 \002"
  "(\010\022\021\n\tport_blue\030\004 \002(\r\022\023\n\013port_yellow\030\005 \002"
  "(\r\"\356\001\n\022CommandTransceiver\022\016\n\006enable\030\001 \001("
  "\010\022\016\n\006charge\030\002 \001(\010\0225\n\rconfiguration\030\003 \001(\013"
  "2\036.amun.TransceiverConfiguration\0220\n\025netw"
  "ork_configuration\030\004 \001(\0132\021.amun.HostAddre"
  "ss\022\023\n\013use_network\030\005 \001(\010\022:\n\027simulator_con"
  "figuration\030\006 \001(\0132\031.amun.SimulatorNetwork"
  "ing\"m\n\025VirtualFieldTransform\022\013\n\003a11\030\001 \002("
  "\002\022\013\n\003a12\030\002 \002(\002\022\013\n\003a21\030\003 \002(\002\022\013\n\003a22\030\004 \002(\002"
  "\022\017\n\007offsetX\030\005 \002(\002\022\017\n\007offsetY\030\006 \002(\002\"\262\002\n\017C"
  "ommandTracking\022\023\n\013aoi_enabled\030\001 \001(\010\022\037\n\003a"
  "oi\030\002 \001(\0132\022.world.TrackingAOI\022\024\n\014system_d"
  "elay\030\003 \001(\003\022\r\n\005reset\030\004 \001(\010\022\034\n\024enable_virt"
  "ual_field\030\005 \001(\010\0224\n\017field_transform\030\006 \001(\013"
  "2\033.amun.VirtualFieldTransform\022)\n\020virtual"
  "_geometry\030\007 \001(\0132\017.world.Geometry\022\037\n\027trac"
  "king_replay_enabled\030\010 \001(\010\022$\n\nball_model\030"
  "\t \001(\0132\020.world.BallModel\":\n\033CommandStrate"
  "gyChangeOption\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 "
  "\002(\010\"\210\001\n\013CommandAmun\022\023\n\013vision_port\030\001 \001(\r"
  "\022\024\n\014referee_port\030\002 \001(\r\022\024\n\014tracker_port\030\004"
  " \001(\r\0228\n\rchange_option\030\003 \001(\0132!.amun.Comma"
  "ndStrategyChangeOption\"\035\n\033CommandDebugge"
  "rInputDisable\"(\n\030CommandDebuggerInputLin"
  "e\022\014\n\004line\030\001 \001(\t\"\260\001\n\024CommandDebuggerInput"
  "\0220\n\rstrategy_type\030\001 \002(\0162\031.amun.DebuggerI"
  "nputTarget\0222\n\007disable\030\002 \001(\0132!.amun.Comma"
  "ndDebuggerInputDisable\0222\n\nqueue_line\030\003 \001"
  "(\0132\036.amun.CommandDebuggerInputLine\"b\n\025Pa"
  "useSimulatorCommand\022*\n\006reason\030\001 \002(\0162\032.am"
  "un.PauseSimulatorReason\022\r\n\005pause\030\002 \001(\010\022\016"
  "\n\006toggle\030\003 \001(\010\"\273\001\n\rCommandReplay\022\016\n\006enab"
  "le\030\001 \001(\010\022\034\n\024enable_blue_strategy\030\002 \001(\010\022,"
  "\n\rblue_strategy\030\003 \001(\0132\025.amun.CommandStra"
  "tegy\022\036\n\026enable_yellow_strategy\030\004 \001(\010\022.\n\017"
  "yellow_strategy\030\005 \001(\0132\025.amun.CommandStra"
  "tegy\"\006\n\004Flag\"\330\002\n\017CommandPlayback\022\021\n\tseek"
  "_time\030\001 \001(\005\022\023\n\013seek_packet\030\002 \001(\005\022\033\n\023seek"
  "_time_backwards\030\003 \001(\005\022\026\n\016playback_speed\030"
  "\004 \001(\005\022!\n\rtoggle_paused\030\005 \001(\0132\n.amun.Flag"
  "\022\024\n\014run_playback\030\006 \001(\010\022%\n\010log_path\030\007 \001(\013"
  "2\023.logfile.LogRequest\022\"\n\016instant_replay\030"
  "\010 \001(\0132\n.amun.Flag\022\031\n\021export_vision_log\030\t"
  " \001(\t\022\033\n\007get_uid\030\n \001(\0132\n.amun.Flag\022\024\n\014fin"
  "d_logfile\030\013 \001(\t\022\026\n\016playback_limit\030\014 \001(\005\""
  "\264\001\n\rCommandRecord\022\034\n\024use_logfile_locatio"
  "n\030\001 \001(\010\022 \n\014save_backlog\030\002 \001(\0132\n.amun.Fla"
  "g\022\023\n\013run_logging\030\003 \001(\010\022\022\n\nfor_replay\030\004 \001"
  "(\010\022\027\n\017request_backlog\030\005 \001(\005\022!\n\031overwrite"
  "_record_filename\030\006 \001(\t\"\310\006\n\007Command\022)\n\tsi"
  "mulator\030\001 \001(\0132\026.amun.CommandSimulator\022%\n"
  "\007referee\030\002 \001(\0132\024.amun.CommandReferee\022\"\n\r"
  "set_team_blue\030\003 \001(\0132\013.robot.Team\022$\n\017set_"
  "team_yellow\030\004 \001(\0132\013.robot.Team\022,\n\rstrate"
  "gy_blue\030\005 \001(\0132\025.amun.CommandStrategy\022.\n\017"
  "strategy_yellow\030\006 \001(\0132\025.amun.CommandStra"
  "tegy\022/\n\020strategy_autoref\030\007 \001(\0132\025.amun.Co"
  "mmandStrategy\022%\n\007control\030\010 \001(\0132\024.amun.Co"
  "mmandControl\022-\n\013transceiver\030\t \001(\0132\030.amun"
  ".CommandTransceiver\022\'\n\010tracking\030\013 \001(\0132\025."
  "amun.CommandTracking\022\037\n\004amun\030\014 \001(\0132\021.amu"
  "n.CommandAmun\0221\n\026mixed_team_destination\030"
  "\r \001(\0132\021.amun.HostAddress\022/\n\017robot_move_b"
  "lue\030\016 \003(\0132\026.amun.RobotMoveCommand\0221\n\021rob"
  "ot_move_yellow\030\017 \003(\0132\026.amun.RobotMoveCom"
  "mand\0222\n\016debugger_input\030\020 \001(\0132\032.amun.Comm"
  "andDebuggerInput\0224\n\017pause_simulator\030\021 \001("
  "\0132\033.amun.PauseSimulatorCommand\022#\n\006replay"
  "\030\022 \001(\0132\023.amun.CommandReplay\022\'\n\010playback\030"
  "\023 \001(\0132\025.amun.CommandPlayback\022#\n\006record\030\024"
  " \001(\0132\023.amun.CommandRecord*Q\n\023DebuggerInp"
  "utTarget\022\025\n\021DITStrategyYellow\020\000\022\023\n\017DITSt"
  "rategyBlue\020\001\022\016\n\nDITAutoref\020\002*\225\001\n\024PauseSi"
  "mulatorReason\022\006\n\002Ui\020\001\022\017\n\013WindowFocus\020\002\022\025"
  "\n\021DebugBlueStrategy\020\003\022\027\n\023DebugYellowStra"
  "tegy\020\004\022\020\n\014DebugAutoref\020\005\022\n\n\006Replay\020\006\022\t\n\005"
  "Horus\020\007\022\013\n\007Logging\020\010B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_command_2eproto_deps[7] = {
  &::descriptor_table_logfile_2eproto,
  &::descriptor_table_robot_2eproto,
  &::descriptor_table_ssl_5fgeometry_2eproto,
  &::descriptor_table_ssl_5freferee_2eproto,
  &::descriptor_table_ssl_5fsimulation_5fcontrol_2eproto,
  &::descriptor_table_ssl_5fsimulation_5fcustom_5ferforce_5frealism_2eproto,
  &::descriptor_table_world_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_command_2eproto_sccs[29] = {
  &scc_info_Command_command_2eproto.base,
  &scc_info_CommandAmun_command_2eproto.base,
  &scc_info_CommandControl_command_2eproto.base,
  &scc_info_CommandDebuggerInput_command_2eproto.base,
  &scc_info_CommandDebuggerInputDisable_command_2eproto.base,
  &scc_info_CommandDebuggerInputLine_command_2eproto.base,
  &scc_info_CommandPlayback_command_2eproto.base,
  &scc_info_CommandRecord_command_2eproto.base,
  &scc_info_CommandReferee_command_2eproto.base,
  &scc_info_CommandReplay_command_2eproto.base,
  &scc_info_CommandSimulator_command_2eproto.base,
  &scc_info_CommandStrategy_command_2eproto.base,
  &scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto.base,
  &scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto.base,
  &scc_info_CommandStrategyChangeOption_command_2eproto.base,
  &scc_info_CommandStrategyClose_command_2eproto.base,
  &scc_info_CommandStrategyLoad_command_2eproto.base,
  &scc_info_CommandStrategyTriggerDebugger_command_2eproto.base,
  &scc_info_CommandTracking_command_2eproto.base,
  &scc_info_CommandTransceiver_command_2eproto.base,
  &scc_info_Flag_command_2eproto.base,
  &scc_info_HostAddress_command_2eproto.base,
  &scc_info_PauseSimulatorCommand_command_2eproto.base,
  &scc_info_RobotMoveCommand_command_2eproto.base,
  &scc_info_SimulatorNetworking_command_2eproto.base,
  &scc_info_SimulatorSetup_command_2eproto.base,
  &scc_info_SimulatorWorstCaseVision_command_2eproto.base,
  &scc_info_TransceiverConfiguration_command_2eproto.base,
  &scc_info_VirtualFieldTransform_command_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_command_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto = {
  false, false, descriptor_table_protodef_command_2eproto, "command.proto", 4865,
  &descriptor_table_command_2eproto_once, descriptor_table_command_2eproto_sccs, descriptor_table_command_2eproto_deps, 29, 7,
  schemas, file_default_instances, TableStruct_command_2eproto::offsets,
  file_level_metadata_command_2eproto, 29, file_level_enum_descriptors_command_2eproto, file_level_service_descriptors_command_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_command_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_command_2eproto)), true);
namespace amun {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebuggerInputTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[0];
}
bool DebuggerInputTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PauseSimulatorReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[1];
}
bool PauseSimulatorReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RobotMoveCommand::InitAsDefaultInstance() {
}
class RobotMoveCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotMoveCommand>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RobotMoveCommand::RobotMoveCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.RobotMoveCommand)
}
RobotMoveCommand::RobotMoveCommand(const RobotMoveCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(p_y_));
  // @@protoc_insertion_point(copy_constructor:amun.RobotMoveCommand)
}

void RobotMoveCommand::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(p_y_));
}

RobotMoveCommand::~RobotMoveCommand() {
  // @@protoc_insertion_point(destructor:amun.RobotMoveCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMoveCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotMoveCommand::ArenaDtor(void* object) {
  RobotMoveCommand* _this = reinterpret_cast< RobotMoveCommand* >(object);
  (void)_this;
}
void RobotMoveCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMoveCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMoveCommand& RobotMoveCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMoveCommand_command_2eproto.base);
  return *internal_default_instance();
}


void RobotMoveCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.RobotMoveCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p_y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(p_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMoveCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float p_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_p_x(&has_bits);
          p_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float p_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_p_y(&has_bits);
          p_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMoveCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.RobotMoveCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional float p_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_p_x(), target);
  }

  // optional float p_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.RobotMoveCommand)
  return target;
}

size_t RobotMoveCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.RobotMoveCommand)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional float p_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float p_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMoveCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMoveCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMoveCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.RobotMoveCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.RobotMoveCommand)
    MergeFrom(*source);
  }
}

void RobotMoveCommand::MergeFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_x_ = from.p_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_y_ = from.p_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotMoveCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMoveCommand::CopyFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMoveCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotMoveCommand::InternalSwap(RobotMoveCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotMoveCommand, p_y_)
      + sizeof(RobotMoveCommand::p_y_)
      - PROTOBUF_FIELD_OFFSET(RobotMoveCommand, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMoveCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorSetup::InitAsDefaultInstance() {
  ::amun::_SimulatorSetup_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::world::Geometry*>(
      ::world::Geometry::internal_default_instance());
}
class SimulatorSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorSetup>()._has_bits_);
  static const ::world::Geometry& geometry(const SimulatorSetup* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::world::Geometry&
SimulatorSetup::_Internal::geometry(const SimulatorSetup* msg) {
  return *msg->geometry_;
}
void SimulatorSetup::clear_geometry() {
  if (geometry_ != nullptr) geometry_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SimulatorSetup::clear_camera_setup() {
  camera_setup_.Clear();
}
SimulatorSetup::SimulatorSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_setup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.SimulatorSetup)
}
SimulatorSetup::SimulatorSetup(const SimulatorSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      camera_setup_(from.camera_setup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geometry()) {
    geometry_ = new ::world::Geometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amun.SimulatorSetup)
}

void SimulatorSetup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorSetup_command_2eproto.base);
  geometry_ = nullptr;
}

SimulatorSetup::~SimulatorSetup() {
  // @@protoc_insertion_point(destructor:amun.SimulatorSetup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete geometry_;
}

void SimulatorSetup::ArenaDtor(void* object) {
  SimulatorSetup* _this = reinterpret_cast< SimulatorSetup* >(object);
  (void)_this;
}
void SimulatorSetup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorSetup& SimulatorSetup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorSetup_command_2eproto.base);
  return *internal_default_instance();
}


void SimulatorSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.SimulatorSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_setup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(geometry_ != nullptr);
    geometry_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorSetup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .world.Geometry geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SSL_GeometryCameraCalibration camera_setup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_setup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorSetup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.SimulatorSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .world.Geometry geometry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // repeated .SSL_GeometryCameraCalibration camera_setup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_setup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_camera_setup(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.SimulatorSetup)
  return target;
}

size_t SimulatorSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.SimulatorSetup)
  size_t total_size = 0;

  // required .world.Geometry geometry = 1;
  if (_internal_has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_GeometryCameraCalibration camera_setup = 2;
  total_size += 1UL * this->_internal_camera_setup_size();
  for (const auto& msg : this->camera_setup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorSetup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.SimulatorSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorSetup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorSetup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.SimulatorSetup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.SimulatorSetup)
    MergeFrom(*source);
  }
}

void SimulatorSetup::MergeFrom(const SimulatorSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.SimulatorSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_setup_.MergeFrom(from.camera_setup_);
  if (from._internal_has_geometry()) {
    _internal_mutable_geometry()->::world::Geometry::MergeFrom(from._internal_geometry());
  }
}

void SimulatorSetup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.SimulatorSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorSetup::CopyFrom(const SimulatorSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.SimulatorSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorSetup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(camera_setup_)) return false;
  if (_internal_has_geometry()) {
    if (!geometry_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorSetup::InternalSwap(SimulatorSetup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_setup_.InternalSwap(&other->camera_setup_);
  swap(geometry_, other->geometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorSetup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorWorstCaseVision::InitAsDefaultInstance() {
}
class SimulatorWorstCaseVision::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorWorstCaseVision>()._has_bits_);
  static void set_has_min_robot_detection_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_ball_detection_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SimulatorWorstCaseVision::SimulatorWorstCaseVision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.SimulatorWorstCaseVision)
}
SimulatorWorstCaseVision::SimulatorWorstCaseVision(const SimulatorWorstCaseVision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_robot_detection_time_, &from.min_robot_detection_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_ball_detection_time_) -
    reinterpret_cast<char*>(&min_robot_detection_time_)) + sizeof(min_ball_detection_time_));
  // @@protoc_insertion_point(copy_constructor:amun.SimulatorWorstCaseVision)
}

void SimulatorWorstCaseVision::SharedCtor() {
  ::memset(&min_robot_detection_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_ball_detection_time_) -
      reinterpret_cast<char*>(&min_robot_detection_time_)) + sizeof(min_ball_detection_time_));
}

SimulatorWorstCaseVision::~SimulatorWorstCaseVision() {
  // @@protoc_insertion_point(destructor:amun.SimulatorWorstCaseVision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorWorstCaseVision::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulatorWorstCaseVision::ArenaDtor(void* object) {
  SimulatorWorstCaseVision* _this = reinterpret_cast< SimulatorWorstCaseVision* >(object);
  (void)_this;
}
void SimulatorWorstCaseVision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorWorstCaseVision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorWorstCaseVision& SimulatorWorstCaseVision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorWorstCaseVision_command_2eproto.base);
  return *internal_default_instance();
}


void SimulatorWorstCaseVision::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.SimulatorWorstCaseVision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_robot_detection_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_ball_detection_time_) -
        reinterpret_cast<char*>(&min_robot_detection_time_)) + sizeof(min_ball_detection_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorWorstCaseVision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_robot_detection_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_robot_detection_time(&has_bits);
          min_robot_detection_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_ball_detection_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_ball_detection_time(&has_bits);
          min_ball_detection_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorWorstCaseVision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.SimulatorWorstCaseVision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_robot_detection_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_robot_detection_time(), target);
  }

  // optional float min_ball_detection_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_ball_detection_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.SimulatorWorstCaseVision)
  return target;
}

size_t SimulatorWorstCaseVision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.SimulatorWorstCaseVision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_robot_detection_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_ball_detection_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorWorstCaseVision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.SimulatorWorstCaseVision)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorWorstCaseVision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorWorstCaseVision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.SimulatorWorstCaseVision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.SimulatorWorstCaseVision)
    MergeFrom(*source);
  }
}

void SimulatorWorstCaseVision::MergeFrom(const SimulatorWorstCaseVision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.SimulatorWorstCaseVision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_robot_detection_time_ = from.min_robot_detection_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_ball_detection_time_ = from.min_ball_detection_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorWorstCaseVision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.SimulatorWorstCaseVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorWorstCaseVision::CopyFrom(const SimulatorWorstCaseVision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.SimulatorWorstCaseVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorWorstCaseVision::IsInitialized() const {
  return true;
}

void SimulatorWorstCaseVision::InternalSwap(SimulatorWorstCaseVision* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorWorstCaseVision, min_ball_detection_time_)
      + sizeof(SimulatorWorstCaseVision::min_ball_detection_time_)
      - PROTOBUF_FIELD_OFFSET(SimulatorWorstCaseVision, min_robot_detection_time_)>(
          reinterpret_cast<char*>(&min_robot_detection_time_),
          reinterpret_cast<char*>(&other->min_robot_detection_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorWorstCaseVision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandSimulator::InitAsDefaultInstance() {
  ::amun::_CommandSimulator_default_instance_._instance.get_mutable()->simulator_setup_ = const_cast< ::amun::SimulatorSetup*>(
      ::amun::SimulatorSetup::internal_default_instance());
  ::amun::_CommandSimulator_default_instance_._instance.get_mutable()->vision_worst_case_ = const_cast< ::amun::SimulatorWorstCaseVision*>(
      ::amun::SimulatorWorstCaseVision::internal_default_instance());
  ::amun::_CommandSimulator_default_instance_._instance.get_mutable()->realism_config_ = const_cast< ::RealismConfigErForce*>(
      ::RealismConfigErForce::internal_default_instance());
  ::amun::_CommandSimulator_default_instance_._instance.get_mutable()->set_simulator_state_ = const_cast< ::world::SimulatorState*>(
      ::world::SimulatorState::internal_default_instance());
  ::amun::_CommandSimulator_default_instance_._instance.get_mutable()->ssl_control_ = const_cast< ::sslsim::SimulatorControl*>(
      ::sslsim::SimulatorControl::internal_default_instance());
}
class CommandSimulator::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSimulator>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::amun::SimulatorSetup& simulator_setup(const CommandSimulator* msg);
  static void set_has_simulator_setup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::amun::SimulatorWorstCaseVision& vision_worst_case(const CommandSimulator* msg);
  static void set_has_vision_worst_case(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RealismConfigErForce& realism_config(const CommandSimulator* msg);
  static void set_has_realism_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::world::SimulatorState& set_simulator_state(const CommandSimulator* msg);
  static void set_has_set_simulator_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sslsim::SimulatorControl& ssl_control(const CommandSimulator* msg);
  static void set_has_ssl_control(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::amun::SimulatorSetup&
CommandSimulator::_Internal::simulator_setup(const CommandSimulator* msg) {
  return *msg->simulator_setup_;
}
const ::amun::SimulatorWorstCaseVision&
CommandSimulator::_Internal::vision_worst_case(const CommandSimulator* msg) {
  return *msg->vision_worst_case_;
}
const ::RealismConfigErForce&
CommandSimulator::_Internal::realism_config(const CommandSimulator* msg) {
  return *msg->realism_config_;
}
const ::world::SimulatorState&
CommandSimulator::_Internal::set_simulator_state(const CommandSimulator* msg) {
  return *msg->set_simulator_state_;
}
const ::sslsim::SimulatorControl&
CommandSimulator::_Internal::ssl_control(const CommandSimulator* msg) {
  return *msg->ssl_control_;
}
void CommandSimulator::clear_realism_config() {
  if (realism_config_ != nullptr) realism_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSimulator::clear_set_simulator_state() {
  if (set_simulator_state_ != nullptr) set_simulator_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSimulator::clear_ssl_control() {
  if (ssl_control_ != nullptr) ssl_control_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandSimulator::CommandSimulator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandSimulator)
}
CommandSimulator::CommandSimulator(const CommandSimulator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simulator_setup()) {
    simulator_setup_ = new ::amun::SimulatorSetup(*from.simulator_setup_);
  } else {
    simulator_setup_ = nullptr;
  }
  if (from._internal_has_vision_worst_case()) {
    vision_worst_case_ = new ::amun::SimulatorWorstCaseVision(*from.vision_worst_case_);
  } else {
    vision_worst_case_ = nullptr;
  }
  if (from._internal_has_realism_config()) {
    realism_config_ = new ::RealismConfigErForce(*from.realism_config_);
  } else {
    realism_config_ = nullptr;
  }
  if (from._internal_has_set_simulator_state()) {
    set_simulator_state_ = new ::world::SimulatorState(*from.set_simulator_state_);
  } else {
    set_simulator_state_ = nullptr;
  }
  if (from._internal_has_ssl_control()) {
    ssl_control_ = new ::sslsim::SimulatorControl(*from.ssl_control_);
  } else {
    ssl_control_ = nullptr;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:amun.CommandSimulator)
}

void CommandSimulator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandSimulator_command_2eproto.base);
  ::memset(&simulator_setup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&simulator_setup_)) + sizeof(enable_));
}

CommandSimulator::~CommandSimulator() {
  // @@protoc_insertion_point(destructor:amun.CommandSimulator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSimulator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simulator_setup_;
  if (this != internal_default_instance()) delete vision_worst_case_;
  if (this != internal_default_instance()) delete realism_config_;
  if (this != internal_default_instance()) delete set_simulator_state_;
  if (this != internal_default_instance()) delete ssl_control_;
}

void CommandSimulator::ArenaDtor(void* object) {
  CommandSimulator* _this = reinterpret_cast< CommandSimulator* >(object);
  (void)_this;
}
void CommandSimulator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSimulator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandSimulator& CommandSimulator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandSimulator_command_2eproto.base);
  return *internal_default_instance();
}


void CommandSimulator::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandSimulator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(simulator_setup_ != nullptr);
      simulator_setup_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vision_worst_case_ != nullptr);
      vision_worst_case_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(realism_config_ != nullptr);
      realism_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(set_simulator_state_ != nullptr);
      set_simulator_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ssl_control_ != nullptr);
      ssl_control_->Clear();
    }
  }
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSimulator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.SimulatorSetup simulator_setup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulator_setup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.SimulatorWorstCaseVision vision_worst_case = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_worst_case(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RealismConfigErForce realism_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_realism_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.SimulatorState set_simulator_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_simulator_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sslsim.SimulatorControl ssl_control = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssl_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSimulator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandSimulator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional .amun.SimulatorSetup simulator_setup = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simulator_setup(this), target, stream);
  }

  // optional .amun.SimulatorWorstCaseVision vision_worst_case = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vision_worst_case(this), target, stream);
  }

  // optional .RealismConfigErForce realism_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::realism_config(this), target, stream);
  }

  // optional .world.SimulatorState set_simulator_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_simulator_state(this), target, stream);
  }

  // optional .sslsim.SimulatorControl ssl_control = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ssl_control(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandSimulator)
  return target;
}

size_t CommandSimulator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandSimulator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .amun.SimulatorSetup simulator_setup = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simulator_setup_);
    }

    // optional .amun.SimulatorWorstCaseVision vision_worst_case = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vision_worst_case_);
    }

    // optional .RealismConfigErForce realism_config = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *realism_config_);
    }

    // optional .world.SimulatorState set_simulator_state = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_simulator_state_);
    }

    // optional .sslsim.SimulatorControl ssl_control = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssl_control_);
    }

    // optional bool enable = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSimulator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandSimulator)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSimulator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSimulator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandSimulator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandSimulator)
    MergeFrom(*source);
  }
}

void CommandSimulator::MergeFrom(const CommandSimulator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandSimulator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simulator_setup()->::amun::SimulatorSetup::MergeFrom(from._internal_simulator_setup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vision_worst_case()->::amun::SimulatorWorstCaseVision::MergeFrom(from._internal_vision_worst_case());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_realism_config()->::RealismConfigErForce::MergeFrom(from._internal_realism_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_set_simulator_state()->::world::SimulatorState::MergeFrom(from._internal_set_simulator_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ssl_control()->::sslsim::SimulatorControl::MergeFrom(from._internal_ssl_control());
    }
    if (cached_has_bits & 0x00000020u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSimulator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandSimulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSimulator::CopyFrom(const CommandSimulator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandSimulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSimulator::IsInitialized() const {
  if (_internal_has_simulator_setup()) {
    if (!simulator_setup_->IsInitialized()) return false;
  }
  if (_internal_has_set_simulator_state()) {
    if (!set_simulator_state_->IsInitialized()) return false;
  }
  if (_internal_has_ssl_control()) {
    if (!ssl_control_->IsInitialized()) return false;
  }
  return true;
}

void CommandSimulator::InternalSwap(CommandSimulator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSimulator, enable_)
      + sizeof(CommandSimulator::enable_)
      - PROTOBUF_FIELD_OFFSET(CommandSimulator, simulator_setup_)>(
          reinterpret_cast<char*>(&simulator_setup_),
          reinterpret_cast<char*>(&other->simulator_setup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSimulator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandReferee::InitAsDefaultInstance() {
}
class CommandReferee::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReferee>()._has_bits_);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_internal_autoref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_automatic_robot_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CommandReferee::CommandReferee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandReferee)
}
CommandReferee::CommandReferee(const CommandReferee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
      GetArena());
  }
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_automatic_robot_exchange_) -
    reinterpret_cast<char*>(&active_)) + sizeof(use_automatic_robot_exchange_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandReferee)
}

void CommandReferee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandReferee_command_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_automatic_robot_exchange_) -
      reinterpret_cast<char*>(&active_)) + sizeof(use_automatic_robot_exchange_));
}

CommandReferee::~CommandReferee() {
  // @@protoc_insertion_point(destructor:amun.CommandReferee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReferee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandReferee::ArenaDtor(void* object) {
  CommandReferee* _this = reinterpret_cast< CommandReferee* >(object);
  (void)_this;
}
void CommandReferee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReferee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandReferee& CommandReferee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandReferee_command_2eproto.base);
  return *internal_default_instance();
}


void CommandReferee::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandReferee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_automatic_robot_exchange_) -
      reinterpret_cast<char*>(&active_)) + sizeof(use_automatic_robot_exchange_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReferee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_internal_autoref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_internal_autoref(&has_bits);
          use_internal_autoref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_automatic_robot_exchange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_automatic_robot_exchange(&has_bits);
          use_automatic_robot_exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReferee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandReferee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // optional bytes command = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_command(), target);
  }

  // optional bool use_internal_autoref = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_internal_autoref(), target);
  }

  // optional bool use_automatic_robot_exchange = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_automatic_robot_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandReferee)
  return target;
}

size_t CommandReferee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandReferee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes command = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_command());
    }

    // optional bool active = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_internal_autoref = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_automatic_robot_exchange = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReferee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandReferee)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReferee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReferee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandReferee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandReferee)
    MergeFrom(*source);
  }
}

void CommandReferee::MergeFrom(const CommandReferee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandReferee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_internal_autoref_ = from.use_internal_autoref_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_automatic_robot_exchange_ = from.use_automatic_robot_exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandReferee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandReferee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReferee::CopyFrom(const CommandReferee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandReferee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReferee::IsInitialized() const {
  return true;
}

void CommandReferee::InternalSwap(CommandReferee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReferee, use_automatic_robot_exchange_)
      + sizeof(CommandReferee::use_automatic_robot_exchange_)
      - PROTOBUF_FIELD_OFFSET(CommandReferee, active_)>(
          reinterpret_cast<char*>(&active_),
          reinterpret_cast<char*>(&other->active_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReferee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::InitAsDefaultInstance() {
}
class CommandStrategyAutomaticEntrypoints_EntrypointForStage::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStrategyAutomaticEntrypoints_EntrypointForStage>()._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entry_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CommandStrategyAutomaticEntrypoints_EntrypointForStage::CommandStrategyAutomaticEntrypoints_EntrypointForStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
}
CommandStrategyAutomaticEntrypoints_EntrypointForStage::CommandStrategyAutomaticEntrypoints_EntrypointForStage(const CommandStrategyAutomaticEntrypoints_EntrypointForStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entry_point()) {
    entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entry_point(),
      GetArena());
  }
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto.base);
  entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stage_ = 0;
}

CommandStrategyAutomaticEntrypoints_EntrypointForStage::~CommandStrategyAutomaticEntrypoints_EntrypointForStage() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entry_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::ArenaDtor(void* object) {
  CommandStrategyAutomaticEntrypoints_EntrypointForStage* _this = reinterpret_cast< CommandStrategyAutomaticEntrypoints_EntrypointForStage* >(object);
  (void)_this;
}
void CommandStrategyAutomaticEntrypoints_EntrypointForStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyAutomaticEntrypoints_EntrypointForStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyAutomaticEntrypoints_EntrypointForStage& CommandStrategyAutomaticEntrypoints_EntrypointForStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyAutomaticEntrypoints_EntrypointForStage_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyAutomaticEntrypoints_EntrypointForStage::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    entry_point_.ClearNonDefaultToEmpty();
  }
  stage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyAutomaticEntrypoints_EntrypointForStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SSL_Referee.Stage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::SSL_Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entry_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage.entry_point");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyAutomaticEntrypoints_EntrypointForStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_Referee.Stage stage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // required string entry_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entry_point().data(), static_cast<int>(this->_internal_entry_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage.entry_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entry_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  return target;
}

size_t CommandStrategyAutomaticEntrypoints_EntrypointForStage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  size_t total_size = 0;

  if (_internal_has_entry_point()) {
    // required string entry_point = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_point());
  }

  if (_internal_has_stage()) {
    // required .SSL_Referee.Stage stage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  return total_size;
}
size_t CommandStrategyAutomaticEntrypoints_EntrypointForStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string entry_point = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_point());

    // required .SSL_Referee.Stage stage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyAutomaticEntrypoints_EntrypointForStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyAutomaticEntrypoints_EntrypointForStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
    MergeFrom(*source);
  }
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::MergeFrom(const CommandStrategyAutomaticEntrypoints_EntrypointForStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entry_point(from._internal_entry_point());
    }
    if (cached_has_bits & 0x00000002u) {
      stage_ = from.stage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::CopyFrom(const CommandStrategyAutomaticEntrypoints_EntrypointForStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyAutomaticEntrypoints_EntrypointForStage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandStrategyAutomaticEntrypoints_EntrypointForStage::InternalSwap(CommandStrategyAutomaticEntrypoints_EntrypointForStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_point_.Swap(&other->entry_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyAutomaticEntrypoints_EntrypointForStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyAutomaticEntrypoints::InitAsDefaultInstance() {
}
class CommandStrategyAutomaticEntrypoints::_Internal {
 public:
};

CommandStrategyAutomaticEntrypoints::CommandStrategyAutomaticEntrypoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyAutomaticEntrypoints)
}
CommandStrategyAutomaticEntrypoints::CommandStrategyAutomaticEntrypoints(const CommandStrategyAutomaticEntrypoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mapping_(from.mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyAutomaticEntrypoints)
}

void CommandStrategyAutomaticEntrypoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto.base);
}

CommandStrategyAutomaticEntrypoints::~CommandStrategyAutomaticEntrypoints() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyAutomaticEntrypoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyAutomaticEntrypoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandStrategyAutomaticEntrypoints::ArenaDtor(void* object) {
  CommandStrategyAutomaticEntrypoints* _this = reinterpret_cast< CommandStrategyAutomaticEntrypoints* >(object);
  (void)_this;
}
void CommandStrategyAutomaticEntrypoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyAutomaticEntrypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyAutomaticEntrypoints& CommandStrategyAutomaticEntrypoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyAutomaticEntrypoints_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyAutomaticEntrypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyAutomaticEntrypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyAutomaticEntrypoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyAutomaticEntrypoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyAutomaticEntrypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage mapping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mapping(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyAutomaticEntrypoints)
  return target;
}

size_t CommandStrategyAutomaticEntrypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyAutomaticEntrypoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .amun.CommandStrategyAutomaticEntrypoints.EntrypointForStage mapping = 1;
  total_size += 1UL * this->_internal_mapping_size();
  for (const auto& msg : this->mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyAutomaticEntrypoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyAutomaticEntrypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyAutomaticEntrypoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyAutomaticEntrypoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyAutomaticEntrypoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyAutomaticEntrypoints)
    MergeFrom(*source);
  }
}

void CommandStrategyAutomaticEntrypoints::MergeFrom(const CommandStrategyAutomaticEntrypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyAutomaticEntrypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
}

void CommandStrategyAutomaticEntrypoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyAutomaticEntrypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyAutomaticEntrypoints::CopyFrom(const CommandStrategyAutomaticEntrypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyAutomaticEntrypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyAutomaticEntrypoints::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mapping_)) return false;
  return true;
}

void CommandStrategyAutomaticEntrypoints::InternalSwap(CommandStrategyAutomaticEntrypoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mapping_.InternalSwap(&other->mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyAutomaticEntrypoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyLoad::InitAsDefaultInstance() {
}
class CommandStrategyLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStrategyLoad>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entry_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CommandStrategyLoad::CommandStrategyLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyLoad)
}
CommandStrategyLoad::CommandStrategyLoad(const CommandStrategyLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entry_point()) {
    entry_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entry_point(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyLoad)
}

void CommandStrategyLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStrategyLoad_command_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandStrategyLoad::~CommandStrategyLoad() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyLoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandStrategyLoad::ArenaDtor(void* object) {
  CommandStrategyLoad* _this = reinterpret_cast< CommandStrategyLoad* >(object);
  (void)_this;
}
void CommandStrategyLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyLoad& CommandStrategyLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyLoad_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      entry_point_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandStrategyLoad.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entry_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandStrategyLoad.entry_point");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandStrategyLoad.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional string entry_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entry_point().data(), static_cast<int>(this->_internal_entry_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandStrategyLoad.entry_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entry_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyLoad)
  return target;
}

size_t CommandStrategyLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyLoad)
  size_t total_size = 0;

  // required string filename = 1;
  if (_internal_has_filename()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string entry_point = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyLoad)
    MergeFrom(*source);
  }
}

void CommandStrategyLoad::MergeFrom(const CommandStrategyLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_entry_point(from._internal_entry_point());
    }
  }
}

void CommandStrategyLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyLoad::CopyFrom(const CommandStrategyLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyLoad::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandStrategyLoad::InternalSwap(CommandStrategyLoad* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entry_point_.Swap(&other->entry_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyClose::InitAsDefaultInstance() {
}
class CommandStrategyClose::_Internal {
 public:
};

CommandStrategyClose::CommandStrategyClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyClose)
}
CommandStrategyClose::CommandStrategyClose(const CommandStrategyClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyClose)
}

void CommandStrategyClose::SharedCtor() {
}

CommandStrategyClose::~CommandStrategyClose() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandStrategyClose::ArenaDtor(void* object) {
  CommandStrategyClose* _this = reinterpret_cast< CommandStrategyClose* >(object);
  (void)_this;
}
void CommandStrategyClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyClose& CommandStrategyClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyClose_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyClose::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyClose)
  return target;
}

size_t CommandStrategyClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyClose)
    MergeFrom(*source);
  }
}

void CommandStrategyClose::MergeFrom(const CommandStrategyClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CommandStrategyClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyClose::CopyFrom(const CommandStrategyClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyClose::IsInitialized() const {
  return true;
}

void CommandStrategyClose::InternalSwap(CommandStrategyClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyTriggerDebugger::InitAsDefaultInstance() {
}
class CommandStrategyTriggerDebugger::_Internal {
 public:
};

CommandStrategyTriggerDebugger::CommandStrategyTriggerDebugger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyTriggerDebugger)
}
CommandStrategyTriggerDebugger::CommandStrategyTriggerDebugger(const CommandStrategyTriggerDebugger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyTriggerDebugger)
}

void CommandStrategyTriggerDebugger::SharedCtor() {
}

CommandStrategyTriggerDebugger::~CommandStrategyTriggerDebugger() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyTriggerDebugger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyTriggerDebugger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandStrategyTriggerDebugger::ArenaDtor(void* object) {
  CommandStrategyTriggerDebugger* _this = reinterpret_cast< CommandStrategyTriggerDebugger* >(object);
  (void)_this;
}
void CommandStrategyTriggerDebugger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyTriggerDebugger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyTriggerDebugger& CommandStrategyTriggerDebugger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyTriggerDebugger_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyTriggerDebugger::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyTriggerDebugger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyTriggerDebugger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyTriggerDebugger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyTriggerDebugger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyTriggerDebugger)
  return target;
}

size_t CommandStrategyTriggerDebugger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyTriggerDebugger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyTriggerDebugger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyTriggerDebugger)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyTriggerDebugger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyTriggerDebugger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyTriggerDebugger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyTriggerDebugger)
    MergeFrom(*source);
  }
}

void CommandStrategyTriggerDebugger::MergeFrom(const CommandStrategyTriggerDebugger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyTriggerDebugger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CommandStrategyTriggerDebugger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyTriggerDebugger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyTriggerDebugger::CopyFrom(const CommandStrategyTriggerDebugger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyTriggerDebugger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyTriggerDebugger::IsInitialized() const {
  return true;
}

void CommandStrategyTriggerDebugger::InternalSwap(CommandStrategyTriggerDebugger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyTriggerDebugger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategy::InitAsDefaultInstance() {
  ::amun::_CommandStrategy_default_instance_._instance.get_mutable()->load_ = const_cast< ::amun::CommandStrategyLoad*>(
      ::amun::CommandStrategyLoad::internal_default_instance());
  ::amun::_CommandStrategy_default_instance_._instance.get_mutable()->close_ = const_cast< ::amun::CommandStrategyClose*>(
      ::amun::CommandStrategyClose::internal_default_instance());
  ::amun::_CommandStrategy_default_instance_._instance.get_mutable()->debug_ = const_cast< ::amun::CommandStrategyTriggerDebugger*>(
      ::amun::CommandStrategyTriggerDebugger::internal_default_instance());
  ::amun::_CommandStrategy_default_instance_._instance.get_mutable()->automatic_entrypoints_ = const_cast< ::amun::CommandStrategyAutomaticEntrypoints*>(
      ::amun::CommandStrategyAutomaticEntrypoints::internal_default_instance());
}
class CommandStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStrategy>()._has_bits_);
  static const ::amun::CommandStrategyLoad& load(const CommandStrategy* msg);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::amun::CommandStrategyClose& close(const CommandStrategy* msg);
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reload(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_auto_reload(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::amun::CommandStrategyTriggerDebugger& debug(const CommandStrategy* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_performance_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_start_profiling(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_finish_and_save_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tournament_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::amun::CommandStrategyAutomaticEntrypoints& automatic_entrypoints(const CommandStrategy* msg);
  static void set_has_automatic_entrypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::amun::CommandStrategyLoad&
CommandStrategy::_Internal::load(const CommandStrategy* msg) {
  return *msg->load_;
}
const ::amun::CommandStrategyClose&
CommandStrategy::_Internal::close(const CommandStrategy* msg) {
  return *msg->close_;
}
const ::amun::CommandStrategyTriggerDebugger&
CommandStrategy::_Internal::debug(const CommandStrategy* msg) {
  return *msg->debug_;
}
const ::amun::CommandStrategyAutomaticEntrypoints&
CommandStrategy::_Internal::automatic_entrypoints(const CommandStrategy* msg) {
  return *msg->automatic_entrypoints_;
}
CommandStrategy::CommandStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategy)
}
CommandStrategy::CommandStrategy(const CommandStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  finish_and_save_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_finish_and_save_profile()) {
    finish_and_save_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_finish_and_save_profile(),
      GetArena());
  }
  if (from._internal_has_load()) {
    load_ = new ::amun::CommandStrategyLoad(*from.load_);
  } else {
    load_ = nullptr;
  }
  if (from._internal_has_close()) {
    close_ = new ::amun::CommandStrategyClose(*from.close_);
  } else {
    close_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::amun::CommandStrategyTriggerDebugger(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_automatic_entrypoints()) {
    automatic_entrypoints_ = new ::amun::CommandStrategyAutomaticEntrypoints(*from.automatic_entrypoints_);
  } else {
    automatic_entrypoints_ = nullptr;
  }
  ::memcpy(&reload_, &from.reload_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_mode_) -
    reinterpret_cast<char*>(&reload_)) + sizeof(tournament_mode_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategy)
}

void CommandStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStrategy_command_2eproto.base);
  finish_and_save_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tournament_mode_) -
      reinterpret_cast<char*>(&load_)) + sizeof(tournament_mode_));
}

CommandStrategy::~CommandStrategy() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  finish_and_save_profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete load_;
  if (this != internal_default_instance()) delete close_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete automatic_entrypoints_;
}

void CommandStrategy::ArenaDtor(void* object) {
  CommandStrategy* _this = reinterpret_cast< CommandStrategy* >(object);
  (void)_this;
}
void CommandStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategy& CommandStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategy_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      finish_and_save_profile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(load_ != nullptr);
      load_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(close_ != nullptr);
      close_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(automatic_entrypoints_ != nullptr);
      automatic_entrypoints_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&reload_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_debug_) -
        reinterpret_cast<char*>(&reload_)) + sizeof(enable_debug_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&performance_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_mode_) -
        reinterpret_cast<char*>(&performance_mode_)) + sizeof(tournament_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .amun.CommandStrategyLoad load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategyClose close = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reload(&has_bits);
          reload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_reload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_auto_reload(&has_bits);
          auto_reload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_debug(&has_bits);
          enable_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategyTriggerDebugger debug = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool performance_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_performance_mode(&has_bits);
          performance_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool start_profiling = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_profiling(&has_bits);
          start_profiling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string finish_and_save_profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_finish_and_save_profile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandStrategy.finish_and_save_profile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tournament_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tournament_mode(&has_bits);
          tournament_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategyAutomaticEntrypoints automatic_entrypoints = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_automatic_entrypoints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .amun.CommandStrategyLoad load = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::load(this), target, stream);
  }

  // optional .amun.CommandStrategyClose close = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::close(this), target, stream);
  }

  // optional bool reload = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reload(), target);
  }

  // optional bool auto_reload = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_reload(), target);
  }

  // optional bool enable_debug = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_debug(), target);
  }

  // optional .amun.CommandStrategyTriggerDebugger debug = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::debug(this), target, stream);
  }

  // optional bool performance_mode = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_performance_mode(), target);
  }

  // optional bool start_profiling = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_start_profiling(), target);
  }

  // optional string finish_and_save_profile = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_finish_and_save_profile().data(), static_cast<int>(this->_internal_finish_and_save_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandStrategy.finish_and_save_profile");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_finish_and_save_profile(), target);
  }

  // optional bool tournament_mode = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_tournament_mode(), target);
  }

  // optional .amun.CommandStrategyAutomaticEntrypoints automatic_entrypoints = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::automatic_entrypoints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategy)
  return target;
}

size_t CommandStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string finish_and_save_profile = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_finish_and_save_profile());
    }

    // optional .amun.CommandStrategyLoad load = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_);
    }

    // optional .amun.CommandStrategyClose close = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_);
    }

    // optional .amun.CommandStrategyTriggerDebugger debug = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .amun.CommandStrategyAutomaticEntrypoints automatic_entrypoints = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *automatic_entrypoints_);
    }

    // optional bool reload = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool auto_reload = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_debug = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool performance_mode = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool start_profiling = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool tournament_mode = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategy)
    MergeFrom(*source);
  }
}

void CommandStrategy::MergeFrom(const CommandStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_finish_and_save_profile(from._internal_finish_and_save_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_load()->::amun::CommandStrategyLoad::MergeFrom(from._internal_load());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_close()->::amun::CommandStrategyClose::MergeFrom(from._internal_close());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_debug()->::amun::CommandStrategyTriggerDebugger::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_automatic_entrypoints()->::amun::CommandStrategyAutomaticEntrypoints::MergeFrom(from._internal_automatic_entrypoints());
    }
    if (cached_has_bits & 0x00000020u) {
      reload_ = from.reload_;
    }
    if (cached_has_bits & 0x00000040u) {
      auto_reload_ = from.auto_reload_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_debug_ = from.enable_debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      performance_mode_ = from.performance_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      start_profiling_ = from.start_profiling_;
    }
    if (cached_has_bits & 0x00000400u) {
      tournament_mode_ = from.tournament_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategy::CopyFrom(const CommandStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategy::IsInitialized() const {
  if (_internal_has_load()) {
    if (!load_->IsInitialized()) return false;
  }
  if (_internal_has_automatic_entrypoints()) {
    if (!automatic_entrypoints_->IsInitialized()) return false;
  }
  return true;
}

void CommandStrategy::InternalSwap(CommandStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  finish_and_save_profile_.Swap(&other->finish_and_save_profile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandStrategy, tournament_mode_)
      + sizeof(CommandStrategy::tournament_mode_)
      - PROTOBUF_FIELD_OFFSET(CommandStrategy, load_)>(
          reinterpret_cast<char*>(&load_),
          reinterpret_cast<char*>(&other->load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandControl::InitAsDefaultInstance() {
}
class CommandControl::_Internal {
 public:
};

void CommandControl::clear_commands() {
  commands_.Clear();
}
CommandControl::CommandControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandControl)
}
CommandControl::CommandControl(const CommandControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.CommandControl)
}

void CommandControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandControl_command_2eproto.base);
}

CommandControl::~CommandControl() {
  // @@protoc_insertion_point(destructor:amun.CommandControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandControl::ArenaDtor(void* object) {
  CommandControl* _this = reinterpret_cast< CommandControl* >(object);
  (void)_this;
}
void CommandControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandControl& CommandControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandControl_command_2eproto.base);
  return *internal_default_instance();
}


void CommandControl::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .robot.RadioCommand commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robot.RadioCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandControl)
  return target;
}

size_t CommandControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .robot.RadioCommand commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandControl)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandControl)
    MergeFrom(*source);
  }
}

void CommandControl::MergeFrom(const CommandControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void CommandControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandControl::CopyFrom(const CommandControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandControl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(commands_)) return false;
  return true;
}

void CommandControl::InternalSwap(CommandControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransceiverConfiguration::InitAsDefaultInstance() {
}
class TransceiverConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiverConfiguration>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TransceiverConfiguration::TransceiverConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.TransceiverConfiguration)
}
TransceiverConfiguration::TransceiverConfiguration(const TransceiverConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:amun.TransceiverConfiguration)
}

void TransceiverConfiguration::SharedCtor() {
  channel_ = 0u;
}

TransceiverConfiguration::~TransceiverConfiguration() {
  // @@protoc_insertion_point(destructor:amun.TransceiverConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransceiverConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransceiverConfiguration::ArenaDtor(void* object) {
  TransceiverConfiguration* _this = reinterpret_cast< TransceiverConfiguration* >(object);
  (void)_this;
}
void TransceiverConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransceiverConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransceiverConfiguration& TransceiverConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransceiverConfiguration_command_2eproto.base);
  return *internal_default_instance();
}


void TransceiverConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.TransceiverConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransceiverConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransceiverConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.TransceiverConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.TransceiverConfiguration)
  return target;
}

size_t TransceiverConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.TransceiverConfiguration)
  size_t total_size = 0;

  // required uint32 channel = 1;
  if (_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransceiverConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.TransceiverConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TransceiverConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransceiverConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.TransceiverConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.TransceiverConfiguration)
    MergeFrom(*source);
  }
}

void TransceiverConfiguration::MergeFrom(const TransceiverConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.TransceiverConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_set_channel(from._internal_channel());
  }
}

void TransceiverConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.TransceiverConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransceiverConfiguration::CopyFrom(const TransceiverConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.TransceiverConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiverConfiguration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TransceiverConfiguration::InternalSwap(TransceiverConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiverConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostAddress::InitAsDefaultInstance() {
}
class HostAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<HostAddress>()._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HostAddress::HostAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.HostAddress)
}
HostAddress::HostAddress(const HostAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:amun.HostAddress)
}

void HostAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostAddress_command_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

HostAddress::~HostAddress() {
  // @@protoc_insertion_point(destructor:amun.HostAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostAddress::ArenaDtor(void* object) {
  HostAddress* _this = reinterpret_cast< HostAddress* >(object);
  (void)_this;
}
void HostAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostAddress& HostAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostAddress_command_2eproto.base);
  return *internal_default_instance();
}


void HostAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.HostAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmpty();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.HostAddress.host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.HostAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.HostAddress.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.HostAddress)
  return target;
}

size_t HostAddress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:amun.HostAddress)
  size_t total_size = 0;

  if (_internal_has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  if (_internal_has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  return total_size;
}
size_t HostAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.HostAddress)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());

    // required uint32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.HostAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const HostAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.HostAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.HostAddress)
    MergeFrom(*source);
  }
}

void HostAddress::MergeFrom(const HostAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.HostAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HostAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.HostAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostAddress::CopyFrom(const HostAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.HostAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostAddress::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HostAddress::InternalSwap(HostAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorNetworking::InitAsDefaultInstance() {
}
class SimulatorNetworking::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorNetworking>()._has_bits_);
  static void set_has_control_simulator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_control_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_control_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_port_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

SimulatorNetworking::SimulatorNetworking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.SimulatorNetworking)
}
SimulatorNetworking::SimulatorNetworking(const SimulatorNetworking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_simulator_, &from.control_simulator_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_yellow_) -
    reinterpret_cast<char*>(&control_simulator_)) + sizeof(port_yellow_));
  // @@protoc_insertion_point(copy_constructor:amun.SimulatorNetworking)
}

void SimulatorNetworking::SharedCtor() {
  ::memset(&control_simulator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_yellow_) -
      reinterpret_cast<char*>(&control_simulator_)) + sizeof(port_yellow_));
}

SimulatorNetworking::~SimulatorNetworking() {
  // @@protoc_insertion_point(destructor:amun.SimulatorNetworking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulatorNetworking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulatorNetworking::ArenaDtor(void* object) {
  SimulatorNetworking* _this = reinterpret_cast< SimulatorNetworking* >(object);
  (void)_this;
}
void SimulatorNetworking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorNetworking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorNetworking& SimulatorNetworking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorNetworking_command_2eproto.base);
  return *internal_default_instance();
}


void SimulatorNetworking::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.SimulatorNetworking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&control_simulator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_yellow_) -
        reinterpret_cast<char*>(&control_simulator_)) + sizeof(port_yellow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorNetworking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool control_simulator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_control_simulator(&has_bits);
          control_simulator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool control_blue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_control_blue(&has_bits);
          control_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool control_yellow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_control_yellow(&has_bits);
          control_yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port_blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_port_blue(&has_bits);
          port_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port_yellow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_port_yellow(&has_bits);
          port_yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorNetworking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.SimulatorNetworking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool control_simulator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_control_simulator(), target);
  }

  // required bool control_blue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_control_blue(), target);
  }

  // required bool control_yellow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_control_yellow(), target);
  }

  // required uint32 port_blue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port_blue(), target);
  }

  // required uint32 port_yellow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port_yellow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.SimulatorNetworking)
  return target;
}

size_t SimulatorNetworking::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:amun.SimulatorNetworking)
  size_t total_size = 0;

  if (_internal_has_control_simulator()) {
    // required bool control_simulator = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_control_blue()) {
    // required bool control_blue = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_control_yellow()) {
    // required bool control_yellow = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_port_blue()) {
    // required uint32 port_blue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_blue());
  }

  if (_internal_has_port_yellow()) {
    // required uint32 port_yellow = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_yellow());
  }

  return total_size;
}
size_t SimulatorNetworking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.SimulatorNetworking)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bool control_simulator = 1;
    total_size += 1 + 1;

    // required bool control_blue = 2;
    total_size += 1 + 1;

    // required bool control_yellow = 3;
    total_size += 1 + 1;

    // required uint32 port_blue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_blue());

    // required uint32 port_yellow = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_yellow());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorNetworking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.SimulatorNetworking)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorNetworking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorNetworking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.SimulatorNetworking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.SimulatorNetworking)
    MergeFrom(*source);
  }
}

void SimulatorNetworking::MergeFrom(const SimulatorNetworking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.SimulatorNetworking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      control_simulator_ = from.control_simulator_;
    }
    if (cached_has_bits & 0x00000002u) {
      control_blue_ = from.control_blue_;
    }
    if (cached_has_bits & 0x00000004u) {
      control_yellow_ = from.control_yellow_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_blue_ = from.port_blue_;
    }
    if (cached_has_bits & 0x00000010u) {
      port_yellow_ = from.port_yellow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorNetworking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.SimulatorNetworking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorNetworking::CopyFrom(const SimulatorNetworking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.SimulatorNetworking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorNetworking::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SimulatorNetworking::InternalSwap(SimulatorNetworking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorNetworking, port_yellow_)
      + sizeof(SimulatorNetworking::port_yellow_)
      - PROTOBUF_FIELD_OFFSET(SimulatorNetworking, control_simulator_)>(
          reinterpret_cast<char*>(&control_simulator_),
          reinterpret_cast<char*>(&other->control_simulator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorNetworking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandTransceiver::InitAsDefaultInstance() {
  ::amun::_CommandTransceiver_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::amun::TransceiverConfiguration*>(
      ::amun::TransceiverConfiguration::internal_default_instance());
  ::amun::_CommandTransceiver_default_instance_._instance.get_mutable()->network_configuration_ = const_cast< ::amun::HostAddress*>(
      ::amun::HostAddress::internal_default_instance());
  ::amun::_CommandTransceiver_default_instance_._instance.get_mutable()->simulator_configuration_ = const_cast< ::amun::SimulatorNetworking*>(
      ::amun::SimulatorNetworking::internal_default_instance());
}
class CommandTransceiver::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransceiver>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::amun::TransceiverConfiguration& configuration(const CommandTransceiver* msg);
  static void set_has_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::amun::HostAddress& network_configuration(const CommandTransceiver* msg);
  static void set_has_network_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_network(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::amun::SimulatorNetworking& simulator_configuration(const CommandTransceiver* msg);
  static void set_has_simulator_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::amun::TransceiverConfiguration&
CommandTransceiver::_Internal::configuration(const CommandTransceiver* msg) {
  return *msg->configuration_;
}
const ::amun::HostAddress&
CommandTransceiver::_Internal::network_configuration(const CommandTransceiver* msg) {
  return *msg->network_configuration_;
}
const ::amun::SimulatorNetworking&
CommandTransceiver::_Internal::simulator_configuration(const CommandTransceiver* msg) {
  return *msg->simulator_configuration_;
}
CommandTransceiver::CommandTransceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandTransceiver)
}
CommandTransceiver::CommandTransceiver(const CommandTransceiver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_configuration()) {
    configuration_ = new ::amun::TransceiverConfiguration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_network_configuration()) {
    network_configuration_ = new ::amun::HostAddress(*from.network_configuration_);
  } else {
    network_configuration_ = nullptr;
  }
  if (from._internal_has_simulator_configuration()) {
    simulator_configuration_ = new ::amun::SimulatorNetworking(*from.simulator_configuration_);
  } else {
    simulator_configuration_ = nullptr;
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_network_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(use_network_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandTransceiver)
}

void CommandTransceiver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandTransceiver_command_2eproto.base);
  ::memset(&configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_network_) -
      reinterpret_cast<char*>(&configuration_)) + sizeof(use_network_));
}

CommandTransceiver::~CommandTransceiver() {
  // @@protoc_insertion_point(destructor:amun.CommandTransceiver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandTransceiver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete network_configuration_;
  if (this != internal_default_instance()) delete simulator_configuration_;
}

void CommandTransceiver::ArenaDtor(void* object) {
  CommandTransceiver* _this = reinterpret_cast< CommandTransceiver* >(object);
  (void)_this;
}
void CommandTransceiver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTransceiver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandTransceiver& CommandTransceiver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandTransceiver_command_2eproto.base);
  return *internal_default_instance();
}


void CommandTransceiver::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandTransceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(configuration_ != nullptr);
      configuration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(network_configuration_ != nullptr);
      network_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(simulator_configuration_ != nullptr);
      simulator_configuration_->Clear();
    }
  }
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_network_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(use_network_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransceiver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool charge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_charge(&has_bits);
          charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.TransceiverConfiguration configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.HostAddress network_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_network = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_network(&has_bits);
          use_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.SimulatorNetworking simulator_configuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulator_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTransceiver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandTransceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional bool charge = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_charge(), target);
  }

  // optional .amun.TransceiverConfiguration configuration = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::configuration(this), target, stream);
  }

  // optional .amun.HostAddress network_configuration = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::network_configuration(this), target, stream);
  }

  // optional bool use_network = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_network(), target);
  }

  // optional .amun.SimulatorNetworking simulator_configuration = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::simulator_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandTransceiver)
  return target;
}

size_t CommandTransceiver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandTransceiver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .amun.TransceiverConfiguration configuration = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_);
    }

    // optional .amun.HostAddress network_configuration = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_configuration_);
    }

    // optional .amun.SimulatorNetworking simulator_configuration = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simulator_configuration_);
    }

    // optional bool enable = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool charge = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_network = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandTransceiver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandTransceiver)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandTransceiver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandTransceiver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandTransceiver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandTransceiver)
    MergeFrom(*source);
  }
}

void CommandTransceiver::MergeFrom(const CommandTransceiver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandTransceiver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_configuration()->::amun::TransceiverConfiguration::MergeFrom(from._internal_configuration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_network_configuration()->::amun::HostAddress::MergeFrom(from._internal_network_configuration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_simulator_configuration()->::amun::SimulatorNetworking::MergeFrom(from._internal_simulator_configuration());
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      charge_ = from.charge_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_network_ = from.use_network_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandTransceiver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandTransceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandTransceiver::CopyFrom(const CommandTransceiver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandTransceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransceiver::IsInitialized() const {
  if (_internal_has_configuration()) {
    if (!configuration_->IsInitialized()) return false;
  }
  if (_internal_has_network_configuration()) {
    if (!network_configuration_->IsInitialized()) return false;
  }
  if (_internal_has_simulator_configuration()) {
    if (!simulator_configuration_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransceiver::InternalSwap(CommandTransceiver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransceiver, use_network_)
      + sizeof(CommandTransceiver::use_network_)
      - PROTOBUF_FIELD_OFFSET(CommandTransceiver, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransceiver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtualFieldTransform::InitAsDefaultInstance() {
}
class VirtualFieldTransform::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualFieldTransform>()._has_bits_);
  static void set_has_a11(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a12(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a21(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a22(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offsetx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_offsety(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

VirtualFieldTransform::VirtualFieldTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.VirtualFieldTransform)
}
VirtualFieldTransform::VirtualFieldTransform(const VirtualFieldTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a11_, &from.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&a11_)) + sizeof(offsety_));
  // @@protoc_insertion_point(copy_constructor:amun.VirtualFieldTransform)
}

void VirtualFieldTransform::SharedCtor() {
  ::memset(&a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&a11_)) + sizeof(offsety_));
}

VirtualFieldTransform::~VirtualFieldTransform() {
  // @@protoc_insertion_point(destructor:amun.VirtualFieldTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VirtualFieldTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VirtualFieldTransform::ArenaDtor(void* object) {
  VirtualFieldTransform* _this = reinterpret_cast< VirtualFieldTransform* >(object);
  (void)_this;
}
void VirtualFieldTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualFieldTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualFieldTransform& VirtualFieldTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualFieldTransform_command_2eproto.base);
  return *internal_default_instance();
}


void VirtualFieldTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.VirtualFieldTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&a11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offsety_) -
        reinterpret_cast<char*>(&a11_)) + sizeof(offsety_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualFieldTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_a11(&has_bits);
          a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_a12(&has_bits);
          a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float a21 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_a21(&has_bits);
          a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float a22 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_a22(&has_bits);
          a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offsetX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_offsetx(&has_bits);
          offsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offsetY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_offsety(&has_bits);
          offsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualFieldTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.VirtualFieldTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float a11 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_a11(), target);
  }

  // required float a12 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_a12(), target);
  }

  // required float a21 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a21(), target);
  }

  // required float a22 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a22(), target);
  }

  // required float offsetX = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_offsetx(), target);
  }

  // required float offsetY = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_offsety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.VirtualFieldTransform)
  return target;
}

size_t VirtualFieldTransform::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:amun.VirtualFieldTransform)
  size_t total_size = 0;

  if (_internal_has_a11()) {
    // required float a11 = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_a12()) {
    // required float a12 = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_a21()) {
    // required float a21 = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_a22()) {
    // required float a22 = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_offsetx()) {
    // required float offsetX = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_offsety()) {
    // required float offsetY = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t VirtualFieldTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.VirtualFieldTransform)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float a11 = 1;
    total_size += 1 + 4;

    // required float a12 = 2;
    total_size += 1 + 4;

    // required float a21 = 3;
    total_size += 1 + 4;

    // required float a22 = 4;
    total_size += 1 + 4;

    // required float offsetX = 5;
    total_size += 1 + 4;

    // required float offsetY = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualFieldTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.VirtualFieldTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualFieldTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualFieldTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.VirtualFieldTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.VirtualFieldTransform)
    MergeFrom(*source);
  }
}

void VirtualFieldTransform::MergeFrom(const VirtualFieldTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.VirtualFieldTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      a11_ = from.a11_;
    }
    if (cached_has_bits & 0x00000002u) {
      a12_ = from.a12_;
    }
    if (cached_has_bits & 0x00000004u) {
      a21_ = from.a21_;
    }
    if (cached_has_bits & 0x00000008u) {
      a22_ = from.a22_;
    }
    if (cached_has_bits & 0x00000010u) {
      offsetx_ = from.offsetx_;
    }
    if (cached_has_bits & 0x00000020u) {
      offsety_ = from.offsety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VirtualFieldTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.VirtualFieldTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualFieldTransform::CopyFrom(const VirtualFieldTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.VirtualFieldTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualFieldTransform::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VirtualFieldTransform::InternalSwap(VirtualFieldTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualFieldTransform, offsety_)
      + sizeof(VirtualFieldTransform::offsety_)
      - PROTOBUF_FIELD_OFFSET(VirtualFieldTransform, a11_)>(
          reinterpret_cast<char*>(&a11_),
          reinterpret_cast<char*>(&other->a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualFieldTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandTracking::InitAsDefaultInstance() {
  ::amun::_CommandTracking_default_instance_._instance.get_mutable()->aoi_ = const_cast< ::world::TrackingAOI*>(
      ::world::TrackingAOI::internal_default_instance());
  ::amun::_CommandTracking_default_instance_._instance.get_mutable()->field_transform_ = const_cast< ::amun::VirtualFieldTransform*>(
      ::amun::VirtualFieldTransform::internal_default_instance());
  ::amun::_CommandTracking_default_instance_._instance.get_mutable()->virtual_geometry_ = const_cast< ::world::Geometry*>(
      ::world::Geometry::internal_default_instance());
  ::amun::_CommandTracking_default_instance_._instance.get_mutable()->ball_model_ = const_cast< ::world::BallModel*>(
      ::world::BallModel::internal_default_instance());
}
class CommandTracking::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTracking>()._has_bits_);
  static void set_has_aoi_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::world::TrackingAOI& aoi(const CommandTracking* msg);
  static void set_has_aoi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_system_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_virtual_field(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::amun::VirtualFieldTransform& field_transform(const CommandTracking* msg);
  static void set_has_field_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::world::Geometry& virtual_geometry(const CommandTracking* msg);
  static void set_has_virtual_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracking_replay_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::world::BallModel& ball_model(const CommandTracking* msg);
  static void set_has_ball_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::world::TrackingAOI&
CommandTracking::_Internal::aoi(const CommandTracking* msg) {
  return *msg->aoi_;
}
const ::amun::VirtualFieldTransform&
CommandTracking::_Internal::field_transform(const CommandTracking* msg) {
  return *msg->field_transform_;
}
const ::world::Geometry&
CommandTracking::_Internal::virtual_geometry(const CommandTracking* msg) {
  return *msg->virtual_geometry_;
}
const ::world::BallModel&
CommandTracking::_Internal::ball_model(const CommandTracking* msg) {
  return *msg->ball_model_;
}
void CommandTracking::clear_aoi() {
  if (aoi_ != nullptr) aoi_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandTracking::clear_virtual_geometry() {
  if (virtual_geometry_ != nullptr) virtual_geometry_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTracking::clear_ball_model() {
  if (ball_model_ != nullptr) ball_model_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandTracking::CommandTracking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandTracking)
}
CommandTracking::CommandTracking(const CommandTracking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aoi()) {
    aoi_ = new ::world::TrackingAOI(*from.aoi_);
  } else {
    aoi_ = nullptr;
  }
  if (from._internal_has_field_transform()) {
    field_transform_ = new ::amun::VirtualFieldTransform(*from.field_transform_);
  } else {
    field_transform_ = nullptr;
  }
  if (from._internal_has_virtual_geometry()) {
    virtual_geometry_ = new ::world::Geometry(*from.virtual_geometry_);
  } else {
    virtual_geometry_ = nullptr;
  }
  if (from._internal_has_ball_model()) {
    ball_model_ = new ::world::BallModel(*from.ball_model_);
  } else {
    ball_model_ = nullptr;
  }
  ::memcpy(&system_delay_, &from.system_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracking_replay_enabled_) -
    reinterpret_cast<char*>(&system_delay_)) + sizeof(tracking_replay_enabled_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandTracking)
}

void CommandTracking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandTracking_command_2eproto.base);
  ::memset(&aoi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_replay_enabled_) -
      reinterpret_cast<char*>(&aoi_)) + sizeof(tracking_replay_enabled_));
}

CommandTracking::~CommandTracking() {
  // @@protoc_insertion_point(destructor:amun.CommandTracking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandTracking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aoi_;
  if (this != internal_default_instance()) delete field_transform_;
  if (this != internal_default_instance()) delete virtual_geometry_;
  if (this != internal_default_instance()) delete ball_model_;
}

void CommandTracking::ArenaDtor(void* object) {
  CommandTracking* _this = reinterpret_cast< CommandTracking* >(object);
  (void)_this;
}
void CommandTracking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTracking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandTracking& CommandTracking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandTracking_command_2eproto.base);
  return *internal_default_instance();
}


void CommandTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(aoi_ != nullptr);
      aoi_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_transform_ != nullptr);
      field_transform_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(virtual_geometry_ != nullptr);
      virtual_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ball_model_ != nullptr);
      ball_model_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&system_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_virtual_field_) -
        reinterpret_cast<char*>(&system_delay_)) + sizeof(enable_virtual_field_));
  }
  tracking_replay_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTracking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool aoi_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_aoi_enabled(&has_bits);
          aoi_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.TrackingAOI aoi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aoi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_system_delay(&has_bits);
          system_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reset(&has_bits);
          reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_virtual_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_virtual_field(&has_bits);
          enable_virtual_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.VirtualFieldTransform field_transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.Geometry virtual_geometry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tracking_replay_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tracking_replay_enabled(&has_bits);
          tracking_replay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .world.BallModel ball_model = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTracking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandTracking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool aoi_enabled = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aoi_enabled(), target);
  }

  // optional .world.TrackingAOI aoi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::aoi(this), target, stream);
  }

  // optional int64 system_delay = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_system_delay(), target);
  }

  // optional bool reset = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reset(), target);
  }

  // optional bool enable_virtual_field = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_virtual_field(), target);
  }

  // optional .amun.VirtualFieldTransform field_transform = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::field_transform(this), target, stream);
  }

  // optional .world.Geometry virtual_geometry = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::virtual_geometry(this), target, stream);
  }

  // optional bool tracking_replay_enabled = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_tracking_replay_enabled(), target);
  }

  // optional .world.BallModel ball_model = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ball_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandTracking)
  return target;
}

size_t CommandTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandTracking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .world.TrackingAOI aoi = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aoi_);
    }

    // optional .amun.VirtualFieldTransform field_transform = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_transform_);
    }

    // optional .world.Geometry virtual_geometry = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtual_geometry_);
    }

    // optional .world.BallModel ball_model = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ball_model_);
    }

    // optional int64 system_delay = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_system_delay());
    }

    // optional bool aoi_enabled = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool reset = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_virtual_field = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool tracking_replay_enabled = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandTracking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandTracking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandTracking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandTracking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandTracking)
    MergeFrom(*source);
  }
}

void CommandTracking::MergeFrom(const CommandTracking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_aoi()->::world::TrackingAOI::MergeFrom(from._internal_aoi());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_field_transform()->::amun::VirtualFieldTransform::MergeFrom(from._internal_field_transform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_virtual_geometry()->::world::Geometry::MergeFrom(from._internal_virtual_geometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ball_model()->::world::BallModel::MergeFrom(from._internal_ball_model());
    }
    if (cached_has_bits & 0x00000010u) {
      system_delay_ = from.system_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      aoi_enabled_ = from.aoi_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      reset_ = from.reset_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_virtual_field_ = from.enable_virtual_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tracking_replay_enabled(from._internal_tracking_replay_enabled());
  }
}

void CommandTracking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandTracking::CopyFrom(const CommandTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTracking::IsInitialized() const {
  if (_internal_has_aoi()) {
    if (!aoi_->IsInitialized()) return false;
  }
  if (_internal_has_field_transform()) {
    if (!field_transform_->IsInitialized()) return false;
  }
  if (_internal_has_virtual_geometry()) {
    if (!virtual_geometry_->IsInitialized()) return false;
  }
  return true;
}

void CommandTracking::InternalSwap(CommandTracking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTracking, tracking_replay_enabled_)
      + sizeof(CommandTracking::tracking_replay_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandTracking, aoi_)>(
          reinterpret_cast<char*>(&aoi_),
          reinterpret_cast<char*>(&other->aoi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTracking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandStrategyChangeOption::InitAsDefaultInstance() {
}
class CommandStrategyChangeOption::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStrategyChangeOption>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CommandStrategyChangeOption::CommandStrategyChangeOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandStrategyChangeOption)
}
CommandStrategyChangeOption::CommandStrategyChangeOption(const CommandStrategyChangeOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:amun.CommandStrategyChangeOption)
}

void CommandStrategyChangeOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandStrategyChangeOption_command_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = false;
}

CommandStrategyChangeOption::~CommandStrategyChangeOption() {
  // @@protoc_insertion_point(destructor:amun.CommandStrategyChangeOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandStrategyChangeOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandStrategyChangeOption::ArenaDtor(void* object) {
  CommandStrategyChangeOption* _this = reinterpret_cast< CommandStrategyChangeOption* >(object);
  (void)_this;
}
void CommandStrategyChangeOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStrategyChangeOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandStrategyChangeOption& CommandStrategyChangeOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandStrategyChangeOption_command_2eproto.base);
  return *internal_default_instance();
}


void CommandStrategyChangeOption::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandStrategyChangeOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStrategyChangeOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandStrategyChangeOption.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStrategyChangeOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandStrategyChangeOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandStrategyChangeOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandStrategyChangeOption)
  return target;
}

size_t CommandStrategyChangeOption::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:amun.CommandStrategyChangeOption)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required bool value = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandStrategyChangeOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandStrategyChangeOption)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required bool value = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStrategyChangeOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandStrategyChangeOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStrategyChangeOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandStrategyChangeOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandStrategyChangeOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandStrategyChangeOption)
    MergeFrom(*source);
  }
}

void CommandStrategyChangeOption::MergeFrom(const CommandStrategyChangeOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandStrategyChangeOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandStrategyChangeOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandStrategyChangeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStrategyChangeOption::CopyFrom(const CommandStrategyChangeOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandStrategyChangeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStrategyChangeOption::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandStrategyChangeOption::InternalSwap(CommandStrategyChangeOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStrategyChangeOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandAmun::InitAsDefaultInstance() {
  ::amun::_CommandAmun_default_instance_._instance.get_mutable()->change_option_ = const_cast< ::amun::CommandStrategyChangeOption*>(
      ::amun::CommandStrategyChangeOption::internal_default_instance());
}
class CommandAmun::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAmun>()._has_bits_);
  static void set_has_vision_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referee_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracker_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::amun::CommandStrategyChangeOption& change_option(const CommandAmun* msg);
  static void set_has_change_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::amun::CommandStrategyChangeOption&
CommandAmun::_Internal::change_option(const CommandAmun* msg) {
  return *msg->change_option_;
}
CommandAmun::CommandAmun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandAmun)
}
CommandAmun::CommandAmun(const CommandAmun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_change_option()) {
    change_option_ = new ::amun::CommandStrategyChangeOption(*from.change_option_);
  } else {
    change_option_ = nullptr;
  }
  ::memcpy(&vision_port_, &from.vision_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracker_port_) -
    reinterpret_cast<char*>(&vision_port_)) + sizeof(tracker_port_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandAmun)
}

void CommandAmun::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandAmun_command_2eproto.base);
  ::memset(&change_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracker_port_) -
      reinterpret_cast<char*>(&change_option_)) + sizeof(tracker_port_));
}

CommandAmun::~CommandAmun() {
  // @@protoc_insertion_point(destructor:amun.CommandAmun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAmun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete change_option_;
}

void CommandAmun::ArenaDtor(void* object) {
  CommandAmun* _this = reinterpret_cast< CommandAmun* >(object);
  (void)_this;
}
void CommandAmun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAmun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandAmun& CommandAmun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandAmun_command_2eproto.base);
  return *internal_default_instance();
}


void CommandAmun::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandAmun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(change_option_ != nullptr);
    change_option_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&vision_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tracker_port_) -
        reinterpret_cast<char*>(&vision_port_)) + sizeof(tracker_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAmun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 vision_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vision_port(&has_bits);
          vision_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 referee_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_referee_port(&has_bits);
          referee_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategyChangeOption change_option = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tracker_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tracker_port(&has_bits);
          tracker_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAmun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandAmun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vision_port = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vision_port(), target);
  }

  // optional uint32 referee_port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_referee_port(), target);
  }

  // optional .amun.CommandStrategyChangeOption change_option = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::change_option(this), target, stream);
  }

  // optional uint32 tracker_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tracker_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandAmun)
  return target;
}

size_t CommandAmun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandAmun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .amun.CommandStrategyChangeOption change_option = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_option_);
    }

    // optional uint32 vision_port = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vision_port());
    }

    // optional uint32 referee_port = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_referee_port());
    }

    // optional uint32 tracker_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tracker_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAmun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandAmun)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAmun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAmun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandAmun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandAmun)
    MergeFrom(*source);
  }
}

void CommandAmun::MergeFrom(const CommandAmun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandAmun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_change_option()->::amun::CommandStrategyChangeOption::MergeFrom(from._internal_change_option());
    }
    if (cached_has_bits & 0x00000002u) {
      vision_port_ = from.vision_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      referee_port_ = from.referee_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracker_port_ = from.tracker_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandAmun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandAmun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAmun::CopyFrom(const CommandAmun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandAmun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAmun::IsInitialized() const {
  if (_internal_has_change_option()) {
    if (!change_option_->IsInitialized()) return false;
  }
  return true;
}

void CommandAmun::InternalSwap(CommandAmun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAmun, tracker_port_)
      + sizeof(CommandAmun::tracker_port_)
      - PROTOBUF_FIELD_OFFSET(CommandAmun, change_option_)>(
          reinterpret_cast<char*>(&change_option_),
          reinterpret_cast<char*>(&other->change_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAmun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandDebuggerInputDisable::InitAsDefaultInstance() {
}
class CommandDebuggerInputDisable::_Internal {
 public:
};

CommandDebuggerInputDisable::CommandDebuggerInputDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandDebuggerInputDisable)
}
CommandDebuggerInputDisable::CommandDebuggerInputDisable(const CommandDebuggerInputDisable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.CommandDebuggerInputDisable)
}

void CommandDebuggerInputDisable::SharedCtor() {
}

CommandDebuggerInputDisable::~CommandDebuggerInputDisable() {
  // @@protoc_insertion_point(destructor:amun.CommandDebuggerInputDisable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDebuggerInputDisable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandDebuggerInputDisable::ArenaDtor(void* object) {
  CommandDebuggerInputDisable* _this = reinterpret_cast< CommandDebuggerInputDisable* >(object);
  (void)_this;
}
void CommandDebuggerInputDisable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDebuggerInputDisable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandDebuggerInputDisable& CommandDebuggerInputDisable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandDebuggerInputDisable_command_2eproto.base);
  return *internal_default_instance();
}


void CommandDebuggerInputDisable::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandDebuggerInputDisable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDebuggerInputDisable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDebuggerInputDisable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandDebuggerInputDisable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandDebuggerInputDisable)
  return target;
}

size_t CommandDebuggerInputDisable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandDebuggerInputDisable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDebuggerInputDisable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandDebuggerInputDisable)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDebuggerInputDisable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDebuggerInputDisable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandDebuggerInputDisable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandDebuggerInputDisable)
    MergeFrom(*source);
  }
}

void CommandDebuggerInputDisable::MergeFrom(const CommandDebuggerInputDisable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandDebuggerInputDisable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CommandDebuggerInputDisable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandDebuggerInputDisable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDebuggerInputDisable::CopyFrom(const CommandDebuggerInputDisable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandDebuggerInputDisable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDebuggerInputDisable::IsInitialized() const {
  return true;
}

void CommandDebuggerInputDisable::InternalSwap(CommandDebuggerInputDisable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDebuggerInputDisable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandDebuggerInputLine::InitAsDefaultInstance() {
}
class CommandDebuggerInputLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDebuggerInputLine>()._has_bits_);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommandDebuggerInputLine::CommandDebuggerInputLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandDebuggerInputLine)
}
CommandDebuggerInputLine::CommandDebuggerInputLine(const CommandDebuggerInputLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_line()) {
    line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:amun.CommandDebuggerInputLine)
}

void CommandDebuggerInputLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandDebuggerInputLine_command_2eproto.base);
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandDebuggerInputLine::~CommandDebuggerInputLine() {
  // @@protoc_insertion_point(destructor:amun.CommandDebuggerInputLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDebuggerInputLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandDebuggerInputLine::ArenaDtor(void* object) {
  CommandDebuggerInputLine* _this = reinterpret_cast< CommandDebuggerInputLine* >(object);
  (void)_this;
}
void CommandDebuggerInputLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDebuggerInputLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandDebuggerInputLine& CommandDebuggerInputLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandDebuggerInputLine_command_2eproto.base);
  return *internal_default_instance();
}


void CommandDebuggerInputLine::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandDebuggerInputLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    line_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDebuggerInputLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandDebuggerInputLine.line");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDebuggerInputLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandDebuggerInputLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string line = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandDebuggerInputLine.line");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandDebuggerInputLine)
  return target;
}

size_t CommandDebuggerInputLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandDebuggerInputLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string line = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDebuggerInputLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandDebuggerInputLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDebuggerInputLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDebuggerInputLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandDebuggerInputLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandDebuggerInputLine)
    MergeFrom(*source);
  }
}

void CommandDebuggerInputLine::MergeFrom(const CommandDebuggerInputLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandDebuggerInputLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_line()) {
    _internal_set_line(from._internal_line());
  }
}

void CommandDebuggerInputLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandDebuggerInputLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDebuggerInputLine::CopyFrom(const CommandDebuggerInputLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandDebuggerInputLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDebuggerInputLine::IsInitialized() const {
  return true;
}

void CommandDebuggerInputLine::InternalSwap(CommandDebuggerInputLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_.Swap(&other->line_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDebuggerInputLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandDebuggerInput::InitAsDefaultInstance() {
  ::amun::_CommandDebuggerInput_default_instance_._instance.get_mutable()->disable_ = const_cast< ::amun::CommandDebuggerInputDisable*>(
      ::amun::CommandDebuggerInputDisable::internal_default_instance());
  ::amun::_CommandDebuggerInput_default_instance_._instance.get_mutable()->queue_line_ = const_cast< ::amun::CommandDebuggerInputLine*>(
      ::amun::CommandDebuggerInputLine::internal_default_instance());
}
class CommandDebuggerInput::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDebuggerInput>()._has_bits_);
  static void set_has_strategy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::amun::CommandDebuggerInputDisable& disable(const CommandDebuggerInput* msg);
  static void set_has_disable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::amun::CommandDebuggerInputLine& queue_line(const CommandDebuggerInput* msg);
  static void set_has_queue_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::amun::CommandDebuggerInputDisable&
CommandDebuggerInput::_Internal::disable(const CommandDebuggerInput* msg) {
  return *msg->disable_;
}
const ::amun::CommandDebuggerInputLine&
CommandDebuggerInput::_Internal::queue_line(const CommandDebuggerInput* msg) {
  return *msg->queue_line_;
}
CommandDebuggerInput::CommandDebuggerInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandDebuggerInput)
}
CommandDebuggerInput::CommandDebuggerInput(const CommandDebuggerInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_disable()) {
    disable_ = new ::amun::CommandDebuggerInputDisable(*from.disable_);
  } else {
    disable_ = nullptr;
  }
  if (from._internal_has_queue_line()) {
    queue_line_ = new ::amun::CommandDebuggerInputLine(*from.queue_line_);
  } else {
    queue_line_ = nullptr;
  }
  strategy_type_ = from.strategy_type_;
  // @@protoc_insertion_point(copy_constructor:amun.CommandDebuggerInput)
}

void CommandDebuggerInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandDebuggerInput_command_2eproto.base);
  ::memset(&disable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategy_type_) -
      reinterpret_cast<char*>(&disable_)) + sizeof(strategy_type_));
}

CommandDebuggerInput::~CommandDebuggerInput() {
  // @@protoc_insertion_point(destructor:amun.CommandDebuggerInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDebuggerInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete disable_;
  if (this != internal_default_instance()) delete queue_line_;
}

void CommandDebuggerInput::ArenaDtor(void* object) {
  CommandDebuggerInput* _this = reinterpret_cast< CommandDebuggerInput* >(object);
  (void)_this;
}
void CommandDebuggerInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDebuggerInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandDebuggerInput& CommandDebuggerInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandDebuggerInput_command_2eproto.base);
  return *internal_default_instance();
}


void CommandDebuggerInput::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandDebuggerInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(disable_ != nullptr);
      disable_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(queue_line_ != nullptr);
      queue_line_->Clear();
    }
  }
  strategy_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDebuggerInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .amun.DebuggerInputTarget strategy_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::amun::DebuggerInputTarget_IsValid(val))) {
            _internal_set_strategy_type(static_cast<::amun::DebuggerInputTarget>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandDebuggerInputDisable disable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_disable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandDebuggerInputLine queue_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDebuggerInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandDebuggerInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .amun.DebuggerInputTarget strategy_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_strategy_type(), target);
  }

  // optional .amun.CommandDebuggerInputDisable disable = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::disable(this), target, stream);
  }

  // optional .amun.CommandDebuggerInputLine queue_line = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::queue_line(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandDebuggerInput)
  return target;
}

size_t CommandDebuggerInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandDebuggerInput)
  size_t total_size = 0;

  // required .amun.DebuggerInputTarget strategy_type = 1;
  if (_internal_has_strategy_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .amun.CommandDebuggerInputDisable disable = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disable_);
    }

    // optional .amun.CommandDebuggerInputLine queue_line = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *queue_line_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDebuggerInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandDebuggerInput)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDebuggerInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDebuggerInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandDebuggerInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandDebuggerInput)
    MergeFrom(*source);
  }
}

void CommandDebuggerInput::MergeFrom(const CommandDebuggerInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandDebuggerInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_disable()->::amun::CommandDebuggerInputDisable::MergeFrom(from._internal_disable());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_queue_line()->::amun::CommandDebuggerInputLine::MergeFrom(from._internal_queue_line());
    }
    if (cached_has_bits & 0x00000004u) {
      strategy_type_ = from.strategy_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandDebuggerInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandDebuggerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDebuggerInput::CopyFrom(const CommandDebuggerInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandDebuggerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDebuggerInput::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandDebuggerInput::InternalSwap(CommandDebuggerInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDebuggerInput, strategy_type_)
      + sizeof(CommandDebuggerInput::strategy_type_)
      - PROTOBUF_FIELD_OFFSET(CommandDebuggerInput, disable_)>(
          reinterpret_cast<char*>(&disable_),
          reinterpret_cast<char*>(&other->disable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDebuggerInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseSimulatorCommand::InitAsDefaultInstance() {
}
class PauseSimulatorCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<PauseSimulatorCommand>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pause(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_toggle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

PauseSimulatorCommand::PauseSimulatorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.PauseSimulatorCommand)
}
PauseSimulatorCommand::PauseSimulatorCommand(const PauseSimulatorCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pause_, &from.pause_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&pause_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:amun.PauseSimulatorCommand)
}

void PauseSimulatorCommand::SharedCtor() {
  ::memset(&pause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toggle_) -
      reinterpret_cast<char*>(&pause_)) + sizeof(toggle_));
  reason_ = 1;
}

PauseSimulatorCommand::~PauseSimulatorCommand() {
  // @@protoc_insertion_point(destructor:amun.PauseSimulatorCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseSimulatorCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PauseSimulatorCommand::ArenaDtor(void* object) {
  PauseSimulatorCommand* _this = reinterpret_cast< PauseSimulatorCommand* >(object);
  (void)_this;
}
void PauseSimulatorCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseSimulatorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseSimulatorCommand& PauseSimulatorCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseSimulatorCommand_command_2eproto.base);
  return *internal_default_instance();
}


void PauseSimulatorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.PauseSimulatorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toggle_) -
      reinterpret_cast<char*>(&pause_)) + sizeof(toggle_));
  reason_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseSimulatorCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .amun.PauseSimulatorReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::amun::PauseSimulatorReason_IsValid(val))) {
            _internal_set_reason(static_cast<::amun::PauseSimulatorReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool pause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pause(&has_bits);
          pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool toggle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_toggle(&has_bits);
          toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseSimulatorCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.PauseSimulatorCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .amun.PauseSimulatorReason reason = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // optional bool pause = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pause(), target);
  }

  // optional bool toggle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_toggle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.PauseSimulatorCommand)
  return target;
}

size_t PauseSimulatorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.PauseSimulatorCommand)
  size_t total_size = 0;

  // required .amun.PauseSimulatorReason reason = 1;
  if (_internal_has_reason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool pause = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool toggle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseSimulatorCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.PauseSimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseSimulatorCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseSimulatorCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.PauseSimulatorCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.PauseSimulatorCommand)
    MergeFrom(*source);
  }
}

void PauseSimulatorCommand::MergeFrom(const PauseSimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.PauseSimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pause_ = from.pause_;
    }
    if (cached_has_bits & 0x00000002u) {
      toggle_ = from.toggle_;
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PauseSimulatorCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.PauseSimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseSimulatorCommand::CopyFrom(const PauseSimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.PauseSimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseSimulatorCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PauseSimulatorCommand::InternalSwap(PauseSimulatorCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseSimulatorCommand, toggle_)
      + sizeof(PauseSimulatorCommand::toggle_)
      - PROTOBUF_FIELD_OFFSET(PauseSimulatorCommand, pause_)>(
          reinterpret_cast<char*>(&pause_),
          reinterpret_cast<char*>(&other->pause_));
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseSimulatorCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandReplay::InitAsDefaultInstance() {
  ::amun::_CommandReplay_default_instance_._instance.get_mutable()->blue_strategy_ = const_cast< ::amun::CommandStrategy*>(
      ::amun::CommandStrategy::internal_default_instance());
  ::amun::_CommandReplay_default_instance_._instance.get_mutable()->yellow_strategy_ = const_cast< ::amun::CommandStrategy*>(
      ::amun::CommandStrategy::internal_default_instance());
}
class CommandReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplay>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_blue_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::amun::CommandStrategy& blue_strategy(const CommandReplay* msg);
  static void set_has_blue_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_yellow_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::amun::CommandStrategy& yellow_strategy(const CommandReplay* msg);
  static void set_has_yellow_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::amun::CommandStrategy&
CommandReplay::_Internal::blue_strategy(const CommandReplay* msg) {
  return *msg->blue_strategy_;
}
const ::amun::CommandStrategy&
CommandReplay::_Internal::yellow_strategy(const CommandReplay* msg) {
  return *msg->yellow_strategy_;
}
CommandReplay::CommandReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandReplay)
}
CommandReplay::CommandReplay(const CommandReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blue_strategy()) {
    blue_strategy_ = new ::amun::CommandStrategy(*from.blue_strategy_);
  } else {
    blue_strategy_ = nullptr;
  }
  if (from._internal_has_yellow_strategy()) {
    yellow_strategy_ = new ::amun::CommandStrategy(*from.yellow_strategy_);
  } else {
    yellow_strategy_ = nullptr;
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_yellow_strategy_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(enable_yellow_strategy_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandReplay)
}

void CommandReplay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandReplay_command_2eproto.base);
  ::memset(&blue_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_yellow_strategy_) -
      reinterpret_cast<char*>(&blue_strategy_)) + sizeof(enable_yellow_strategy_));
}

CommandReplay::~CommandReplay() {
  // @@protoc_insertion_point(destructor:amun.CommandReplay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blue_strategy_;
  if (this != internal_default_instance()) delete yellow_strategy_;
}

void CommandReplay::ArenaDtor(void* object) {
  CommandReplay* _this = reinterpret_cast< CommandReplay* >(object);
  (void)_this;
}
void CommandReplay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandReplay& CommandReplay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandReplay_command_2eproto.base);
  return *internal_default_instance();
}


void CommandReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandReplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(blue_strategy_ != nullptr);
      blue_strategy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(yellow_strategy_ != nullptr);
      yellow_strategy_->Clear();
    }
  }
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_yellow_strategy_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(enable_yellow_strategy_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_blue_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_blue_strategy(&has_bits);
          enable_blue_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategy blue_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_yellow_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_yellow_strategy(&has_bits);
          enable_yellow_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategy yellow_strategy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandReplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional bool enable_blue_strategy = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_blue_strategy(), target);
  }

  // optional .amun.CommandStrategy blue_strategy = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::blue_strategy(this), target, stream);
  }

  // optional bool enable_yellow_strategy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_yellow_strategy(), target);
  }

  // optional .amun.CommandStrategy yellow_strategy = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::yellow_strategy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandReplay)
  return target;
}

size_t CommandReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandReplay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .amun.CommandStrategy blue_strategy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blue_strategy_);
    }

    // optional .amun.CommandStrategy yellow_strategy = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yellow_strategy_);
    }

    // optional bool enable = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_blue_strategy = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_yellow_strategy = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReplay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReplay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReplay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandReplay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandReplay)
    MergeFrom(*source);
  }
}

void CommandReplay::MergeFrom(const CommandReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_blue_strategy()->::amun::CommandStrategy::MergeFrom(from._internal_blue_strategy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_yellow_strategy()->::amun::CommandStrategy::MergeFrom(from._internal_yellow_strategy());
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_blue_strategy_ = from.enable_blue_strategy_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_yellow_strategy_ = from.enable_yellow_strategy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandReplay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplay::CopyFrom(const CommandReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplay::IsInitialized() const {
  if (_internal_has_blue_strategy()) {
    if (!blue_strategy_->IsInitialized()) return false;
  }
  if (_internal_has_yellow_strategy()) {
    if (!yellow_strategy_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplay::InternalSwap(CommandReplay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplay, enable_yellow_strategy_)
      + sizeof(CommandReplay::enable_yellow_strategy_)
      - PROTOBUF_FIELD_OFFSET(CommandReplay, blue_strategy_)>(
          reinterpret_cast<char*>(&blue_strategy_),
          reinterpret_cast<char*>(&other->blue_strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Flag::InitAsDefaultInstance() {
}
class Flag::_Internal {
 public:
};

Flag::Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.Flag)
}
Flag::Flag(const Flag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amun.Flag)
}

void Flag::SharedCtor() {
}

Flag::~Flag() {
  // @@protoc_insertion_point(destructor:amun.Flag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Flag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Flag::ArenaDtor(void* object) {
  Flag* _this = reinterpret_cast< Flag* >(object);
  (void)_this;
}
void Flag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Flag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Flag& Flag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Flag_command_2eproto.base);
  return *internal_default_instance();
}


void Flag::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Flag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.Flag)
  return target;
}

size_t Flag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.Flag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Flag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  const Flag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Flag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.Flag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.Flag)
    MergeFrom(*source);
  }
}

void Flag::MergeFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Flag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flag::CopyFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flag::IsInitialized() const {
  return true;
}

void Flag::InternalSwap(Flag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Flag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandPlayback::InitAsDefaultInstance() {
  ::amun::_CommandPlayback_default_instance_._instance.get_mutable()->toggle_paused_ = const_cast< ::amun::Flag*>(
      ::amun::Flag::internal_default_instance());
  ::amun::_CommandPlayback_default_instance_._instance.get_mutable()->log_path_ = const_cast< ::logfile::LogRequest*>(
      ::logfile::LogRequest::internal_default_instance());
  ::amun::_CommandPlayback_default_instance_._instance.get_mutable()->instant_replay_ = const_cast< ::amun::Flag*>(
      ::amun::Flag::internal_default_instance());
  ::amun::_CommandPlayback_default_instance_._instance.get_mutable()->get_uid_ = const_cast< ::amun::Flag*>(
      ::amun::Flag::internal_default_instance());
}
class CommandPlayback::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPlayback>()._has_bits_);
  static void set_has_seek_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seek_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_seek_time_backwards(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_playback_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::amun::Flag& toggle_paused(const CommandPlayback* msg);
  static void set_has_toggle_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_run_playback(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::logfile::LogRequest& log_path(const CommandPlayback* msg);
  static void set_has_log_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::amun::Flag& instant_replay(const CommandPlayback* msg);
  static void set_has_instant_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_export_vision_log(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::amun::Flag& get_uid(const CommandPlayback* msg);
  static void set_has_get_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_find_logfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playback_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::amun::Flag&
CommandPlayback::_Internal::toggle_paused(const CommandPlayback* msg) {
  return *msg->toggle_paused_;
}
const ::logfile::LogRequest&
CommandPlayback::_Internal::log_path(const CommandPlayback* msg) {
  return *msg->log_path_;
}
const ::amun::Flag&
CommandPlayback::_Internal::instant_replay(const CommandPlayback* msg) {
  return *msg->instant_replay_;
}
const ::amun::Flag&
CommandPlayback::_Internal::get_uid(const CommandPlayback* msg) {
  return *msg->get_uid_;
}
void CommandPlayback::clear_log_path() {
  if (log_path_ != nullptr) log_path_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandPlayback::CommandPlayback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandPlayback)
}
CommandPlayback::CommandPlayback(const CommandPlayback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  export_vision_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_export_vision_log()) {
    export_vision_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_export_vision_log(),
      GetArena());
  }
  find_logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_find_logfile()) {
    find_logfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_find_logfile(),
      GetArena());
  }
  if (from._internal_has_toggle_paused()) {
    toggle_paused_ = new ::amun::Flag(*from.toggle_paused_);
  } else {
    toggle_paused_ = nullptr;
  }
  if (from._internal_has_log_path()) {
    log_path_ = new ::logfile::LogRequest(*from.log_path_);
  } else {
    log_path_ = nullptr;
  }
  if (from._internal_has_instant_replay()) {
    instant_replay_ = new ::amun::Flag(*from.instant_replay_);
  } else {
    instant_replay_ = nullptr;
  }
  if (from._internal_has_get_uid()) {
    get_uid_ = new ::amun::Flag(*from.get_uid_);
  } else {
    get_uid_ = nullptr;
  }
  ::memcpy(&seek_time_, &from.seek_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&playback_limit_) -
    reinterpret_cast<char*>(&seek_time_)) + sizeof(playback_limit_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandPlayback)
}

void CommandPlayback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandPlayback_command_2eproto.base);
  export_vision_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  find_logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&toggle_paused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playback_limit_) -
      reinterpret_cast<char*>(&toggle_paused_)) + sizeof(playback_limit_));
}

CommandPlayback::~CommandPlayback() {
  // @@protoc_insertion_point(destructor:amun.CommandPlayback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandPlayback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  export_vision_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  find_logfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete toggle_paused_;
  if (this != internal_default_instance()) delete log_path_;
  if (this != internal_default_instance()) delete instant_replay_;
  if (this != internal_default_instance()) delete get_uid_;
}

void CommandPlayback::ArenaDtor(void* object) {
  CommandPlayback* _this = reinterpret_cast< CommandPlayback* >(object);
  (void)_this;
}
void CommandPlayback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandPlayback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandPlayback& CommandPlayback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandPlayback_command_2eproto.base);
  return *internal_default_instance();
}


void CommandPlayback::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandPlayback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      export_vision_log_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      find_logfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(toggle_paused_ != nullptr);
      toggle_paused_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(log_path_ != nullptr);
      log_path_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(instant_replay_ != nullptr);
      instant_replay_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(get_uid_ != nullptr);
      get_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&seek_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seek_packet_) -
        reinterpret_cast<char*>(&seek_time_)) + sizeof(seek_packet_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&seek_time_backwards_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playback_limit_) -
        reinterpret_cast<char*>(&seek_time_backwards_)) + sizeof(playback_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPlayback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 seek_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seek_time(&has_bits);
          seek_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seek_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seek_packet(&has_bits);
          seek_packet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seek_time_backwards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seek_time_backwards(&has_bits);
          seek_time_backwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 playback_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_playback_speed(&has_bits);
          playback_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.Flag toggle_paused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_paused(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool run_playback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_run_playback(&has_bits);
          run_playback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .logfile.LogRequest log_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.Flag instant_replay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_instant_replay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string export_vision_log = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_export_vision_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandPlayback.export_vision_log");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.Flag get_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string find_logfile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_find_logfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandPlayback.find_logfile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 playback_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_playback_limit(&has_bits);
          playback_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPlayback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandPlayback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seek_time = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seek_time(), target);
  }

  // optional int32 seek_packet = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seek_packet(), target);
  }

  // optional int32 seek_time_backwards = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seek_time_backwards(), target);
  }

  // optional int32 playback_speed = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_playback_speed(), target);
  }

  // optional .amun.Flag toggle_paused = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::toggle_paused(this), target, stream);
  }

  // optional bool run_playback = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_run_playback(), target);
  }

  // optional .logfile.LogRequest log_path = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::log_path(this), target, stream);
  }

  // optional .amun.Flag instant_replay = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::instant_replay(this), target, stream);
  }

  // optional string export_vision_log = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_export_vision_log().data(), static_cast<int>(this->_internal_export_vision_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandPlayback.export_vision_log");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_export_vision_log(), target);
  }

  // optional .amun.Flag get_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_uid(this), target, stream);
  }

  // optional string find_logfile = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_find_logfile().data(), static_cast<int>(this->_internal_find_logfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandPlayback.find_logfile");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_find_logfile(), target);
  }

  // optional int32 playback_limit = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_playback_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandPlayback)
  return target;
}

size_t CommandPlayback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandPlayback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string export_vision_log = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_export_vision_log());
    }

    // optional string find_logfile = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_find_logfile());
    }

    // optional .amun.Flag toggle_paused = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggle_paused_);
    }

    // optional .logfile.LogRequest log_path = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_path_);
    }

    // optional .amun.Flag instant_replay = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instant_replay_);
    }

    // optional .amun.Flag get_uid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_uid_);
    }

    // optional int32 seek_time = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seek_time());
    }

    // optional int32 seek_packet = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seek_packet());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 seek_time_backwards = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seek_time_backwards());
    }

    // optional int32 playback_speed = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playback_speed());
    }

    // optional bool run_playback = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 playback_limit = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playback_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandPlayback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandPlayback)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandPlayback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandPlayback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandPlayback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandPlayback)
    MergeFrom(*source);
  }
}

void CommandPlayback::MergeFrom(const CommandPlayback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandPlayback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_export_vision_log(from._internal_export_vision_log());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_find_logfile(from._internal_find_logfile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_toggle_paused()->::amun::Flag::MergeFrom(from._internal_toggle_paused());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_log_path()->::logfile::LogRequest::MergeFrom(from._internal_log_path());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_instant_replay()->::amun::Flag::MergeFrom(from._internal_instant_replay());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_get_uid()->::amun::Flag::MergeFrom(from._internal_get_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      seek_time_ = from.seek_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      seek_packet_ = from.seek_packet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      seek_time_backwards_ = from.seek_time_backwards_;
    }
    if (cached_has_bits & 0x00000200u) {
      playback_speed_ = from.playback_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      run_playback_ = from.run_playback_;
    }
    if (cached_has_bits & 0x00000800u) {
      playback_limit_ = from.playback_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandPlayback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandPlayback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPlayback::CopyFrom(const CommandPlayback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandPlayback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPlayback::IsInitialized() const {
  if (_internal_has_log_path()) {
    if (!log_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandPlayback::InternalSwap(CommandPlayback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  export_vision_log_.Swap(&other->export_vision_log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  find_logfile_.Swap(&other->find_logfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPlayback, playback_limit_)
      + sizeof(CommandPlayback::playback_limit_)
      - PROTOBUF_FIELD_OFFSET(CommandPlayback, toggle_paused_)>(
          reinterpret_cast<char*>(&toggle_paused_),
          reinterpret_cast<char*>(&other->toggle_paused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPlayback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandRecord::InitAsDefaultInstance() {
  ::amun::_CommandRecord_default_instance_._instance.get_mutable()->save_backlog_ = const_cast< ::amun::Flag*>(
      ::amun::Flag::internal_default_instance());
}
class CommandRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRecord>()._has_bits_);
  static void set_has_use_logfile_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::amun::Flag& save_backlog(const CommandRecord* msg);
  static void set_has_save_backlog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_run_logging(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_for_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_request_backlog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_overwrite_record_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::amun::Flag&
CommandRecord::_Internal::save_backlog(const CommandRecord* msg) {
  return *msg->save_backlog_;
}
CommandRecord::CommandRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.CommandRecord)
}
CommandRecord::CommandRecord(const CommandRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  overwrite_record_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_overwrite_record_filename()) {
    overwrite_record_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_overwrite_record_filename(),
      GetArena());
  }
  if (from._internal_has_save_backlog()) {
    save_backlog_ = new ::amun::Flag(*from.save_backlog_);
  } else {
    save_backlog_ = nullptr;
  }
  ::memcpy(&use_logfile_location_, &from.use_logfile_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_backlog_) -
    reinterpret_cast<char*>(&use_logfile_location_)) + sizeof(request_backlog_));
  // @@protoc_insertion_point(copy_constructor:amun.CommandRecord)
}

void CommandRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandRecord_command_2eproto.base);
  overwrite_record_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&save_backlog_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_backlog_) -
      reinterpret_cast<char*>(&save_backlog_)) + sizeof(request_backlog_));
}

CommandRecord::~CommandRecord() {
  // @@protoc_insertion_point(destructor:amun.CommandRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  overwrite_record_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete save_backlog_;
}

void CommandRecord::ArenaDtor(void* object) {
  CommandRecord* _this = reinterpret_cast< CommandRecord* >(object);
  (void)_this;
}
void CommandRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandRecord& CommandRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandRecord_command_2eproto.base);
  return *internal_default_instance();
}


void CommandRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.CommandRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      overwrite_record_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(save_backlog_ != nullptr);
      save_backlog_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&use_logfile_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_backlog_) -
        reinterpret_cast<char*>(&use_logfile_location_)) + sizeof(request_backlog_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_logfile_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_logfile_location(&has_bits);
          use_logfile_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.Flag save_backlog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_backlog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool run_logging = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_run_logging(&has_bits);
          run_logging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool for_replay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_for_replay(&has_bits);
          for_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 request_backlog = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_request_backlog(&has_bits);
          request_backlog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string overwrite_record_filename = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_overwrite_record_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amun.CommandRecord.overwrite_record_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.CommandRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_logfile_location = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_logfile_location(), target);
  }

  // optional .amun.Flag save_backlog = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::save_backlog(this), target, stream);
  }

  // optional bool run_logging = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_run_logging(), target);
  }

  // optional bool for_replay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_for_replay(), target);
  }

  // optional int32 request_backlog = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_request_backlog(), target);
  }

  // optional string overwrite_record_filename = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_overwrite_record_filename().data(), static_cast<int>(this->_internal_overwrite_record_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "amun.CommandRecord.overwrite_record_filename");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_overwrite_record_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.CommandRecord)
  return target;
}

size_t CommandRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.CommandRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string overwrite_record_filename = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_overwrite_record_filename());
    }

    // optional .amun.Flag save_backlog = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_backlog_);
    }

    // optional bool use_logfile_location = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool run_logging = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool for_replay = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 request_backlog = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_request_backlog());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.CommandRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.CommandRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.CommandRecord)
    MergeFrom(*source);
  }
}

void CommandRecord::MergeFrom(const CommandRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.CommandRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_overwrite_record_filename(from._internal_overwrite_record_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_save_backlog()->::amun::Flag::MergeFrom(from._internal_save_backlog());
    }
    if (cached_has_bits & 0x00000004u) {
      use_logfile_location_ = from.use_logfile_location_;
    }
    if (cached_has_bits & 0x00000008u) {
      run_logging_ = from.run_logging_;
    }
    if (cached_has_bits & 0x00000010u) {
      for_replay_ = from.for_replay_;
    }
    if (cached_has_bits & 0x00000020u) {
      request_backlog_ = from.request_backlog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.CommandRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRecord::CopyFrom(const CommandRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.CommandRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRecord::IsInitialized() const {
  return true;
}

void CommandRecord::InternalSwap(CommandRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  overwrite_record_filename_.Swap(&other->overwrite_record_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRecord, request_backlog_)
      + sizeof(CommandRecord::request_backlog_)
      - PROTOBUF_FIELD_OFFSET(CommandRecord, save_backlog_)>(
          reinterpret_cast<char*>(&save_backlog_),
          reinterpret_cast<char*>(&other->save_backlog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::amun::_Command_default_instance_._instance.get_mutable()->simulator_ = const_cast< ::amun::CommandSimulator*>(
      ::amun::CommandSimulator::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->referee_ = const_cast< ::amun::CommandReferee*>(
      ::amun::CommandReferee::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->set_team_blue_ = const_cast< ::robot::Team*>(
      ::robot::Team::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->set_team_yellow_ = const_cast< ::robot::Team*>(
      ::robot::Team::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->strategy_blue_ = const_cast< ::amun::CommandStrategy*>(
      ::amun::CommandStrategy::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->strategy_yellow_ = const_cast< ::amun::CommandStrategy*>(
      ::amun::CommandStrategy::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->strategy_autoref_ = const_cast< ::amun::CommandStrategy*>(
      ::amun::CommandStrategy::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->control_ = const_cast< ::amun::CommandControl*>(
      ::amun::CommandControl::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->transceiver_ = const_cast< ::amun::CommandTransceiver*>(
      ::amun::CommandTransceiver::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->tracking_ = const_cast< ::amun::CommandTracking*>(
      ::amun::CommandTracking::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->amun_ = const_cast< ::amun::CommandAmun*>(
      ::amun::CommandAmun::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->mixed_team_destination_ = const_cast< ::amun::HostAddress*>(
      ::amun::HostAddress::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->debugger_input_ = const_cast< ::amun::CommandDebuggerInput*>(
      ::amun::CommandDebuggerInput::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->pause_simulator_ = const_cast< ::amun::PauseSimulatorCommand*>(
      ::amun::PauseSimulatorCommand::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->replay_ = const_cast< ::amun::CommandReplay*>(
      ::amun::CommandReplay::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->playback_ = const_cast< ::amun::CommandPlayback*>(
      ::amun::CommandPlayback::internal_default_instance());
  ::amun::_Command_default_instance_._instance.get_mutable()->record_ = const_cast< ::amun::CommandRecord*>(
      ::amun::CommandRecord::internal_default_instance());
}
class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._has_bits_);
  static const ::amun::CommandSimulator& simulator(const Command* msg);
  static void set_has_simulator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::amun::CommandReferee& referee(const Command* msg);
  static void set_has_referee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::robot::Team& set_team_blue(const Command* msg);
  static void set_has_set_team_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::robot::Team& set_team_yellow(const Command* msg);
  static void set_has_set_team_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::amun::CommandStrategy& strategy_blue(const Command* msg);
  static void set_has_strategy_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::amun::CommandStrategy& strategy_yellow(const Command* msg);
  static void set_has_strategy_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::amun::CommandStrategy& strategy_autoref(const Command* msg);
  static void set_has_strategy_autoref(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::amun::CommandControl& control(const Command* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::amun::CommandTransceiver& transceiver(const Command* msg);
  static void set_has_transceiver(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::amun::CommandTracking& tracking(const Command* msg);
  static void set_has_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::amun::CommandAmun& amun(const Command* msg);
  static void set_has_amun(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::amun::HostAddress& mixed_team_destination(const Command* msg);
  static void set_has_mixed_team_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::amun::CommandDebuggerInput& debugger_input(const Command* msg);
  static void set_has_debugger_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::amun::PauseSimulatorCommand& pause_simulator(const Command* msg);
  static void set_has_pause_simulator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::amun::CommandReplay& replay(const Command* msg);
  static void set_has_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::amun::CommandPlayback& playback(const Command* msg);
  static void set_has_playback(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::amun::CommandRecord& record(const Command* msg);
  static void set_has_record(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::amun::CommandSimulator&
Command::_Internal::simulator(const Command* msg) {
  return *msg->simulator_;
}
const ::amun::CommandReferee&
Command::_Internal::referee(const Command* msg) {
  return *msg->referee_;
}
const ::robot::Team&
Command::_Internal::set_team_blue(const Command* msg) {
  return *msg->set_team_blue_;
}
const ::robot::Team&
Command::_Internal::set_team_yellow(const Command* msg) {
  return *msg->set_team_yellow_;
}
const ::amun::CommandStrategy&
Command::_Internal::strategy_blue(const Command* msg) {
  return *msg->strategy_blue_;
}
const ::amun::CommandStrategy&
Command::_Internal::strategy_yellow(const Command* msg) {
  return *msg->strategy_yellow_;
}
const ::amun::CommandStrategy&
Command::_Internal::strategy_autoref(const Command* msg) {
  return *msg->strategy_autoref_;
}
const ::amun::CommandControl&
Command::_Internal::control(const Command* msg) {
  return *msg->control_;
}
const ::amun::CommandTransceiver&
Command::_Internal::transceiver(const Command* msg) {
  return *msg->transceiver_;
}
const ::amun::CommandTracking&
Command::_Internal::tracking(const Command* msg) {
  return *msg->tracking_;
}
const ::amun::CommandAmun&
Command::_Internal::amun(const Command* msg) {
  return *msg->amun_;
}
const ::amun::HostAddress&
Command::_Internal::mixed_team_destination(const Command* msg) {
  return *msg->mixed_team_destination_;
}
const ::amun::CommandDebuggerInput&
Command::_Internal::debugger_input(const Command* msg) {
  return *msg->debugger_input_;
}
const ::amun::PauseSimulatorCommand&
Command::_Internal::pause_simulator(const Command* msg) {
  return *msg->pause_simulator_;
}
const ::amun::CommandReplay&
Command::_Internal::replay(const Command* msg) {
  return *msg->replay_;
}
const ::amun::CommandPlayback&
Command::_Internal::playback(const Command* msg) {
  return *msg->playback_;
}
const ::amun::CommandRecord&
Command::_Internal::record(const Command* msg) {
  return *msg->record_;
}
void Command::clear_set_team_blue() {
  if (set_team_blue_ != nullptr) set_team_blue_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Command::clear_set_team_yellow() {
  if (set_team_yellow_ != nullptr) set_team_yellow_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_move_blue_(arena),
  robot_move_yellow_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:amun.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robot_move_blue_(from.robot_move_blue_),
      robot_move_yellow_(from.robot_move_yellow_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simulator()) {
    simulator_ = new ::amun::CommandSimulator(*from.simulator_);
  } else {
    simulator_ = nullptr;
  }
  if (from._internal_has_referee()) {
    referee_ = new ::amun::CommandReferee(*from.referee_);
  } else {
    referee_ = nullptr;
  }
  if (from._internal_has_set_team_blue()) {
    set_team_blue_ = new ::robot::Team(*from.set_team_blue_);
  } else {
    set_team_blue_ = nullptr;
  }
  if (from._internal_has_set_team_yellow()) {
    set_team_yellow_ = new ::robot::Team(*from.set_team_yellow_);
  } else {
    set_team_yellow_ = nullptr;
  }
  if (from._internal_has_strategy_blue()) {
    strategy_blue_ = new ::amun::CommandStrategy(*from.strategy_blue_);
  } else {
    strategy_blue_ = nullptr;
  }
  if (from._internal_has_strategy_yellow()) {
    strategy_yellow_ = new ::amun::CommandStrategy(*from.strategy_yellow_);
  } else {
    strategy_yellow_ = nullptr;
  }
  if (from._internal_has_strategy_autoref()) {
    strategy_autoref_ = new ::amun::CommandStrategy(*from.strategy_autoref_);
  } else {
    strategy_autoref_ = nullptr;
  }
  if (from._internal_has_control()) {
    control_ = new ::amun::CommandControl(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from._internal_has_transceiver()) {
    transceiver_ = new ::amun::CommandTransceiver(*from.transceiver_);
  } else {
    transceiver_ = nullptr;
  }
  if (from._internal_has_tracking()) {
    tracking_ = new ::amun::CommandTracking(*from.tracking_);
  } else {
    tracking_ = nullptr;
  }
  if (from._internal_has_amun()) {
    amun_ = new ::amun::CommandAmun(*from.amun_);
  } else {
    amun_ = nullptr;
  }
  if (from._internal_has_mixed_team_destination()) {
    mixed_team_destination_ = new ::amun::HostAddress(*from.mixed_team_destination_);
  } else {
    mixed_team_destination_ = nullptr;
  }
  if (from._internal_has_debugger_input()) {
    debugger_input_ = new ::amun::CommandDebuggerInput(*from.debugger_input_);
  } else {
    debugger_input_ = nullptr;
  }
  if (from._internal_has_pause_simulator()) {
    pause_simulator_ = new ::amun::PauseSimulatorCommand(*from.pause_simulator_);
  } else {
    pause_simulator_ = nullptr;
  }
  if (from._internal_has_replay()) {
    replay_ = new ::amun::CommandReplay(*from.replay_);
  } else {
    replay_ = nullptr;
  }
  if (from._internal_has_playback()) {
    playback_ = new ::amun::CommandPlayback(*from.playback_);
  } else {
    playback_ = nullptr;
  }
  if (from._internal_has_record()) {
    record_ = new ::amun::CommandRecord(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amun.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_command_2eproto.base);
  ::memset(&simulator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_) -
      reinterpret_cast<char*>(&simulator_)) + sizeof(record_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:amun.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simulator_;
  if (this != internal_default_instance()) delete referee_;
  if (this != internal_default_instance()) delete set_team_blue_;
  if (this != internal_default_instance()) delete set_team_yellow_;
  if (this != internal_default_instance()) delete strategy_blue_;
  if (this != internal_default_instance()) delete strategy_yellow_;
  if (this != internal_default_instance()) delete strategy_autoref_;
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete transceiver_;
  if (this != internal_default_instance()) delete tracking_;
  if (this != internal_default_instance()) delete amun_;
  if (this != internal_default_instance()) delete mixed_team_destination_;
  if (this != internal_default_instance()) delete debugger_input_;
  if (this != internal_default_instance()) delete pause_simulator_;
  if (this != internal_default_instance()) delete replay_;
  if (this != internal_default_instance()) delete playback_;
  if (this != internal_default_instance()) delete record_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_command_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:amun.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_move_blue_.Clear();
  robot_move_yellow_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(simulator_ != nullptr);
      simulator_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(referee_ != nullptr);
      referee_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(set_team_blue_ != nullptr);
      set_team_blue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(set_team_yellow_ != nullptr);
      set_team_yellow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(strategy_blue_ != nullptr);
      strategy_blue_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(strategy_yellow_ != nullptr);
      strategy_yellow_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(strategy_autoref_ != nullptr);
      strategy_autoref_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(control_ != nullptr);
      control_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(transceiver_ != nullptr);
      transceiver_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tracking_ != nullptr);
      tracking_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(amun_ != nullptr);
      amun_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(mixed_team_destination_ != nullptr);
      mixed_team_destination_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(debugger_input_ != nullptr);
      debugger_input_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(pause_simulator_ != nullptr);
      pause_simulator_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(replay_ != nullptr);
      replay_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(playback_ != nullptr);
      playback_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(record_ != nullptr);
    record_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .amun.CommandSimulator simulator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandReferee referee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_referee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .robot.Team set_team_blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_team_blue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .robot.Team set_team_yellow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_team_yellow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategy strategy_blue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_strategy_blue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategy strategy_yellow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_strategy_yellow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandStrategy strategy_autoref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_strategy_autoref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandControl control = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandTransceiver transceiver = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transceiver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandTracking tracking = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandAmun amun = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_amun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.HostAddress mixed_team_destination = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed_team_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .amun.RobotMoveCommand robot_move_blue = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_move_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .amun.RobotMoveCommand robot_move_yellow = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_move_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandDebuggerInput debugger_input = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_debugger_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.PauseSimulatorCommand pause_simulator = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_simulator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandReplay replay = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandPlayback playback = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_playback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .amun.CommandRecord record = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amun.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .amun.CommandSimulator simulator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simulator(this), target, stream);
  }

  // optional .amun.CommandReferee referee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::referee(this), target, stream);
  }

  // optional .robot.Team set_team_blue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_team_blue(this), target, stream);
  }

  // optional .robot.Team set_team_yellow = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::set_team_yellow(this), target, stream);
  }

  // optional .amun.CommandStrategy strategy_blue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::strategy_blue(this), target, stream);
  }

  // optional .amun.CommandStrategy strategy_yellow = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::strategy_yellow(this), target, stream);
  }

  // optional .amun.CommandStrategy strategy_autoref = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::strategy_autoref(this), target, stream);
  }

  // optional .amun.CommandControl control = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::control(this), target, stream);
  }

  // optional .amun.CommandTransceiver transceiver = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transceiver(this), target, stream);
  }

  // optional .amun.CommandTracking tracking = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tracking(this), target, stream);
  }

  // optional .amun.CommandAmun amun = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::amun(this), target, stream);
  }

  // optional .amun.HostAddress mixed_team_destination = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::mixed_team_destination(this), target, stream);
  }

  // repeated .amun.RobotMoveCommand robot_move_blue = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_move_blue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_robot_move_blue(i), target, stream);
  }

  // repeated .amun.RobotMoveCommand robot_move_yellow = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_move_yellow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_robot_move_yellow(i), target, stream);
  }

  // optional .amun.CommandDebuggerInput debugger_input = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::debugger_input(this), target, stream);
  }

  // optional .amun.PauseSimulatorCommand pause_simulator = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::pause_simulator(this), target, stream);
  }

  // optional .amun.CommandReplay replay = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::replay(this), target, stream);
  }

  // optional .amun.CommandPlayback playback = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::playback(this), target, stream);
  }

  // optional .amun.CommandRecord record = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amun.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amun.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .amun.RobotMoveCommand robot_move_blue = 14;
  total_size += 1UL * this->_internal_robot_move_blue_size();
  for (const auto& msg : this->robot_move_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .amun.RobotMoveCommand robot_move_yellow = 15;
  total_size += 1UL * this->_internal_robot_move_yellow_size();
  for (const auto& msg : this->robot_move_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .amun.CommandSimulator simulator = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simulator_);
    }

    // optional .amun.CommandReferee referee = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *referee_);
    }

    // optional .robot.Team set_team_blue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_team_blue_);
    }

    // optional .robot.Team set_team_yellow = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_team_yellow_);
    }

    // optional .amun.CommandStrategy strategy_blue = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_blue_);
    }

    // optional .amun.CommandStrategy strategy_yellow = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_yellow_);
    }

    // optional .amun.CommandStrategy strategy_autoref = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_autoref_);
    }

    // optional .amun.CommandControl control = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .amun.CommandTransceiver transceiver = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transceiver_);
    }

    // optional .amun.CommandTracking tracking = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracking_);
    }

    // optional .amun.CommandAmun amun = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amun_);
    }

    // optional .amun.HostAddress mixed_team_destination = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mixed_team_destination_);
    }

    // optional .amun.CommandDebuggerInput debugger_input = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debugger_input_);
    }

    // optional .amun.PauseSimulatorCommand pause_simulator = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pause_simulator_);
    }

    // optional .amun.CommandReplay replay = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replay_);
    }

    // optional .amun.CommandPlayback playback = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playback_);
    }

  }
  // optional .amun.CommandRecord record = 20;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amun.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amun.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amun.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amun.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_move_blue_.MergeFrom(from.robot_move_blue_);
  robot_move_yellow_.MergeFrom(from.robot_move_yellow_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simulator()->::amun::CommandSimulator::MergeFrom(from._internal_simulator());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_referee()->::amun::CommandReferee::MergeFrom(from._internal_referee());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_set_team_blue()->::robot::Team::MergeFrom(from._internal_set_team_blue());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_set_team_yellow()->::robot::Team::MergeFrom(from._internal_set_team_yellow());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_strategy_blue()->::amun::CommandStrategy::MergeFrom(from._internal_strategy_blue());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_strategy_yellow()->::amun::CommandStrategy::MergeFrom(from._internal_strategy_yellow());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_strategy_autoref()->::amun::CommandStrategy::MergeFrom(from._internal_strategy_autoref());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_control()->::amun::CommandControl::MergeFrom(from._internal_control());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_transceiver()->::amun::CommandTransceiver::MergeFrom(from._internal_transceiver());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tracking()->::amun::CommandTracking::MergeFrom(from._internal_tracking());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_amun()->::amun::CommandAmun::MergeFrom(from._internal_amun());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_mixed_team_destination()->::amun::HostAddress::MergeFrom(from._internal_mixed_team_destination());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_debugger_input()->::amun::CommandDebuggerInput::MergeFrom(from._internal_debugger_input());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_pause_simulator()->::amun::PauseSimulatorCommand::MergeFrom(from._internal_pause_simulator());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_replay()->::amun::CommandReplay::MergeFrom(from._internal_replay());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_playback()->::amun::CommandPlayback::MergeFrom(from._internal_playback());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_mutable_record()->::amun::CommandRecord::MergeFrom(from._internal_record());
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amun.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amun.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robot_move_blue_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robot_move_yellow_)) return false;
  if (_internal_has_simulator()) {
    if (!simulator_->IsInitialized()) return false;
  }
  if (_internal_has_set_team_blue()) {
    if (!set_team_blue_->IsInitialized()) return false;
  }
  if (_internal_has_set_team_yellow()) {
    if (!set_team_yellow_->IsInitialized()) return false;
  }
  if (_internal_has_strategy_blue()) {
    if (!strategy_blue_->IsInitialized()) return false;
  }
  if (_internal_has_strategy_yellow()) {
    if (!strategy_yellow_->IsInitialized()) return false;
  }
  if (_internal_has_strategy_autoref()) {
    if (!strategy_autoref_->IsInitialized()) return false;
  }
  if (_internal_has_control()) {
    if (!control_->IsInitialized()) return false;
  }
  if (_internal_has_transceiver()) {
    if (!transceiver_->IsInitialized()) return false;
  }
  if (_internal_has_tracking()) {
    if (!tracking_->IsInitialized()) return false;
  }
  if (_internal_has_amun()) {
    if (!amun_->IsInitialized()) return false;
  }
  if (_internal_has_mixed_team_destination()) {
    if (!mixed_team_destination_->IsInitialized()) return false;
  }
  if (_internal_has_debugger_input()) {
    if (!debugger_input_->IsInitialized()) return false;
  }
  if (_internal_has_pause_simulator()) {
    if (!pause_simulator_->IsInitialized()) return false;
  }
  if (_internal_has_replay()) {
    if (!replay_->IsInitialized()) return false;
  }
  if (_internal_has_playback()) {
    if (!playback_->IsInitialized()) return false;
  }
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_move_blue_.InternalSwap(&other->robot_move_blue_);
  robot_move_yellow_.InternalSwap(&other->robot_move_yellow_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, record_)
      + sizeof(Command::record_)
      - PROTOBUF_FIELD_OFFSET(Command, simulator_)>(
          reinterpret_cast<char*>(&simulator_),
          reinterpret_cast<char*>(&other->simulator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace amun
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amun::RobotMoveCommand* Arena::CreateMaybeMessage< ::amun::RobotMoveCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::RobotMoveCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::SimulatorSetup* Arena::CreateMaybeMessage< ::amun::SimulatorSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::SimulatorSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::SimulatorWorstCaseVision* Arena::CreateMaybeMessage< ::amun::SimulatorWorstCaseVision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::SimulatorWorstCaseVision >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandSimulator* Arena::CreateMaybeMessage< ::amun::CommandSimulator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandSimulator >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandReferee* Arena::CreateMaybeMessage< ::amun::CommandReferee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandReferee >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage* Arena::CreateMaybeMessage< ::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyAutomaticEntrypoints_EntrypointForStage >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyAutomaticEntrypoints* Arena::CreateMaybeMessage< ::amun::CommandStrategyAutomaticEntrypoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyAutomaticEntrypoints >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyLoad* Arena::CreateMaybeMessage< ::amun::CommandStrategyLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyClose* Arena::CreateMaybeMessage< ::amun::CommandStrategyClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyClose >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyTriggerDebugger* Arena::CreateMaybeMessage< ::amun::CommandStrategyTriggerDebugger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyTriggerDebugger >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategy* Arena::CreateMaybeMessage< ::amun::CommandStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandControl* Arena::CreateMaybeMessage< ::amun::CommandControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandControl >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::TransceiverConfiguration* Arena::CreateMaybeMessage< ::amun::TransceiverConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::TransceiverConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::HostAddress* Arena::CreateMaybeMessage< ::amun::HostAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::HostAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::SimulatorNetworking* Arena::CreateMaybeMessage< ::amun::SimulatorNetworking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::SimulatorNetworking >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandTransceiver* Arena::CreateMaybeMessage< ::amun::CommandTransceiver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandTransceiver >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::VirtualFieldTransform* Arena::CreateMaybeMessage< ::amun::VirtualFieldTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::VirtualFieldTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandTracking* Arena::CreateMaybeMessage< ::amun::CommandTracking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandTracking >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandStrategyChangeOption* Arena::CreateMaybeMessage< ::amun::CommandStrategyChangeOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandStrategyChangeOption >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandAmun* Arena::CreateMaybeMessage< ::amun::CommandAmun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandAmun >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandDebuggerInputDisable* Arena::CreateMaybeMessage< ::amun::CommandDebuggerInputDisable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandDebuggerInputDisable >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandDebuggerInputLine* Arena::CreateMaybeMessage< ::amun::CommandDebuggerInputLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandDebuggerInputLine >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandDebuggerInput* Arena::CreateMaybeMessage< ::amun::CommandDebuggerInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandDebuggerInput >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::PauseSimulatorCommand* Arena::CreateMaybeMessage< ::amun::PauseSimulatorCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::PauseSimulatorCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandReplay* Arena::CreateMaybeMessage< ::amun::CommandReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::Flag* Arena::CreateMaybeMessage< ::amun::Flag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::Flag >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandPlayback* Arena::CreateMaybeMessage< ::amun::CommandPlayback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandPlayback >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::CommandRecord* Arena::CreateMaybeMessage< ::amun::CommandRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::CommandRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::amun::Command* Arena::CreateMaybeMessage< ::amun::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amun::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
